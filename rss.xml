<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
<channel>
<title>Code In PHP</title>
<link>https://codeinphp.github.io</link>
<description>PHP and more...</description>
<language>en-us</language>
<item>
<title>Exploring Lambda Functions and Closures in PHP</title>
<description><![CDATA[<h1>What is a Lambda Function</h1>
<p>A lambda function (also known as <strong>anonymous function</strong>) is a function that has:</p>
<ol>
<li>No Name</li>
<li>Can be assigned to a variable</li>
<li>Can be passed as argument to other functions or methods of a class</li>
</ol>
<p>In the past, this was possible with <a href="http://php.net/manual/en/function.create-function.php"><code>create_function</code></a> like:</p>
<pre><code>$multiply = create_function('$a, $b','return $a * $b;');
echo $multiply(5, 5); // 25</code></pre>
<p>But it was a nuisance if you needed to write longer anonymous functions using <code>create_function</code> because it was difficult to write function body that way inside quotes and then escaping quotes and stuff...</p>
<p>PHP 5.3 introduced true support of lambda/anonymous functions similar to how you see in Javascript, so you could write above code like:</p>
<pre><code>$multiply = function ($a, $b) {
    return $a * $b;
};

echo $multiply(5, 5); // 25</code></pre>
<p>As can be seen, above anonymous function has no name and has been assigned to variable  <code>$multiply</code>. You can also pass it other functions:</p>
<pre><code>function countEmails($number) {
    echo 'you have ' . $number . ' emails!';
}

$multiply = function ($a, $b) {
    return $a * $b;
};

echo countEmails($multiply(2, 5)); // you have 10 emails!</code></pre>
<p>You could have also written above like this if you wanted:</p>
<pre><code>function countEmails($multiply, $a, $b) {
    echo 'you have ' . $multiply($a, $b) . ' emails!';
}

$multiply = function ($a, $b) {
    return $a * $b;
};

echo countEmails($multiply, 2, 5); // you have 10 emails!</code></pre>
<p>And even like this:</p>
<pre><code>function countEmails($multiply, $a, $b) {
    echo 'you have ' . $multiply($a, $b) . ' emails!';
}

echo countEmails(function ($a, $b) {
    return $a * $b;
}, 2, 5); // you have 10 emails!</code></pre>
<p>You can also assign it to array:</p>
<pre><code>$array['multiply'] = function ($a, $b) {
     return $a * $b;
};

echo $array['multiply'](2, 10); // 20</code></pre>
<p>And even an object:</p>
<pre><code>$obj = new StdClass();

$obj-&gt;multiply = function ($a, $b) {
     return $a * $b;
};</code></pre>
<p>But caveat here is that instead of calling it like <code>echo $obj-&gt;multiply(2, 10)</code>, you would instead need to do:</p>
<pre><code>$multiply = $obj-&gt;multiply;
echo $multiply(2, 10); // 20</code></pre>
<p>Now let's create little program which says <code>Hello, World</code> using anonymous function:</p>
<pre><code>$message = 'Hello, World!';

$sayHello = function () {
    echo $message;
};

$sayHello();</code></pre>
<p>Oops, it results in error:</p>
<p><code>Notice: Undefined variable: message</code></p>
<p>It means anonymous function does not have access to <code>$message</code> inside it. This is exactly when we need a closure to have access to that <code>$message</code> variable.</p>
<h1>What is a Closure</h1>
<p>A closure is a lambda/anonymous function that is aware of its surrounding context through the use of <code>use</code> keyword. It can access a variable outside of the scope where it is defined. Consider last <code>$sayHello</code> anonymous function and we convert it into closure through the use of <code>use</code> keyword and gain access to the <code>$message</code> variable:</p>
<pre><code>$message = 'Hello, World!';

$sayHello = function () use ($message) {
    echo $message;
};

$sayHello(); // Hello, World!</code></pre>
<p>Thanks to closure (<code>use</code> keyword), we are now able to access <code>$message</code> variable!</p>
<hr />
<p>If you need to change the value of passed outside variable, you need to use reference of course:</p>
<pre><code>$message = 'Hello, World!';

$sayHello = function () use (&amp;$message) {
    echo $message;
    $message = 'Hello World Again!';
};

$sayHello(); // Hello, World!
$sayHello(); // Hello World Again!</code></pre>
<p>You can also pass regular arguments to closure:</p>
<pre><code>$message = 'World!';

$sayHello = function ($arg) use ($message) {
    echo $arg . ' ' . $message;
};

$sayHello('Hello'); // Hello, World!</code></pre>
<p>You can also create a recursive function using closure easily, here is example of how you can create a factorial function:</p>
<pre><code>$factorial = function( $n ) use ( &amp;$factorial ) {
    if( $n == 1 ) return 1;
    return $factorial( $n - 1 ) * $n;
};

echo $factorial( 5 );</code></pre>
<p>Notice that <code>$factorial</code> is passed by reference using <code>&amp;</code> otherwise it won't work.</p>
<hr />
<p>The difference between an anonymous function and closure is that closure has ability to access a variable outside of its scope by using the <code>use</code> keyword. So that is the subtle difference between an anonymous function and a closure. In fact, both are of them are instances of <code>Closure</code> class internally:</p>
<pre><code>// anonymous function
$multiply = function ($a, $b) {
    return $a * $b;
};

$message = 'Hello, World';

// closure
$sayHello = function () use ($message) {
    echo $message;
};

var_dump ($multiply instanceof Closure); // true
var_dump ($sayHello instanceof Closure); // true</code></pre>
<h1>Type Hinting</h1>
<p>We know that you can already type hint few things:</p>
<ul>
<li>Object</li>
<li>Array</li>
<li>Interface</li>
<li>callable</li>
</ul>
<p>But you can also type hint <code>Closure</code> as shown below:</p>
<pre><code>function multiply($number, Closure $closure)
{
    return $closure($number);
}

$closure = function($x){ return $x * 2; };
echo multiply(10, $closure);</code></pre>
<p>Here we have made <code>multiply</code> function to require type of <code>Closure</code> as second parameter.</p>
<h1>Use Cases</h1>
<p>Anonymous functions and closures can be used in variety of situations.</p>
<p><strong>As Callbacks</strong></p>
<p>You can use them in your custom functions as callback or some of the PHP's built-in functions such as <code>array_map()</code>, <code>array_reduce()</code>, <code>array_filter()</code>, <code>array_walk()</code>, etc. Let's take example of <code>array_walk()</code>. If you <a href="http://php.net/manual/en/function.array-walk.php">look at it's definition</a>, here is how it looks:</p>
<pre><code>bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )</code></pre>
<p>Notice the second parameter <code>callable $callback</code>. It means it expects something to be callable function. Anytime you see such parameter in some function definition, it means you can apply anonymous functions to it. Here is example:</p>
<pre><code>$myArray = array(1, 2, 3, 4, 5);

// multiply each array value with 2    
array_walk($myArray, function(&amp;$value, $index){
    $value *= 2;
});

print_r($myArray);

Array
(
    [0] =&gt; 2
    [1] =&gt; 4
    [2] =&gt; 6
    [3] =&gt; 8
    [4] =&gt; 10
)</code></pre>
<p><strong>In Routing</strong></p>
<p>You might have seen closures being used in routing in framework like Laravel, Slim, Silex, etc:</p>
<pre><code>$app = new \Slim\Slim($options);

$app-&gt;get('/', function () use ($app) {
    $app-&gt;render('home', array('content' =&gt; 'Hello, World!!!'));
});</code></pre>
<p>Here <code>$app</code> is imported from outside scope into the scope of closure so that it can be used to render the view <code>$app-&gt;render(...)</code></p>]]></description>
<link>https://codeinphp.github.io/post/exploring-lambda-functions-and-closures-in-php</link>
<pubDate>Sat, 18 Apr 2015 23:57:00 +0200</pubDate>
</item>
<item>
<title>Learning Javascript</title>
<description><![CDATA[<p>JavaScript is <a href="http://en.wikipedia.org/wiki/JavaScript">cross-platform</a>, cross-browser language; javascript is everywhere; web, <a href="http://en.wikipedia.org/wiki/Rich_Internet_application">RIA</a> (rich internet applications), <a href="http://sixrevisions.com/javascript/mobile%C2%A0web-development-frameworks/">mobile, tablets</a>, <a href="https://github.com/mrdoob/three.js/">animations</a> and even on server with the advent of <a href="http://nodejs.org/">node.js</a>. Javascript is the language of the future.</p>
<p>I started off with jQuery without knowing anything much about javascript because by the time I didn’t find any reason to learn it due to fact that  javascript libraries did everything we needed putting complexities out of the way. Today I realize that I chose the wrong path, a good understanding of javascript language is crucial if you look at the reasons I have mentioned in the very beginning but it is never too late to start again, that’s exactly what I have decided, learning javascript seriously. I am not the only one who has started realizing the power and future of javascript, there are <a href="http://shiflett.org/blog/2012/feb/learning-javascript">giants</a> who have started learning it too. If you are also javascript-library-only developer, or even <strong>copy-paster</strong> programmer, <a href="http://phpadvent.org/2009/you-really-need-to-learn-javascript-by-ed-finkler">you should really</a> <a href="http://net.tutsplus.com/tutorials/javascript-ajax/from-jquery-to-javascript-a-reference/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:%20nettuts%20%28Nettuts%2b%29">learn javascript</a> seriously !</p>
<p>Despite design flaws and bad reputation of the language <a href="http://javascript.crockford.com/javascript.html">as they say</a> and probably rightly so, javascript is popular and language of the choice for those who have gone into deeper <a href="http://ejohn.org/">understating</a> <a href="http://sstephenson.us/">of</a> <a href="http://infrequently.org/about-me/">it</a>. Javascript language <a href="http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/">does</a> <a href="http://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/">have</a> <a href="http://www.svennerberg.com/2009/02/global-variables-in-javascript/">bad</a> <a href="http://lucumr.pocoo.org/2011/2/6/automatic-semicolon-insertion/">parts</a> but its <a href="http://www.amazon.com/dp/0596517742/?tag=stackoverfl08-20">good parts</a> over-weigh its bad parts and there is always room to avoid bad parts if you know the language right and use it effectively.</p>
<p>Javascript turns out to be extremely <a href="http://bonsaiden.github.com/JavaScript-Garden/">tricky</a> language, consider:</p>
<pre><code>// Comparison
'' == '0';    //false
0 == '';    // true
0 =='0';    // true

// Type checking
typeof null;    // object

// Scope
function myFunc() {
  return
  {
    name: 'sarfraz'
  };
}

var f = myFunc();
console.log(f);    // undefined</code></pre>
<p>I did <strong>a lot of research</strong> to find best javascript learning resources. On the journey of my exploration, I came across some of the great resources with a lot of reviews and user feedback. By now, if you made your mind to take javascript seriously, here are the best resources out there you should check out.</p>
<h2>Books</h2>
<ul>
<li><a href="http://shop.oreilly.com/product/9780596517748.do">JavaScript: The Good Parts</a> by <a href="http://crockford.com/">Douglas Crockford</a></li>
<li><a href="http://jsninja.com/">Secrets of the JavaScript Ninja</a> by <a href="http://ejohn.org/">John Resig</a></li>
<li><a href="http://jspro.org/">Pro JavaScript Techniques</a> by <a href="http://ejohn.org/">John Resig</a></li>
<li><a href="http://www.amazon.com/Performance-JavaScript-Faster-Application-Interfaces/dp/059680279X">High Performance JavaScript</a> by <a href="http://www.nczonline.net/blog/about/">Nicholas C. Zaka</a></li>
<li><a href="http://www.amazon.com/gp/product/B004XQX4K0/ref=pd_lpo_k2_dp_sr_3?pf_rd_p=486539851&amp;pf_rd_s=lpo-top-stripe-1&amp;pf_rd_t=201&amp;pf_rd_i=0596805527&amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_r=1GJCJ4PSFS8516NGDG28">JavaScript: The Definitive Guide</a> by <a href="http://www.davidflanagan.com/">David Flanagan</a></li>
</ul>
<h2>Online</h2>
<ul>
<li><a href="http://eloquentjavascript.net/">Eloquent JavaScript</a> by Marijn Haverbeke</li>
<li><a href="http://javascript.info/">The JavaScript Tutorial</a></li>
<li><a href="https://developer.mozilla.org/en/JavaScript/Guide">JavaScript Guide MDN</a></li>
<li><a href="http://bonsaiden.github.com/JavaScript-Garden/">JavaScript Garden</a> (For intermediate &amp; advanced programmers – must read !)</li>
</ul>
<h2>Videos</h2>
<ul>
<li><a href="http://learn.appendto.com/">appendto.com</a></li>
<li><a href="http://yuiblog.com/crockford/">Douglas Crockford’s JavaScript Video Series</a></li>
<li><a href="http://www.youtube.com/watch?v=hQVTIJBZook">JavaScript: The Good Parts</a></li>
</ul>
<h2>Blogs to Subscribe</h2>
<ul>
<li><a href="http://perfectionkills.com/">PerfectionKills</a></li>
<li><a href="http://dmitrysoshnikov.com/">Dmitry A. Soshnikov</a></li>
<li><a href="http://javascriptweblog.wordpress.com/">JavaScript, JavaScript</a></li>
<li><a href="http://www.adequatelygood.com/">Adequately Good</a></li>
<li><a href="http://ejohn.org/">John Resig</a></li>
<li><a href="http://www.2ality.com/">2ality</a></li>
<li><a href="http://nemisj.com/">Notes of Maks Nemisj</a></li>
<li><a href="http://addyosmani.com/blog/">Addy Osmani</a></li>
<li>Bonus: <a href="http://net.tutsplus.com/articles/web-roundups/30-developers-you-must-subscribe-to-as-a-javascript-junkie/">33 Developers you MUST Subscribe to as a JavaScript Junkie</a></li>
</ul>
<h2>Tools</h2>
<ul>
<li><a href="http://gruntjs.com/">Grunt</a> (The JavaScript Task Runner)</li>
<li><a href="http://www.jshint.com/">JSHint</a> (JS Code Quality Tool)</li>
<li><a href="http://jsperf.com/">JSPerf</a> (JS Performance Testing)</li>
<li><a href="http://www.jsunit.net/">JSUnit</a> (JS Unit Testing)</li>
<li><a href="http://siliconforks.com/jscoverage/">JSCoverage</a> (JS Code Coverage)</li>
<li><a href="http://code.google.com/p/jsdoc-toolkit/">JDDoc-Toolkit</a> (JS Documentation Tool)</li>
<li>Bonus: <a href="http://coding.smashingmagazine.com/2009/02/08/50-extremely-useful-javascript-tools/">50 Useful JavaScript Tools</a></li>
</ul>]]></description>
<link>https://codeinphp.github.io/post/learning-javascript</link>
<pubDate>Sat, 18 Apr 2015 20:35:00 +0200</pubDate>
</item>
<item>
<title>Abstract Class vs Interface</title>
<description><![CDATA[<p>I found this picture that tells the difference between <code>abstract class</code> and <code>interface</code>:</p>
<p><img src="https://codeinphp.github.io/images/142937584655328b66dcedc.png" alt="enter image description here" /></p>
<hr />
<p>Let's see each comparison practically so we know what it means.</p>
<pre>
Interface support multiple inheritance | Abstract class does not support multiple inheritance
</pre>
<p>It means you can extend an <code>interface</code> with one or more (hence <em>multiple inheritance</em>) interfaces like:</p>
<pre><code>interface Interface_A { }
interface Interface_B { }
interface Interface_C { }

interface MyInterface extends Interface_A, Interface_B, Interface_C { }</code></pre>
<p>As can be seen, we are extending <code>MyInterface</code> with three other interfaces <code>Interface_A</code>, <code>Interface_A</code> and <code>Interface_C</code>.</p>
<p>Let's now try to extend an <code>abstract class</code>:</p>
<pre><code>class Class_A { }

abstract class MyAbstractClass extends Class_A { }</code></pre>
<p>No problem there, you CAN extend an abstract class with exactly one class but if you try to add one more:</p>
<pre><code>class Class_A { }
class Class_B { }

abstract class MyAbstractClass extends Class_A, Class_B { }</code></pre>
<p>This time PHP would give you strange error without telling you what you are doing wrong:</p>
<p><code>Parse error: syntax error, unexpected ',', expecting '{'</code></p>
<p>I wish PHP would have given message somewhat like (hope PHP gives smarter error messages in future versions):</p>
<p><code>Fatal Error: You cannot extend an abstract class with more than one classes</code></p>
<hr />
<pre>
Interface does'n Contains Data Member | Abstract class contains Data Member
</pre>
<p>By data members, it means class properties or variables. So you cannot add data members to an interface:</p>
<pre><code>interface MyInterface {
    public $foo = null;
}</code></pre>
<p>So in an interface, only method stubs can be provided.</p>
<p>You can add data members to an abstract class though, this is valid code of course:</p>
<pre><code>abstract class MyAbstractClass {
    public $foo = null;
}</code></pre>
<hr />
<pre>
Interface does'n contains Constructors | Abstract class contains Constructors
</pre>
<p>It sounds like this point applies to may be other languages but in PHP an interface CAN have an empty constructor shell:</p>
<pre><code>interface MyInterface {
    public function __construct();
}</code></pre>
<p>Like other languages, PHP shouldn't have allowed having a constructor inside an interface. But anyways, it doesn't make much sense here and should be avoided anyway.</p>
<p>On the other hand, an abstract class can contain constructor method:</p>
<pre><code>abstract class MyAbstractClass {
    abstract public function __construct();
}</code></pre>
<p>Here constructor is said to be <code>abstract</code> and therefore expends child classes to complement for it. However, you can also have common initialization code in constructor of an abstract class too in which case, you would need to remove the <code>abstract</code> keyword and provide the body for it:</p>
<pre><code>abstract class MyAbstractClass {
    public function __construct() {
         // initialization code
    };
}</code></pre>
<hr />
<pre>
An interface Contains only incomplete member (signature of member) | An abstract class Contains both incomplete (abstract) and complete member
</pre>
<p>This simply means an interface can only contain method stubs not their implementation. This is pretty same as second point in the image above. This is why in methods of an interface, they don't have bodies marked with <code>{ }</code> braces. So an interface is completely empty shell that enforces some rules that child classes must implement and that's it.</p>
<p>Abstract classes can have both; empty method definitions as well as full method implementation. Generally empty method stubs are prefixed with <code>abstract</code> keyword so that child classes must provide their implementation details. But an abstract class can also contain full method implementation inside it which are generally used for common piece of functionality that each child class may need. For example:</p>
<pre><code>abstract class Animal {
    // child classes must implement this
    abstract function prey();

    public function run() {
        echo 'I am running!';
    }
}

class Dog extends Animal {
    public function prey() {
        echo 'I killed the cat !';
    }
}

class Cat extends Animal {
    public function prey() {
        echo 'I killed the rat !';
    }
}

$dog = new Dog();
$cat = new Cat();

$dog-&gt;prey(); // I killed the cat !
$cat-&gt;prey(); // I killed the rat !

$dog-&gt;run(); // I am running!
$cat-&gt;run(); // I am running!</code></pre>
<p>In above code, we can see that <code>Animal</code> class has one <code>abstract</code> method called <code>prey</code> because each child class (animal) have their own ways of finding prey and a full implemented method called <code>run</code> because all animals can run, this doesn't need to be defined in each of child classes. So here <code>run</code> method is fully implemented and represents common data that needs to be shared across child classes.</p>
<p>Notice that other than common fully implemented methods inside an abstract class, you can also have common data members eg variables that need to be shared across child classes.</p>
<hr />
<pre>
An interface cannot have access modifiers by default everything is assumed as public | An abstract class can contain access modifiers for the subs, functions, properties
</pre>
<p>By access modifiers, we mean ability to change scoping by using keywords like <a href="http://stackoverflow.com/questions/4361553/php-public-private-protected"><code>public</code>, <code>private</code> and <code>protected</code></a>. We cannot use these for interfaces but we can use them for everything in abstract classes.</p>
<hr />
<pre>
Members of interface can not be Static | Only Complete Member of abstract class can be Static
</pre>
<p>This is again possible in PHP (as of now with PHP 5.4) unlike other languages, so you CAN do:</p>
<pre><code>interface MyInterface {
    static function foo();
}</code></pre>
<p>Notice the addition of keyword <code>static</code> to mark it as static method.</p>
<p>For abstract class, you can have static members as well as those methods that are implemented in the abstract class:</p>
<pre><code>abstract class MyAbstractClass {
    public static $foo = null;

    public static function foo() {}
}</code></pre>
<p>But you cannot have a method to be both <code>static</code> and <code>abstract</code>, so you cannot do this, which is common across the languages:</p>
<pre><code>abstract class MyAbstractClass {
    public static $foo = null;

    abstract static function foo() {} // error
}</code></pre>
<hr />
<p>In conclusion, interface and abstract classes are completely different from each other, you cannot interchange them or use one as alternative over the other. Interfaces are completely empty shells that expect child classes to implement everything for them. On the other hand, abstract class can not only contain <em>common piece of information</em> by implementing inside them but also expect child classes to fill in the remaining gaps.</p>]]></description>
<link>https://codeinphp.github.io/post/abstract-class-vs-interface</link>
<pubDate>Sat, 18 Apr 2015 20:26:00 +0200</pubDate>
</item>
<item>
<title>PHPExecute – PHP Code Runner</title>
<description><![CDATA[<p>Often times, you quickly need to test some PHP code. To do so, you create a file, put it in web root folder, write some code in it, open its URL and then you see its output. This is kind of lot of work and I often need a way to quickly test my PHP code. This requirement made me create my own code testing tool, <strong>PHPExecute</strong>.</p>
<p>PHPExecute is the fastest way to test PHP code. You write the code, hit the execute button, an ajax request is triggered and you see the output fast without page refresh. Here are some of the cool things about it:</p>
<ul>
<li>Very fast way to test your code</li>
<li>Nice friendly interface</li>
<li>Code  Highlighting</li>
<li>Useful PHP, system information panel</li>
<li>Saving favorite code snippets</li>
<li>Adding useful classes</li>
<li>Easy to extend as per your needs</li>
</ul>
<p><strong>Screenshot</strong></p>
<p><img src="https://codeinphp.github.io/images/1428864689552abeb12a929.gif" alt="enter image description here" /></p>
<h2>Extending PHPExecute</h2>
<p>The good thing is that you can download (see below) it, see its source code and extend it however you like according to your needs. For example, you can add classes for testing, performance or any other purpose. One can even integrate bash commands (I am not going into details of that) to make it even more useful tool to work with.</p>
<h2>Usage Notes</h2>
<ul>
<li>
<p>PHPExecute uses <a href="http://php.net/manual/en/function.eval.php"><code>eval</code></a> function to run the code. It is strongly recommended that you should use that tool for local testing only and not on production server due to security reasons. If you do, you use it on your own risk.</p>
</li>
<li>
<p>In order to save snippets, PHPExecute uses <a href="http://en.wikipedia.org/wiki/Web_Storage">localStorage</a> feature which is available in latest browsers (and IE9+) only and also it can be around <strong>5MB</strong> in size. This isn’t that ideal if you are going to save a lot of snippets but you can always extend PHPExecute to add database support and save your snippets there.</p>
</li>
<li>The custom functions that can be used in PHPExecute can be found in <strong>includes/functions.php</strong> file. You can add any functions in that file that you want to use directly inside PHPExecute. The custom functions can also be seen in <strong>PHP Info &gt; User Defined Functions</strong>.</li>
</ul>
<hr />
<p><strong>Download</strong></p>
<p><a href="https://github.com/sarfraznawaz2005/PHPExecute">Download PHPExecute at Github</a></p>
<p>I hope PHPExecute turns out to be a useful tool for you. Please do share if you add anything to it via comments so that we could know it and integrate ourselves too :)</p>]]></description>
<link>https://codeinphp.github.io/post/phpexecute-php-code-runner</link>
<pubDate>Sun, 12 Apr 2015 20:57:00 +0200</pubDate>
</item>
<item>
<title>Outputting PHP To Browser Console</title>
<description><![CDATA[<p>Although there exist <strong>classes</strong> for outputting PHP to browser console such as Google’s <strong>PHP Console</strong> and certain others, I was looking for a way to output PHP to browser console without including those classes in my PHP files or installing any browser plugin to do the same. Currently, I am working on Facebook application development in which you have to commit/upload the code to check certain output out of PHP unlike offline development where you check the code output before committing it up. This makes Facebook application development a longer process for a developer but you got to live with it because you don’t have a choice.</p>
<p>Anyways, to speed up the code output checking process a little and rather using <code>debug_backtrace</code>, <code>print_r</code>, <code>print</code>, <code>echo</code>, <code>var_dump</code>, etc which you need to remove/comment again, I created a function to get output of PHP on the browser console. One could use <code>error_log</code> function but even that makes you go to your log file and then see the output. Of course, browser needs to support/have the console so that code result is output there. Because IE less than 8 doesn't have console, this won’t work in IE less than 8, though result won’t be affected in it. Notice that you can see console in IE=&gt;8 by pressing <kbd>F12</kbd> key and then going to <strong>Script</strong> tab where you need to make sure <strong>Console</strong> tab is selected on the right side.</p>
<p>Here is the function:</p>
<pre><code> /**
 * Logs messages/variables/data to browser console from within php
 *
 * @param $name: message to be shown for optional data/vars
 * @param $data: variable (scalar/mixed) arrays/objects, etc to be logged
 * @param $jsEval: whether to apply JS eval() to arrays/objects
 *
 * @return none
 * @author Sarfraz
 */
 function logConsole($name, $data = NULL, $jsEval = FALSE)
 {
      if (! $name) return false;

      $isevaled = false;
      $type = ($data || gettype($data)) ? 'Type: ' . gettype($data) : '';

      if ($jsEval &amp;&amp; (is_array($data) || is_object($data)))
      {
           $data = 'eval(' . preg_replace('#[\s\r\n\t\0\x0B]+#', '', json_encode($data)) . ')';
           $isevaled = true;
      }
      else
      {
           $data = json_encode($data);
      }

      # sanitalize
      $data = $data ? $data : '';
      $search_array = array("#'#", '#""#', "#''#", "#\n#", "#\r\n#");
      $replace_array = array('"', '', '', '\\n', '\\n');
      $data = preg_replace($search_array,  $replace_array, $data);
      $data = ltrim(rtrim($data, '"'), '"');
      $data = $isevaled ? $data : ($data[0] === "'") ? $data : "'" . $data . "'";

$js = &lt;&lt;&lt;JSCODE
\n&lt;script&gt;
 // fallback - to deal with IE (or browsers that don't have console)
 if (! window.console) console = {};
 console.log = console.log || function(name, data){};
 // end of fallback

 console.log('$name');
 console.log('------------------------------------------');
 console.log('$type');
 console.log($data);
 console.log('\\n');
&lt;/script&gt;
JSCODE;

      echo $js;
 } # end logConsole</code></pre>
<p>Here is an example of how to use it:</p>
<pre><code>$name = 'sarfraz';
$fruits = array("banana", "apple", "strawberry", "pineaple");

$user = new stdClass;
$user-&gt;name = "Sarfraz";
$user-&gt;desig = "Sr. Software Engineer";
$user-&gt;lang = "PHP";

logConsole('$name var', $name, true);
logConsole('An array of fruits', $fruits, true);
logConsole('$user object', $user, true);</code></pre>
<p>It would result in:</p>
<p><img src="https://codeinphp.github.io/images/1428862620552ab69c5381f.gif" alt="enter image description here" /></p>
<p>Although this does not prevent committing code first to see the code output if you are on facebook application development but it defintely does save some time. I have been using this function successfully so far, please let me know your ideas if any on how to improve this piece of code further. </p>]]></description>
<link>https://codeinphp.github.io/post/outputting-php-to-browser-console</link>
<pubDate>Sun, 12 Apr 2015 20:23:00 +0200</pubDate>
</item>
<item>
<title>My Local Development Workflow with WAMP/XAMPP, GIT and Google Drive</title>
<description><![CDATA[<p>I like to share my local development workflow which has turned out to be <strong>extremely useful</strong> in that all my projects’ files are <strong>version-ed and on the cloud</strong>. I use <strong>git</strong> to keep my files versioned and <strong>Google Drive</strong> so that I can access my projects anywhere. In this post, I will share really cool stuff that you definitely should consider implementing for your own projects.</p>
<p>If you don’t know about git and its benefits, there are numerous compelling reasons why it is useful, you might want to check out:</p>
<ul>
<li><a href="http://learn.github.com/p/intro.html">Introduction To Git</a></li>
<li><a href="http://www.gitology.com/chapter/benefits-of-using-git">The Benefits of Using Git</a></li>
<li><a href="http://coding.smashingmagazine.com/2011/07/26/modern-version-control-with-git-series/">Modern Version Control With Git</a></li>
<li><a href="http://whygitisbetterthanx.com/#svn">whygitisbetterthanx.com</a></li>
</ul>
<p>The benefits of keeping all my files and projects on the cloud like Google Drive should be obvious but if you are still not sure, check out:</p>
<ul>
<li><a href="http://www.salesforce.com/uk/socialsuccess/cloud-computing/why-move-to-cloud-10-benefits-cloud-computing.jsp">Why Move to the Cloud? 10 Benefits of Cloud Computing</a></li>
<li><a href="http://www.go-oodles.com/index.php/2012/08/the-six-key-business-benefits-of-google-drive/">The Six Key Business Benefits of Google Drive</a></li>
</ul>
<p>Although there are many other cloud storage services such as <a href="https://skydrive.live.com/">Microsoft SkyDrive</a>, <a href="https://www.dropbox.com/">Dropbox</a>, <a href="https://www.box.com/">Box</a>, <a href="http://www.bitcasa.com/">Bitcasa</a>, etc but I chose Google Drive since it gives 10GB of free space which should be enough for my development needs. If that’s not enough for you, you can create another Gmail account and get another 10GB free. You might want to read their usage policies too if you want.  You may also consider using Bitcasa which gives you unlimited space but since it is new, I can’t personally trust it as yet.</p>
<h2>Installing Google Drive</h2>
<p><strong>Step 1:</strong> <a href="https://mail.google.com/">Create a new Gmail account</a> to be used with Google Drive client software. Although you can use your existing account but it is good idea to create a new one used for your projects’ backup only.</p>
<p><strong>Step 2:</strong> Download Google Drive from <a href="https://tools.google.com/dlpage/drive">here</a> or <a href="http://filehippo.com/download_google_drive/">here</a>. During the installation, you would be asked to specify the folder path which will be synchronized with Google Drive. Make sure that you specify a folder present on any drive other than your OS drive so that even if your system crashes or corrupts, your projects remain intact. For example, I have that folder on path D:/Google Drive/</p>
<p><strong>Step 3:</strong>  Once installed, run Google Drive software and specify the credentials of your newly created Gmail account.</p>
<h2>Using Google Drive with WAMP/XAMPP</h2>
<p>Now that we’ve setup google drive, it is time to setup document root to google drive folder and create virtual host. This would allow you to run your local projects through WAMP/XAMPP from google drive folder. The reason why we do this is that since google drive folder will be sync by google drive software, any project we put in that folder will automatically be uploaded in your google drive account.</p>
<blockquote>
<p><strong>Note:</strong> I am using XAMPP but if you are using WAMP, some settings or file paths might be different, you should consider reading its
documentation.</p>
</blockquote>
<p><strong>Step 1:</strong> Inside your google drive folder, create a new folder named <strong>webroot</strong> making whole path <strong>X:\Google Drive\webroot</strong> where <strong>X</strong> represents your drive letter.</p>
<p><strong>Step 2:</strong> Assuming you have specified google drive folder to be  <strong>D:/Google Drive/</strong>, open <strong>httpd.conf</strong> (normally located at <strong>apache\conf</strong> folder) file in notepad or other text editor and find the line <strong>Include “conf/extra/httpd-vhosts.conf”</strong>. If there is a hash (#) before that line, remove it. Now find the line with <strong><Directory /></strong> and you should see something similar to:</p>
<pre><code>&lt;Directory /&gt;
   AllowOverride none
   Require all denied
&lt;/Directory&gt;</code></pre>
<p>Change <strong>Require all denied</strong>  to <strong>Require all granted</strong></p>
<p>Or if you see something like:</p>
<pre><code>&lt;Directory /&gt;
    Options FollowSymLinks
    AllowOverride None
    Order deny,allow
    Deny from all
&lt;/Directory&gt;</code></pre>
<p>Change it to:</p>
<pre><code>&lt;Directory /&gt;
    ........
    Allow from all
&lt;/Directory&gt;</code></pre>
<p>Now come to bottom of the file and add:</p>
<pre><code>&lt;Directory "D:\Google Drive\webroot"&gt;
  Options Indexes MultiViews
  Order Allow,Deny
  Allow from all
&lt;/Directory&gt;</code></pre>
<p>Save the file and close it.</p>
<p><strong>Step 3:</strong> Open <strong>httpd-vhosts.conf</strong> (normally located at <strong>apache\conf\extra</strong> folder) and add these lines at the end of it:</p>
<pre><code>&lt;VirtualHost 127.0.0.1:80&gt;
    DocumentRoot "D:/Google Drive/webroot"
    ServerName gdroot.loc
    ServerAlias gdroot.loc
    ErrorLog "D:/Google Drive/webroot/logs/error.log"
    CustomLog "D:/Google Drive/webroot/logs/access.log" combined
&lt;/VirtualHost&gt;</code></pre>
<p>Save the file and close it. Notice that we have specified <strong>gdroot.loc</strong> as address which actually means google drive root (<strong>.loc</strong> signals that it is local folder) which actually maps to your google drive webroot folder eg <strong>D:/Google Drive/webroot</strong>. Notice that you could name it anything you want like <strong>mycoolwebsite.com, yourname.com</strong>, etc but of course that is local folder running from your own computer.</p>
<p><strong>Step 4:</strong> Open <strong>hosts</strong> file in notepad or other text editor located at <strong>X:\Windows\System32\drivers\etc</strong> where <strong>X</strong> stands for drive letter where your OS is installed. At the end of that file add this line assuming you specified URL in above step as <strong>gdroot.loc</strong>:</p>
<pre><code>127.0.0.1       gdroot.loc</code></pre>
<p>Or if you also use port to access your LAMP/XAMPP URLs, specify that as well:</p>
<pre><code>127.0.0.1:PORT_NUMBER_HERE       gdroot.loc</code></pre>
<blockquote>
<p><strong>Note:</strong> If you can’t edit hosts file, you need to have file owner permission, search on Google how to do that.</p>
</blockquote>
<p>Restart apache and access the new url by typing <strong>gdroot.loc</strong> in your browser. You should see screen similar to when you go to <a href="http://localhost">http://localhost</a>.</p>
<p>Congratulations ! you have a nice workflow now. You can now put all your existing our new projects inside your new document root which was assumed to be located at <strong>D:\Google Drive\webroot</strong> and now all your projects are sync with google drive and automatically uploaded to your google account which you can access anywhere. For example, you can now access your projects at office or any other computer by installing google drive client software  there and telling it sync/download your webroot folder. Your projects are now always there and backed up on the cloud :)</p>
<p>Let’s take cool stuff one step further by using <strong>git</strong> so that our projects file are also <strong>version-ed</strong>. If you don’t know much about git and its benefits consider reading links posted above or below in the <strong>Git Resources</strong> section.</p>
<h2>Using Git with a Central Repository</h2>
<p>Creating and using central repository is especially useful in a team. If you just want to keep your projects version-ed and are the only developer working on a project, the normal flow is (unless you track your project to remote host such as <a href="http://github.com/">github</a>):</p>
<ul>
<li>modify files</li>
<li>commit your changes</li>
<li>repeat</li>
</ul>
<p>So essentially you can skip this section if you just want to version your project files and are only developer working on a project.</p>
<p><strong>Step 1:</strong> Download msysgit from <a href="http://code.google.com/p/msysgit/downloads/list">here</a>, choose first link from there. Install it with default settings.</p>
<p><strong>Step 2:</strong> Go to your google drive folder (<strong>D:\Google Drive\</strong>) and create a new folder there named <strong>central.git</strong></p>
<p><strong>Step 3:</strong> Right click on newly created folder and choose <strong>Git Bash Here</strong> and type: </p>
<pre><code>git init –bare</code></pre>
<p><strong>Step 4:</strong> Create a test project folder named <strong>myproject</strong> inside your normal WAMP/XAMPP webroot/htdocs folder or google drive webroot folder mentioned above (Although you can git-manage any folder anywhere on the drive but naturally we want to git-manage projects that we run from webroot/htdocs folder).</p>
<p><strong>Step 5:</strong> Right click on newly created folder, choose <strong>Git Bash Here</strong> and issue these commands one by one:</p>
<pre><code>git init
git remote add central /e/Google\ Drive/central.git/
git push --all central
git push --set-upstream-to central master</code></pre>
<p>Great! now we’ve setup central repository for all our git-managed projects and we can commit, push, fetch all changes from that central repository. For any new repository, you can now issue commands like:</p>
<pre><code>git clone /e/Google\ Drive/central.git/
git fetch /e/Google\ Drive/central.git/
git push central
and so on</code></pre>
<p>That's it.</p>
<h2>Git Resources</h2>
<ul>
<li><a href="http://learn.github.com/p/intro.html">Introduction To Git</a></li>
<li><a href="http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide">Git for beginners: The definitive practical guide</a></li>
<li><a href="http://net.tutsplus.com/tutorials/other/easy-version-control-with-git/">Easy Version Control with Git</a></li>
<li><a href="http://git-scm.com/book">Pro Git Book</a></li>
<li><a href="http://gitref.org/">Git Reference</a></li>
<li><a href="http://net.tutsplus.com/?s=git">and more</a></li>
</ul>]]></description>
<link>https://codeinphp.github.io/post/my-local-development-workflow-with-wamp-xampp-git-and-google-drive</link>
<pubDate>Sun, 12 Apr 2015 13:24:00 +0200</pubDate>
</item>
<item>
<title>GoodTodo PHP and SQlite App</title>
<description><![CDATA[<p>I really like to keep track of tasks and projects (personal or otherwise) I work on. I used to keep my todos list in notepad or by using some other sticky notes application but I wanted dead simple todos app with beautiful looks and simple to use without irrelevant options or goodies. So here I introduce GoodTodo; a todo app made via PHP and SQlite. I chose SQlite because I wanted to make sure that app is portable and of course since it’s small todo app, choosing SQlite for it makes perfect sense. I have used <a href="http://flightphp.com/">flightPHP</a> framework and <a href="http://j4mie.github.io/idiormandparis/">idiorm ORM</a> for it.</p>
<p>Here are its screenshots:</p>
<p><img src="https://codeinphp.github.io/images/1428836471552a507761961.png" alt="enter image description here" /></p>
<p><img src="https://codeinphp.github.io/images/1428836475552a507b38615.png" alt="enter image description here" /></p>
<p><img src="https://codeinphp.github.io/images/1428836467552a50733de24.png" alt="enter image description here" /></p>
<p><strong>How to use:</strong></p>
<p>Make sure you have wamp/xampp or other stack installed. Download the app and put in www/htdocs folder and browse to that folder via browser something like <a href="http://localhost/todo">http://localhost/todo</a>. Please make sure you have sqlite extension turned on from php.ini if it isn’t already.</p>
<p>So go ahead and <a href="https://dl.dropboxusercontent.com/u/11600057/todo.zip">download GoodTodo</a> to keep track of your todos.</p>]]></description>
<link>https://codeinphp.github.io/post/goodtodo-php-and-sqlite-app</link>
<pubDate>Sun, 12 Apr 2015 13:03:00 +0200</pubDate>
</item>
<item>
<title>BloggerCMS  - An Static Blog Generator CMS</title>
<description><![CDATA[<p>In the <a href="https://codeinphp.github.io/post/welcome.html">last post</a>, I had mentioned about BloggerCMS which is used to build this very blog. BloggerCMS is dead simple CMS that can be used to create fully functional static blogs. Although there are <a href="https://github.com/pinceladasdaweb/Static-Site-Generators#php">quite some static site generators</a> out there but I created BloggerCMS because I was missing these features in any of those static site generators:</p>
<ul>
<li>Web interface that allows me to create blog posts, add pages and more instead of writing blog posts manually in bunch of different text files</li>
<li>Markdown editor with live preview feature so that I don't have to type Markdown syntax myself</li>
<li>I needed a true blog generator instead of generic/advanced site generator</li>
</ul>
<p>Those three things are the driving force why I created BloggerCMS. Here is complete list of features of BloggerCMS as of now:</p>
<ul>
<li><strong>Graphical User Interface</strong> - manage your site via a browser</li>
<li><strong>File-based</strong> - no database required</li>
<li><strong>Truly Static</strong> - no server-side languages needed</li>
<li><strong>Portability</strong> - copy, move, backup or version control your site easily</li>
<li><strong>Integrated Markdown Editor</strong> - no need to know Markdown</li>
<li><strong>Built-in Images Manager</strong></li>
<li><strong>Disqus Commenting System</strong></li>
<li><strong>Search Posts Feature</strong></li>
<li><strong>Pagination</strong></li>
<li><strong>Responsive Layout</strong> - get started easily with the included responsive layout</li>
<li><strong>RSS Support</strong></li>
<li><strong>Sitemap Support</strong></li>
<li><strong>Google Analytics</strong></li>
<li><strong>Code Highlight Support</strong></li>
<li><strong>Tags Cloud Support</strong></li>
<li><strong>Social Follow Section</strong></li>
<li><strong>Categories Section</strong></li>
<li><strong>Archives Section</strong></li>
</ul>
<p>To know more about BloggerCMS, head over to <a href="https://bloggercms.github.io">it's blog</a> or see <a href="https://bloggercms.github.io/post/introducing-bloggercms.html">introductory post</a>.</p>]]></description>
<link>https://codeinphp.github.io/post/bloggercms-an-static-blog-generator-cms</link>
<pubDate>Mon, 06 Apr 2015 21:41:00 +0200</pubDate>
</item>
<item>
<title>Welcome !</title>
<description><![CDATA[<p><strong>Hello, World !</strong></p>
<p>This is my first post on this blog hosted at awesome <a href="https://pages.github.com/">github pages</a>. Previously I used to blog on wordpress <a href="http://sarfraznawaz.wordpress.com">here</a> but I switched to github pages because I really wanted to have static blog with free hosting and ability to write up quick posts using <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> syntax. In the <a href="https://codeinphp.github.io/post/bloggercms-an-static-blog-generator-cms.html">next post</a>, I will write about <strong><a href="https://bloggercms.github.io">BloggerCMS</a></strong>, a CMS I have made that helps create static blogs. This blog has also been generated via BloggerCMS :)</p>
<p>On this blog, I intend to write my ideas mainly about PHP as well as other related web development technologies. </p>
<p><em>Stay tuned :)</em></p>]]></description>
<link>https://codeinphp.github.io/post/welcome</link>
<pubDate>Sun, 05 Apr 2015 15:46:00 +0200</pubDate>
</item>
</channel>
</rss>
