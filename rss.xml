<?xml version="1.0" encoding="ISO-8859-1"?>
<rss version="2.0">
<channel>
<title>Code In PHP</title>
<link>https://codeinphp.github.io</link>
<description>PHP and more...</description>
<language>en-us</language>
<item>
<title>Controllers for Frontend and Backend in CodeIgniter</title>
<description><![CDATA[<p>I find it very inconvenient when you need to create all <strong>frontend</strong> and <strong>backend</strong> controllers without having any common functionality. I don't like the face that I always have to extend <code>CI_Controller</code> for all my backend and frontend controllers. I need ability to specify which controllers related to frontend and which ones relate to backend .</p>
<p>So instead of doing this:</p>
<pre><code>class someFrontendController extends CI_Controller {}
class someBackendController extends CI_Controller {}</code></pre>
<p>I should be able to do this:</p>
<pre><code>class someFrontendController extends FrontendController {}
class someBackendController extends BackendController {}</code></pre>
<p>I also need ability to specify <strong>common</strong> controllers that can be <em>applicable to both frontend and backend</em>: </p>
<pre><code>class someCommonController extends CommonController {}</code></pre>
<p>I will explain <strong>benefits</strong> of having such controllers below. But for now, how do we do that ? Well CodeIgniter is very flexible and does allow you to achieve just that.</p>
<h2>Extending CodeIgniter's <code>CI_Controller</code> Class</h2>
<p>In order to have separate controllers for backend, frontend and common controllers, please follow these steps:</p>
<p>1) Make sure that config <code>$config['subclass_prefix']</code> is set to <code>MY_</code> in <strong>application/config.php</strong> file. It should be so by default.</p>
<p>2) Create a file called <strong>MY_Controller.php</strong> in <strong>application/core</strong> folder and paste this code in it:</p>
<pre><code>&lt;?php (defined('BASEPATH')) OR exit('No direct script access allowed');

class CommonController extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();
    }
}

class FrontendController extends CommonController
{
    public function __construct()
    {
        parent::__construct();
    }
}

class BackendController extends CommonController
{
    public function __construct()
    {
        parent::__construct();
    }
}</code></pre>
<hr />
<p>Now for all of your controllers that belong to frontend, you would extend <code>FrontendController</code> instead of <code>CI_Controller</code> and for all of your controllers that belong to backend, you would extend <code>BackendController</code> instead of <code>CI_Controller</code> like I mentioned above:</p>
<pre><code>class someFrontendController extends FrontendController {}
class someBackendController extends BackendController {}</code></pre>
<p>And for any controllers that might share common data for frontend and backend, you would extend <code>CommonController</code>:</p>
<pre><code>class someCommonController extends CommonController {}</code></pre>
<h1>What's the Point ?</h1>
<p>You might already have guessed the benefits of having separate controllers but if you haven't  yet, well here they are:</p>
<ul>
<li>You can now easily <strong>distinguish</strong> which controllers belong to backend and which ones belong to frontend</li>
<li>You now have ability to have <strong>common code</strong> for both sides of an application. </li>
</ul>
<p>By <strong>common code</strong>, I mean any functionality that you would want to be shared in all of your controllers. Let's assume that we have created login functionality and user is logged on frontend. Now normally you would write some code in all of your controllers (for authorized pages for example) that would check whether or not user is logged in; if user is not logged in, redirect him back to login page something like:</p>
<pre><code>class MyController extends CI_Controller
{
    public function index() {
        // check if user is logged in
        $this-&gt;checkLoginStatus();

        // more code of controller when user is logged in
    }

    // redirect user to login page if not logged in
    protected function checkLoginStatus() {
        if (! $this-&gt;session-&gt;userdata('is_logged_in')) {
            redirect('login');
        }
    }
}</code></pre>
<p>Now for all of your pages that can be viewed only when user is logged in, you will need to insert <code>checkLoginStatus()</code> function in all of those controllers and then call it <code>index()</code> function. That's not good, it is repeating code. Remember the rules <strong><a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Don't Repeat Yourself</a></strong> (DRY) and <strong><a href="http://en.wikipedia.org/wiki/KISS_principle">Keep It Simple, Stupid!</a></strong> (KISS) :)</p>
<p>Let's KISS it; simply put <code>checkLoginStatus()</code> function code in your <code>FrontendController</code> and now all controllers that extend it will have this login check functionality:</p>
<pre><code>class FrontendController extends CommonController
{
    public function __construct()
    {
        parent::__construct();

        // check if user is logged in
        $this-&gt;checkLoginStatus();
    }

    // redirect user to login page if not logged in
    protected function checkLoginStatus() {
        if (! $this-&gt;session-&gt;userdata('is_logged_in')) {
            redirect('login');
        }
    }    
}</code></pre>
<p>And now you don't need to do anything in your normal frontend controllers. You now get login check functionality out of box. In the similar fashion, you can have some common functionality for all of your backend controllers by putting some code in <code>BackendController</code>. This was just an example for login check but of course you could have some other requirement that you wanted to inject in all of your controllers by using <code>FrontendController</code> or <code>BackendController</code>.</p>
<p>You might ask, you could have done all of this by may be using hooks, well that's true but I believe having separate controllers gives you more <strong>control</strong> and <a href="http://en.wikipedia.org/wiki/Separation_of_concerns">separation of concerns</a>.</p>
<p>Similarly, you could put whatever code you want in class for <code>CommonController</code> that would be applicable to <strong>both</strong> frontend and backend. For example you could setup application's overall configuration, upload paths, logos, etc whatever you think should be available site-wide; in all controllers of backend and frontend.</p>
<p>So anything that you put in <code>FrontendController</code> will be available in all controllers of frontend that extend it. Anything that you put in <code>BackendController</code> will be available in all controllers of backend that extend it. Anything that you put in <code>CommonController</code> will be available in all controllers of frontend + backend.</p>
<hr />
<p>And finally there is one more problem I don't like personally. Even though we can now easily find out which controllers belong to frontend or backend, we still have to put all of them in <strong>application/controllers</strong> folder. This doesn't easily tell by looking at file names which controllers belong where unless you open it up and see what it <code>extends</code>. Of course we could use prefix for controller file names like <code>front-foo-controller.php</code> or <code>backend-bar-controller.php</code> but still you have to put them in same folder. It would have been cool if you could have folder structure like this:</p>
<pre>
+ frontend
   - controller-one.php
   - controller-two.php
   - controller-three.php
+ backend
   - controller-one.php
   - controller-two.php
   - controller-three.php
</pre>
<p>Oh yes you can do that as well with the help of <a href="https://bitbucket.org/wiredesignz/codeigniter-modular-extensions-hmvc">HMVC module for CodeIgniter</a> :)</p>
<p>Have fun!</p>]]></description>
<link>https://codeinphp.github.io/post/controllers-for-frontend-and-backend-in-codeigniter</link>
<pubDate>Tue, 21 Apr 2015 15:10:00 +0200</pubDate>
</item>
<item>
<title>CodeIgniter Tip: Time Your Pages</title>
<description><![CDATA[<p>For one of pages in the CodeIgniter application, I needed to find out how much time it takes to load. Pretty obviously first thing that came to mind was to use its built-in <a href="https://ellislab.com/codeigniter/user-guide/libraries/benchmark.html">Benchmarking Class</a>:</p>
<pre><code>$this-&gt;benchmark-&gt;mark('code_start');

// Some code happens here

$this-&gt;benchmark-&gt;mark('code_end');

echo $this-&gt;benchmark-&gt;elapsed_time('code_start', 'code_end');</code></pre>
<p>That's fine as long as you need to benchmark specific points/parts in your code. </p>
<p>But if you need to find out overall time page took to load, you can actually use below variable in your views:</p>
<pre><code>{elapsed_time}</code></pre>
<p>Or simply:</p>
<pre><code>&lt;?php echo $elapsed_time;?&gt;</code></pre>
<p>That variable is automatically created by CodeIgniter.</p>]]></description>
<link>https://codeinphp.github.io/post/codeigniter-tip-time-your-pages</link>
<pubDate>Tue, 21 Apr 2015 13:39:00 +0200</pubDate>
</item>
<item>
<title>Dependency Injection in PHP</title>
<description><![CDATA[<p>This is what Wikipedia has to say about Dependency Injection:</p>
<blockquote>
<p>In software engineering, dependency injection is a software design
pattern that implements inversion of control for software libraries.
Caller delegates to an external framework the control flow of
discovering and importing a service or software module specified or
&quot;injected&quot; by the caller.</p>
</blockquote>
<p>In simple terms, Dependency Injection is a design pattern that helps <em>avoid hard-coded dependencies</em> for some piece of code or software. </p>
<p>The dependencies can be changed at <em>run time as well as compile time</em>. We can use Dependency Injection to write modular, testable and maintainable code:</p>
<ul>
<li><strong>Modular</strong>: The Dependency Injection helps create completely self-sufficient classes or modules</li>
<li><strong>Testable</strong>: It helps write testable code easily eg unit tests for example</li>
<li><strong>Maintainable</strong>: Since each class becomes modular, it becomes easier to manage it</li>
</ul>
<hr />
<h2>The Problem</h2>
<p>We have dependencies almost always in our code. Consider the following procedural example which is pretty common:</p>
<pre><code>function getUsers() {
     global $database;
     return $database-&gt;getAll('users');
}</code></pre>
<p>Here the function <code>getUsers</code> has dependency on the <code>$database</code> variable (tight coupling). It has some of these problems:</p>
<ul>
<li>
<p>The function <code>getUsers</code> needs a <strong>working</strong> connection to <em>some database</em> . Whether there is successful connection to database or not is the fate of <code>getUsers</code> function</p>
</li>
<li>The <code>$database</code> comes from outer scope so chances are it might be overwritten by some other library or code in the same scope in which case function may fail</li>
</ul>
<p>Of course you could have used the <code>try-catch</code> constructs but it still doesn't solve the second problem.</p>
<p>Let's consider another example for a class:</p>
<pre><code>class User 
{
    private $database = null;

    public function __construct() {
        $this-&gt;database = new database('host', 'user', 'pass', 'dbname');
    }

    public function getUsers() {
        return $this-&gt;database-&gt;getAll('users');
    }
}

$user = new User();
$user-&gt;getUsers();</code></pre>
<p>This code again has these problems:</p>
<ul>
<li>
<p>The class <code>User</code> has implicit dependency on the specific <code>database</code>. All dependencies should always be <strong>explicit</strong> not implicit. This defeats <a href="http://en.wikipedia.org/wiki/Dependency_inversion_principle">Dependency inversion principle</a></p>
</li>
<li>
<p>If we wanted to change database credentials, we need to edit the <code>User</code> class which is not good; every class should be completely <strong>modular</strong> or black box. If we need to operate further on it, we should actually use its public properties and methods instead of editing it again and again. This defeats <a href="http://en.wikipedia.org/wiki/Open/closed_principle">Open/closed principle</a></p>
</li>
<li>
<p>Let's assume right now class is using MySQL as database. What if we wanted to use some other type of database ? You will have to modify it.</p>
</li>
<li>
<p>The <code>User</code> class does not necessarily need to know about database connection, it should be confined to its own functionality only. So writing database connection code in <code>User</code> class doesn't make it modular. This defeats the <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single responsibility principle</a>. Think of this analogy: A cat knows how to <code>meow</code> and a dog knows how to <code>woof</code>; you cannot mix them or expect dog to say <code>meow</code>. Just like real world, each object of a class should be responsible for its own specific task.</p>
</li>
<li>It would become harder to write unit tests for the <code>User</code> class because we are instantiating the database class inside its constructor so it would be impossible to write unit tests for the <code>User</code> class without also testing the database class.</li>
</ul>
<h2>Enter Dependency Injection!</h2>
<p>Let's see how we can easily take care of above issues by using Dependency Injection. The Dependency Injection is nothing but <strong>injecting a dependency explicitly</strong>. Let's re-write above class:</p>
<pre><code>class User 
{
    private $database = null;

    public function __construct(Database $database) {
        $this-&gt;database = $database;
    }

    public function getUsers() {
        return $this-&gt;database-&gt;getAll('users');
    }
}

$database = new Database('host', 'user', 'pass', 'dbname');
$user = new User($database);
$user-&gt;getUsers();</code></pre>
<p>And there you have much better code, thanks to Dependency Injection principle. Notice that instead of hard-coding database dependency:</p>
<pre><code>$this-&gt;database = new database('host', 'user', 'pass', 'dbname');</code></pre>
<p>We are now injecting it into the constructor, that's it:</p>
<pre><code>public function __construct(Database $database)</code></pre>
<p>Notice also how we are passing database instance now:</p>
<pre><code>$database = new Database('host', 'user', 'pass', 'dbname');
$user = new User($database);
$user-&gt;getUsers();</code></pre>
<p>It follows <a href="http://en.wikipedia.org/wiki/Hollywood_Principle">Hollywood Principle</a>, which states: <strong>&quot;Don’t call us, we’ll call you.&quot;</strong></p>
<p>Let's see if this explicit dependency injection now solves problems we mentioned above.</p>
<hr />
<blockquote>
<p>The class User has implicit dependency on the specific database
. All dependencies should always be explicit not implicit.
This defeats Dependency inversion principle</p>
</blockquote>
<p>We have already made database dependency explicit by requiring it into the constructor of the <code>User</code> class:</p>
<pre><code>public function __construct(Database $database)</code></pre>
<p>Here we are taking advantage of <strong>type hinting</strong> by specifying type of object we are expecting which is <code>Database</code> although it wasn't necessary but it is always a good idea to type hint when you can.</p>
<blockquote>
<p>If we wanted to change database credentials, we need to edit the User
class which is not good; every class should be completely modular or
black box. If we need to operate further on it, we should actually use
its public properties and methods instead of editing it again and
again. This defeats Open/closed principle</p>
</blockquote>
<p>The <code>User</code> class now does not need to worry about how database is connected. All it expects is <code>Database</code> instance. We no more need to edit <code>User</code> class for it's dependency, we have just provided it with what it needed.</p>
<blockquote>
<p>Let's assume right now class is using MySQL as database. What if we
wanted to use some other type of database ? You will have to modify
it.</p>
</blockquote>
<p>Again, the <code>User</code> class doesn't need to know which type of database is used. For the <code>Database</code>, we could now create different adapters for different types of database and pass to <code>User</code> class. For example, we could create an <code>interface</code> that would enforce common methods for all different types of database classes that must be implement by them. For our example, we pretend that interface would enforce to have a <code>getUser()</code> method requirement in different types of database classes.</p>
<blockquote>
<p>The User class does not necessarily need to know about database
connection, it should be confined to its own functionality only. So
writing database connection code in User class doesn't make it
modular. This defeats the Single responsibility principle.</p>
</blockquote>
<p>Of course <code>User</code> class now doesn't know how database was connected. It just needs a valid connected <code>Database</code> instance.</p>
<blockquote>
<p>It would become harder to write unit tests for the User class because
we are instantiating the database class inside its constructor so it
would be impossible to write unit tests for the User class without
also testing the database class.</p>
</blockquote>
<p>If you have wrote unit tests, you know now it will be a breeze to write tests for the <code>User</code> class using something like <a href="https://github.com/padraic/mockery">Mockery</a> or similar to create mock object for the <code>Database</code>.</p>
<hr />
<h2>Different Ways of Injecting Dependencies</h2>
<p>Now that we have seen how useful Dependency Injection is, let's see different ways of injecting dependencies. There are three ways you can inject dependencies:</p>
<ul>
<li>Constructor Injection</li>
<li>Setter Injection</li>
<li>Interface Injection</li>
</ul>
<p><strong>Constructor Injection</strong></p>
<p>We have already seen example of <strong>Constructor Injection</strong> in above example. Constructor injection is useful when:</p>
<ul>
<li>
<p>A dependency is <strong>required</strong> and class can't work without it. By using constructor injection. we make sure all its required dependencies are passed.</p>
</li>
<li>Since constructor is called only at the time of instantiating a class, we can make sure that its dependencies cant be changed during the life time of the object.</li>
</ul>
<p>Constructor injection suffer from one problem though:</p>
<ul>
<li>Since constructor has dependencies, it becomes rather difficult to extend/override it in child classes.</li>
</ul>
<p><strong>Setter Injection</strong></p>
<p>Unlike Constructor injection which makes it <strong>required</strong> to have its dependencies passed, setter injection can be used to have <strong>optional dependencies</strong>. Let's pretend that our <code>User</code> class doesn't require <code>Database</code> instance but uses optionally for certain tasks. In this case, you would use a setter method to inject the <code>Database</code> into the <code>User</code> class something like:</p>
<pre><code>class User 
{
    private $database = null;

    public function setDatabase(Database $database) {
        $this-&gt;database = $database;
    }

    public function getUsers() {
        return $this-&gt;database-&gt;getAll('users');
    }
}

$database = new Database('host', 'user', 'pass', 'dbname');
$user = new User();
$user-&gt;setDatabase($database);
$user-&gt;getUsers();</code></pre>
<p>As you can see, here we have used <code>setDatabase()</code> setter function to inject <code>Database</code> dependency into the <code>User</code> class. If we needed some other dependency, we could have created one more setter method and injected in the similar fashion.</p>
<p>So Setter Injection is useful when:</p>
<ul>
<li>A class needs optional dependencies so it can set itself up with default values or add additional functionality it needs.</li>
</ul>
<blockquote>
<p>Notice that you could also inject dependency via <strong>public property</strong>
for a class. So instead of using setter function
<code>$user-&gt;setDatabase($database);</code>, you could also do <code>$user-&gt;database = new Database(...);</code></p>
</blockquote>
<p><strong>Interface Injection</strong></p>
<p>In this type of injection, an interface enforces the dependencies for any classes that implement it, for example:</p>
<pre><code>interface someInterface {
    function getUsers(Database $database);
}</code></pre>
<p>Now any class that needs to implement <code>someInterface</code> must provide <code>Database</code> dependency in their <code>getUsers()</code> methods.</p>
<hr />
<h2>The Problem Again</h2>
<p>So for we have seen very contrived example of injecting dependency into a simple class but in real world applications, a class might have many dependencies. It isn't all that easy to manage all those dependencies because you need to KNOW which dependencies are required by a certain class and HOW they need to be instantiated. Let's take example of setter injection:</p>
<pre><code>class User 
{
    private $database = null;

    public function setDatabase(Database $database) {
        $this-&gt;database = $database;
    }

    public function getUsers() {
        return $this-&gt;database-&gt;getAll('users');
    }
}</code></pre>
<p>Since dependencies in this case are optional, we could have mistakenly written this code to get users:</p>
<pre><code>$user = new User();
$user-&gt;getUsers();</code></pre>
<p>Since we didn't know <code>getUsers()</code> method is actually dependent on <code>Database</code> class, this would have given error. You could have found that out only by going to code of <code>User</code> class and then realizing there is <code>setDatabase()</code> method that must be called before using the <code>getUsers()</code> method. Or let's assume further that before using database, we needed to set some type of configuration for the <code>User</code> class like:</p>
<pre><code>$user = new User();
$user-&gt;setConfig($configArray);</code></pre>
<p>Then again we needed to remember specific order of method calls:</p>
<pre><code>$user = new User();
$user-&gt;setConfig($configArray);
$user-&gt;setDatabase($database);</code></pre>
<p>So you must remember order of method calls, you can't use database if you don't setup configuration first, so you can't do:</p>
<pre><code>$user = new User();
$user-&gt;setDatabase($database);
$user-&gt;setConfig($configArray);</code></pre>
<p>This is example for setter injection but even with constructor injection if there are many dependencies, it becomes harder to manage all of those manually and you could easily and mistakenly create more than one instances of dependencies throughout your code which would result in high memory usage.</p>
<p>You might wonder dependency injection sounded like good thing to have but these problems are not worth it. Well that's not true because there is solution to all of these problems discussed next :)</p>
<h2>Solution - Dependency Injection Container</h2>
<p>Of course it would be difficult to manage dependencies manually; this is why you need a Dependency Injection Container. A Dependency Injection Container is something that handles dependencies for your class(es) automatically. If you have worked with Laravel or Symfony, you know that their components have dependencies on on other classes. How do they manage all of those dependencies ? Yes they use some sort of Dependency Injection Container.</p>
<p>There are <a href="http://www.sitepoint.com/php-dependency-injection-container-performance-benchmarks/">quite some dependency injection containers out there for PHP</a> that can be used for this purpose or you can also write your own. Each container might have bit of different syntax but they perform the same thing under the hood.</p>
<hr />
<p>So in conclusion, you must always remove hard-coded dependencies from your code and inject them using Dependency Injection instead for its benefits and then have all the injected dependencies managed automatically for you by using some dependency injection container.</p>]]></description>
<link>https://codeinphp.github.io/post/dependency-injection-in-php</link>
<pubDate>Sun, 19 Apr 2015 21:44:00 +0200</pubDate>
</item>
<item>
<title>Visual Query - A Basic MySQL Query Builder App</title>
<description><![CDATA[<p>The client I am working with is <em>somewhat</em> technical and he wanted the ability to create his own reporting out of database. He isn't all that expert in knowing SQL so in order to help him I built <strong>Visual Query</strong> app to help him <strong>build his SQL queries visually</strong> through a provided interface.</p>
<p>Visual Query is basic MySQL query builder and database browser app that has these basic features:</p>
<ul>
<li>Ability to choose different databases</li>
<li>Ability to export result set to CSV and Excel</li>
<li>Custom queries option</li>
<li>Visual Query builder</li>
<li>Query log, search facility, pagination, etc</li>
</ul>
<p>Here is how it looks:</p>
<p><img src="https://codeinphp.github.io/images/1429438678553380d670675.png" alt="enter image description here" /></p>
<hr />
<p>One can also write custom queries with syntax highlighting support as well as code prediction support:</p>
<p><img src="https://codeinphp.github.io/images/1429438683553380db1db48.png" alt="enter image description here" /></p>
<hr />
<p>And here is the query builder interface:</p>
<p><img src="https://codeinphp.github.io/images/1429438687553380df677ee.png" alt="enter image description here" /></p>
<hr />
<h2>How to Use</h2>
<p>First of all, download it from <a href="https://github.com/sarfraznawaz2005/VisualQuery">its repository</a>. Once downloaded, edit the <code>config.php</code> file with database details and users login information:</p>
<pre><code>// edit database settings
$config['database_host'] = 'localhost';
$config['database_user'] = 'root';
$config['database_password'] = '';
$config['database_dbname'] = 'mydb';

//////////////////////////////////////////////
// user details who can login - You can also specify more than one user
//////////////////////////////////////////////

// user 1
$config['username'][] = 'admin';
$config['password'][] = 'admin';

// user 2
$config['username'][] = 'admin2';
$config['password'][] = 'admin2';</code></pre>]]></description>
<link>https://codeinphp.github.io/post/visual-query-a-basic-mysql-query-builder-app</link>
<pubDate>Sun, 19 Apr 2015 12:31:00 +0200</pubDate>
</item>
<item>
<title>Extending DataMapper for CodeIgniter</title>
<description><![CDATA[<p>For one of my projects I was using CodeIgniter framework with goodies like <a href="http://datamapper.wanwizard.eu/">DataMapper</a> (by wanwizard.eu), <a href="https://bitbucket.org/wiredesignz/codeigniter-modular-extensions-hmvc">HMVC Module</a>, <a href="http://github.com/EllisLab/CodeIgniter/wiki/View-Object-PHP5">View Objects</a> and more. Everything was smooth and sound until client requested that some of database tables must be encrypted. I was already encrypting sensitive information like passwords, etc but client wanted encryption for more tables such that:</p>
<ul>
<li>One-way hashing, once data is encrypted, it can't be decrypted,  we chose <a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard">AES</a> (Advanced Encryption Standard)</li>
<li>For same piece of text, hashing should be able to generate different encrypted text always so no two same text should sound like similar</li>
<li>Code should know whether provided piece of text is already encrypted or not</li>
</ul>
<p>I created the encryption class and did some trickery so that it always gave <em>different encryption text</em> for the <em>same string</em>. And also used some kind of prefix information that would later let the code know whether or not something is already encrypted.</p>
<p>The real problem for me was that by the time project had turned into huge codebase, it would have taken ages to go and modify code everywhere so that new requirement of encryption is applied everywhere. I was using <a href="http://datamapper.wanwizard.eu/">DataMapper</a> library everywhere to interact with database and model classes looked like this:</p>
<pre><code>class Api_client extends DataMapper
{
    # object properties
    public $id;
    public $appid;
    public $apikey;
    public $request_uri;

    # relations
    public $has_one = array('client');

    # validation
    public $validation = array(
        'appid' =&gt; array(
            'label' =&gt; 'App ID',
            'rules' =&gt; array('required', 'trim')
        ),
        'apikey' =&gt; array(
            'label' =&gt; 'API Key',
            'rules' =&gt; array('required', 'trim')
        ),
        'request_uri' =&gt; array(
            'label' =&gt; 'Request URI',
            'rules' =&gt; array('required', 'trim')
        )
    );

    # Default to ordering by id
    public $default_order_by = array('id' =&gt; 'desc');

    # Optional - useful if a record is to be retrieved by ID eg $user = new User(1);
    public function __construct($id = null)
    {
        parent::__construct($id);
    }

    # Optional - post model initialisation code
    public function post_model_init($from_cache = false)
    {
    }
}</code></pre>
<p>We can see that each model class extends the data mapper:</p>
<pre><code>class Api_client extends DataMapper</code></pre>
<p>This is what was a clue to me. So in order to avoid modifying lots of code in whole codebase, I knew I can only extend this data mapper and inject my functionality the way I needed.</p>
<p>I actually needed the ability to:</p>
<ul>
<li>automatically encrypt given fields in some table when saving them to database</li>
<li>automatically getting the right value when reading back from database</li>
</ul>
<p>By that I mean, instead of going everywhere in codebase and modifying code to encrypt certain fields like this:</p>
<pre><code>$apiClient = new Api_client();
$apiClient-&gt;appid = Encode($appId);     // encrypt this field value
$apiClient-&gt;apikey = Encode($apikey);  // encrypt this field value
$apiClient-&gt;request_uri = $request_uri;
$apiClient-&gt;save(); // save to db</code></pre>
<p>I simply wanted to leave current code as is without modifying it:</p>
<pre><code>$apiClient = new Api_client();
$apiClient-&gt;appid = $appId;
$apiClient-&gt;apikey = $apikey;
$apiClient-&gt;request_uri = $request_uri;
$apiClient-&gt;save(); // save to db</code></pre>
<p>In this case, I wanted data mapper to <strong>automatically</strong> encrypt the <code>appid</code> and <code>apikey</code> values for me. Now imagine I had this code placed in quite some files, it would have been time-consuming process to modify and add <code>Encode()</code> function calls manually everywhere.</p>
<p>In order to do that, I simply told data mapper which fields need to be encrypted:</p>
<pre><code>class Api_client extends DataMapper
{
    ////////////////////

    // for encryption fields
    private $encryptFields = array(
       'appid',
       'apikey',
    );    
}</code></pre>
<p>Now if you look at the code of data mapper, you would see it uses <code>_to_object()</code> function to map fields and <code>save()</code> function to save the info to database. So I tapped into these in my child classes and modified them a bit so that <code>$encryptFields</code> are auto-magically encrypted on my behalf. Since we are extending data mapper (<code>class Api_client extends DataMapper</code>), I modified it like this to do the encryption for me:</p>
<pre><code>class Api_client extends DataMapper
{
    # object properties
    public $id;
    public $appid;
    public $apikey;
    public $request_uri;

    # relations
    public $has_one = array('client');

    # validation
    public $validation = array(
    'appid' =&gt; array('label' =&gt; 'App ID', 'rules' =&gt; array('required', 'trim')), 
    'apikey' =&gt; array('label' =&gt; 'API Key', 'rules' =&gt; array('required', 'trim')), 
    'request_uri' =&gt; array('label' =&gt; 'Request URI', 'rules' =&gt; array('required', 'trim'))
    );

    // for encryption fields
    private $encryptFields = array('appid', 'apikey');

    # Default to ordering by id
    public $default_order_by = array('id' =&gt; 'desc');

    # Optional - useful if a record is to be retrieved by ID eg $user = new User(1);
    public function __construct($id = null)
    {
        parent::__construct($id);
    }

    # Optional - post model initialisation code
    public function post_model_init($from_cache = false)
    {
    }

    // extending date modal here //
    public function _to_object($item, $row)
    {
        // Populate this object with values from first record
        foreach ($row as $key =&gt; $value) {
            if ($this-&gt;isEncryptedField($key)) {
                $item-&gt;{$key} = decodeField($value);
            } else {
                $item-&gt;{$key} = $value;
            }
        }

        foreach ($this-&gt;fields as $field) {
            if (!isset($row-&gt;{$field})) {
                $item-&gt;{$field} = null;
            }
        }

        // Force IDs to integers
        foreach ($this-&gt;_field_tracking['intval'] as $field) {
            if (isset($item-&gt;{$field})) {
                $item-&gt;{$field} = intval($item-&gt;{$field});
            }
        }

        if (!empty($this-&gt;_field_tracking['get_rules'])) {
            $item-&gt;_run_get_rules();
        }

        $item-&gt;_refresh_stored_values();

        if ($this-&gt;_instantiations) {
            foreach ($this-&gt;_instantiations as $related_field =&gt; $field_map) {
                // convert fields to a 'row' object
                $row = new stdClass();
                foreach ($field_map as $item_field =&gt; $c_field) {
                    $row-&gt;{$c_field} = $item-&gt;{$item_field};
                }

                // get the related item
                $c =&amp; $item-&gt;_get_without_auto_populating($related_field);
                // set the values
                $c-&gt;_to_object($c, $row);

                // also set up the -&gt;all array
                $c-&gt;all    = array();
                $c-&gt;all[0] = $c-&gt;get_clone();
            }
        }
    }

    public function save($object = '', $related_field = '')
    {
        // Temporarily store the success/failure
        $result = array();

        // Validate this objects properties
        $this-&gt;validate($object, $related_field);

        // If validation passed
        if ($this-&gt;valid) {

            // Begin auto transaction
            $this-&gt;_auto_trans_begin();

            $trans_complete_label = array();

            // Get current timestamp
            $timestamp = $this-&gt;_get_generated_timestamp();

            // Check if object has a 'created' field, and it is not already set
            if (in_array($this-&gt;created_field, $this-&gt;fields) &amp;&amp; empty($this-&gt;{$this-&gt;created_field})) {
                $this-&gt;{$this-&gt;created_field} = $timestamp;
            }

            // SmartSave: if there are objects being saved, and they are stored
            // as in-table foreign keys, we can save them at this step.
            if (!empty($object)) {
                if (!is_array($object)) {
                    $object = array(
                        $object
                    );
                }

                $this-&gt;_save_itfk($object, $related_field);
            }

            // Convert this object to array
            $data = $this-&gt;_to_array();
            $data = $this-&gt;changeWithEncrypted($data);
            //pretty_print($data);

            if (!empty($data)) {
                if (!$this-&gt;_force_save_as_new &amp;&amp; !empty($data['id'])) {
                    // Prepare data to send only changed fields
                    foreach ($data as $field =&gt; $value) {
                        // Unset field from data if it hasn't been changed
                        if ($this-&gt;{$field} === $this-&gt;stored-&gt;{$field}) {
                            unset($data[$field]);
                        }
                    }

                    // if there are changes, check if we need to update the update timestamp
                    if (count($data) &amp;&amp; in_array($this-&gt;updated_field, $this-&gt;fields) &amp;&amp; !isset($data[$this-&gt;updated_field])) {
                        // update it now
                        $data[$this-&gt;updated_field] = $this-&gt;{$this-&gt;updated_field} = $timestamp;
                    }

                    // Only go ahead with save if there is still data
                    if (!empty($data)) {
                        // Update existing record
                        $this-&gt;db-&gt;where('id', $this-&gt;id);
                        $this-&gt;db-&gt;update($this-&gt;table, $data);

                        $trans_complete_label[] = 'update';
                    }

                    // Reset validated
                    $this-&gt;_validated = false;

                    $result[] = true;
                } else {
                    // Prepare data to send only populated fields
                    foreach ($data as $field =&gt; $value) {
                        // Unset field from data
                        if (!isset($value)) {
                            unset($data[$field]);
                        }
                    }

                    // Create new record
                    $this-&gt;db-&gt;insert($this-&gt;table, $data);

                    if (!$this-&gt;_force_save_as_new) {
                        // Assign new ID
                        $this-&gt;id = $this-&gt;db-&gt;insert_id();
                    }

                    $trans_complete_label[] = 'insert';

                    // Reset validated
                    $this-&gt;_validated = false;

                    $result[] = true;
                }
            }

            $this-&gt;_refresh_stored_values();

            // Check if a relationship is being saved
            if (!empty($object)) {
                // save recursively
                $this-&gt;_save_related_recursive($object, $related_field);

                $trans_complete_label[] = 'relationships';
            }

            if (!empty($trans_complete_label)) {
                $trans_complete_label = 'save (' . implode(', ', $trans_complete_label) . ')';
            } else {
                $trans_complete_label = '-nothing done-';
            }

            $this-&gt;_auto_trans_complete($trans_complete_label);

        }

        $this-&gt;_force_save_as_new = false;

        // If no failure was recorded, return TRUE
        return (!empty($result) &amp;&amp; !in_array(false, $result));
    }

    private function isEncryptedField($key)
    {
        if (false !== in_array($key, $this-&gt;encryptFields)) {
            return true;
        }

        return false;
    }

    private function changeWithEncrypted(array $array)
    {
        foreach ($array as $key =&gt; $value) {
            if ($this-&gt;isEncryptedField($key)) {
                if ($value !== '') {
                    $array[$key] = encodeField($value);
                } else {
                    $array[$key] = $value;
                }
            }
        }

        return $array;
    }

    private function _get_generated_timestamp()
    {
        // Get current timestamp
        $timestamp = ($this-&gt;local_time) ? date($this-&gt;timestamp_format) : gmdate($this-&gt;timestamp_format);

        // Check if unix timestamp
        return ($this-&gt;unix_timestamp) ? strtotime($timestamp) : $timestamp;
    }

}</code></pre>
<p>In above class, most of the code remains same for <code>_to_object()</code> and <code>save()</code> functions as in original data mapper class but I have modified few places so that I can put encryption for needed fields.</p>
<p>So in conclusion, we learned how we tapped onto the data mapper class and extended it for our needs of auto-encryption of told fields. If you happen to have similar requirement or you wanted to inject your own functionality to the data mapper, you can do that through the use of <code>_to_object()</code>  and <code>save()</code> functions of data mapper.</p>]]></description>
<link>https://codeinphp.github.io/post/extending-datamapper-for-codeigniter</link>
<pubDate>Sun, 19 Apr 2015 11:35:00 +0200</pubDate>
</item>
<item>
<title>JavaScript Best Practices</title>
<description><![CDATA[<p>JavaScript is not only amazing language but also very tricky language. To make correct use of it, you need to follow some best practices to avoid any problems that might come about otherwise. I share some of the best practices you really should be following when writing JavaScript code. Of course this is not an exhaustive list but at the most fundamental level, every programmer should know and adhere to it.</p>
<h2>1 -NEVER FORGET <code>VAR</code> KEYWORD</h2>
<p>Most of the developers know about this but yet I wanted to mention this because it may not be clear to some or newbies or people having other programming language background that come to JavaScript.</p>
<p>Consider the following piece of code:</p>
<pre><code>function myFunc(){
    var firstName = 'sarfraz';
    lastName = 'ahmed';
}</code></pre>
<p>It should be noted that in JS, variables have function-level scope which means a variable declared inside a function can not be accessed outside of it. So let’s test above two variables:</p>
<pre><code>myFunc();
console.log(lastName); // ahmed
console.log(firstName); // undefined</code></pre>
<p>As you will notice, we are still able to access <code>lastName</code> variable. The reason is that it does not have function-level scope because we forgot to put var keyword before it unlike <code>firstName</code> variable. Hence, <code>lastName</code> variable went into <strong>global</strong> scope and became part of <code>window</code> (while inside browser) object eg <code>window.lastName</code> will output the last name too.</p>
<p>It is therefore always required to put <code>var</code> keyword before variables so that they do not become part of global scope. It has following benefits:</p>
<ul>
<li>You save the memory and improve performance</li>
<li>You don’t pollute the global scope</li>
<li>You mistakenly don’t overwrite a global variable that might have the same variable name</li>
</ul>
<p>This is a very important concept and JS developers have always been finding solutions to avoid this problem. One of the most popular solution is <a href="http://chrisiona.com/learning-modern-javascript/the-singleton-pattern/">Singleton</a> or <a href="http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth">Module Pattern</a> you should check out. By the way, if you want to see other patterns also, take a look at:</p>
<p><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/">Essential JavaScript Design Patterns For Beginners</a></p>
<h2>2 – DECLARE VARIABLES ON TOP</h2>
<p>Another thing that should be followed is that variables should be declared on top of each function because of what is known as <strong>JavaScript Hoisting</strong>. Here is an example:</p>
<pre><code>var name = 'sarfraz';

(function(){
console.log(name); // undefined
     var name = 'nawaz';
     console.log(name); // nawaz
})();</code></pre>
<p>Notice that even though <code>name</code> variable is outside the scope of function but on the very first line it gives back <code>undefined</code> rather than actual name. The reason for this is that interpreter hoists or moves variables on top of the function, here is how interpreter sees or re-arranges it:</p>
<pre><code>var name = 'sarfraz';

(function(){
     var name;
     console.log(name); // undefined
     name = 'nawaz';
     console.log(name); // nawaz
})();</code></pre>
<p>As can be seen, <code>name</code> variable has been hoisted to top and declared there and also <code>var</code> keyword has been stripped from it where we assigned the value of <code>nawaz</code>.</p>
<p>The same is issue is not only with variables but also <strong>function declarations</strong> but NOT with <strong>function expressions</strong>. You can learn more about the difference between function declaration and function expression here:</p>
<p><a href="http://kangax.github.com/nfe/">Named Functions Demystified</a></p>
<p>The solution to this problem is to always declare <strong>variables and function declarations</strong> on top of container function:</p>
<pre><code>function myFunc(){
     var foo;
     var bar;
     var baz;

     // do something foo, bar, baz
}</code></pre>
<p>The preferred and recommended syntax though that you must follow is to declare all variables in one go by separating them with a comma:</p>
<pre><code>function myFunc(){
     var foo, bar, baz;

     // do something foo, bar, baz
}</code></pre>
<h2>3 – INITIALIZING MULTIPLE VARIABLES</h2>
<p>Declaring variables on top is good practice but not <em>multiple initialization</em>. Consider:</p>
<pre><code>function myFunc(){
    var lang = encoding = 'en';
}</code></pre>
<p>This is a very common mistake even amongst experienced JS developers where they think they have quickly assigned two variables same scope and same value. Though value for both <code>lang</code> and <code>encoding</code> variable is some but not the scope. Try it out:</p>
<pre><code>myFunc();
console.log(encoding); // en
console.log(lang); // undefined</code></pre>
<p>Here again, variable <code>encoding</code> has gone into global scope. Since <code>var</code> keyword is only appears before <code>lang</code> variable, that is the one which gets correct functional scope. In short, you should avoid that shorthand initialization unfortunately.</p>
<h2>4 – STARTING CURLY BRACE ON THE SAME LINE</h2>
<p>Consider the following code block where starting curly brace <code>{</code> is on a new line, this works fine in most situations:</p>
<pre><code>function myFunc()
{
    // some code
}</code></pre>
<p>However, same convention will not yield expected results if you happen to write:</p>
<pre><code>function myFunc()
{
     return
     {
         name: 'sarfraz'
     };
}

var f = myFunc();
console.log(f);</code></pre>
<p>The result will be <code>undefined</code> because behind the scenes, interpreter puts a semicolon <code>;</code> after the <code>return</code> keyword making it:</p>
<pre><code>function myFunc()
{
     return; // &lt;----------------
     {
         name: 'sarfraz'
     };
}</code></pre>
<p>To remedy such hard-to-debug issues, it is good practice to always put starting curly brace on the <strong>same line</strong>, this would work fine though:</p>
<pre><code>function myFunc() {
     return {
         name: 'sarfraz'
     };
}

var f = myFunc();
console.log(f.name); // sarfraz</code></pre>
<p>And that’s a reason why <a href="http://www.crockford.com/">Douglas Crockford</a> in his book “<a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript: The Good Parts</a>“, advocates this syntax for JS:</p>
<pre><code>function () {
     // some code
}

if (expression) {
     // do something
}</code></pre>
<p>Go ahead and check out <a href="http://javascript.crockford.com/code.html">JavaScript Coding Style</a> to learn more as well as naming conventions.</p>
<p>Notice that it is not the <code>return</code> keyword affected by automatic semi-colon insertion but all these too:</p>
<ul>
<li><strong>var</strong> statement</li>
<li><strong>empty</strong> statement</li>
<li><strong>expression</strong> statement</li>
<li><strong>do-while</strong> statement</li>
<li><strong>continue</strong> statement</li>
<li><strong>break</strong> statement</li>
<li><strong>throw</strong> statement</li>
</ul>
<p>Experienced JavaScript developers know pretty well about JavaScript’s <em>automatic semi-colon insertion problem</em> and avoid it. The benefit of above coding style however is that you avoid this problem without knowing that this problem exists just by following that coding style.</p>
<h2>5 – USE ARRAY LITERAL INSTEAD OF NEW ARRAY()</h2>
<p>There are two ways you can create arrays in JS:</p>
<pre><code>var arr1 = new Array(); // array constructor
var arr2 = []; // array literal</code></pre>
<p>Though both serve the purpose of creating arrays but there is important difference between the two.</p>
<p>In JS, even an array is an object. With first constructor method above, you are telling interpreter to call constructor of the <code>Array</code> and generate an object. The interpreter looks up into the execution context to find the constructor and once found, it calls it and creates the <code>Array</code> object. It seems that it has performance hit too as compared to latter array literal method. With the array literal method, interpreter just creates the array on run-time with no extra processing done.</p>
<p>Other than that, Array constructor is mis-guiding the way it handles its parameters. Consider:</p>
<pre><code>console.log(new Array(5)); // [,,,,]
console.log(new Array('5')); // ["5"]</code></pre>
<p>When one argument is passed to Array and that happens to be a number, a new array is returned with its length property equal to that number passed. The important thing to note here is that Array will be initialized from what number you specified to it, for example:</p>
<pre><code>// Array constructor
var arr = new Array(2);
console.log(arr.length); // 2
console.log(arr[0]); // undefined

// Array literal
var arr = [2];
console.log(arr.length); // 1
console.log(arr[0]); // 2</code></pre>
<p>So the conclusion is to always use array literal notation rather than Array constructor.</p>
<h2>6 – USE PROTOTYPE TO SHARE ACROSS</h2>
<p>The concept of prototypes or prototypal inheritance is rather confusing. I have seen people especially inexperienced JS developers adding class members to parent function which needs to be shared across child classes. Consider the following code:</p>
<pre><code>function Person(name){
    this.name = name;
}</code></pre>
<p>Now let’s assume we want to have child classes the ability to display the names some how, one of doing it is putting method directly inside <code>Person</code> class:</p>
<pre><code>function Person(name){
     this.name = name;

     this.display = function(){
         alert(this.name);
     }
}</code></pre>
<p>Other way is to use <code>prototype</code>:</p>
<pre><code>function Person(name){
     this.name = name;
}

Person.prototype.display = function(){
     alert(this.name);
}</code></pre>
<p>With both ways, all child classes will be able to use the display method but there is important difference between the two. When you attach any methods or properties via <code>this</code> (first way above) to a class then all instances of inheriting child classes will also have these properties or methods within them or their signature. On the other hand, when you use <code>prototype</code> to add members (properties and methods) to parent class, children classes will still inherit all members but it won’t be present inside their own functionality or signature, rather they will be borrowing that functionality from their parent class thereby saving memory. For this reason, later approach seems good to follow in most situations.</p>
<h2>7 – PUT COMMA BEFORE PROPERTIES</h2>
<p>When working with objects or arrays, it is always a good idea to put a comma before the variable or object property eg:</p>
<pre><code>// jQuery - create a new div with some css
$('&lt;div&gt;').attr({
   "id"       : "myId"
 , "class" : "myClass"
 , "class" : "myClass"
 , "color" : "green"
 , "fontWeight" : "bold"
});</code></pre>
<p>In this way, we never add an extra comma or forget one from the last property. The reason why this is good practice is that, in IE, with extra comma at the last property, we do not get expected results sometimes (<strong>ExtJS</strong> developers must have learned this). I do the same with multiple variable declarations or arguments of function. It also makes the code look pretty too as far as I see it.</p>
<h2>8 – DON’T MIX JS AND HTML</h2>
<p>One of the most important best practices is to always <em>separate JS code from HTML</em> and go <a href="http://en.wikipedia.org/wiki/Unobtrusive_JavaScript">unobtrusive</a>. One would often see code like this:</p>
<pre><code>&lt;a href="#" onclick="doSomething()"&gt;Some Action&lt;/a&gt;
&lt;input type="button" onclick="doSomething()" value="Do Something" /&gt;
&lt;form onsubmit="doSomething();"&gt;...</code></pre>
<p>That’s a very bad practice in that it is hard to manage and maintain. HTML and JS should not be mixed ever. You could do the same thing like this:</p>
<pre><code>&lt;a href="#" id="link"&gt;Some Action&lt;/a&gt;
&lt;input type="button" id="button" value="Do Something" /&gt;
&lt;form id="frm"&gt;...

&lt;script type="text/javascript"&gt;
var link = document.getElementById('link'),
 btn = document.getElementById('button'),
 frm = document.getElementById('link');

link.onclick = function(){
 // do something
};

btn.onclick = function(){
 // do something
};

frm.onsubmit = function(){
 // validate form
};     
&lt;/script&gt;</code></pre>
<p>This way it becomes easy to manage, maintain or enhance both HTML and JavaScript.</p>
<h2>9 – PUT SCRIPTS AT BOTTOM</h2>
<p>Normally scripts are put in <code>&lt;head&gt;&lt;/head&gt;</code> tags but this should be avoided. The reason for this is that browser loads your scripts sequentially and by the time they are loading, nothing else is done and website load times slow down (or at least that’s how visitors will perceive it) and you see actual output only after those scripts have been loaded by the browser.</p>
<p>The best practice is that scripts should be put on bottom of page just before closing body tag eg <code>&lt;/body&gt;</code>. This way browser will instantly display page and page load time will be better for users who view that page.</p>
<p>By the way, always put CSS on top in <code>&lt;head&gt;&lt;/head&gt;</code> tags because that’s something browser reads first and renders page’s layout accordingly.</p>
<p>Read more about this at famous <a href="http://developer.yahoo.com/performance/rules.html">Yahoo’s performance article</a>.</p>
<p>I would also suggest you to use Yahoo’s <a href="http://developer.yahoo.com/yslow/">YSlow</a> or Google’s <a href="http://code.google.com/speed/page-speed/">PageSpeed</a> add-on (add-ons of <a href="http://getfirebug.com/">Firebug</a>) which suggest you a lot of things on how to improve the performance of the page.</p>
<h2>10 – NEVER FORGET SEMI-COLON</h2>
<p>Always end statements and function expressions with a semi-colon:</p>
<pre><code>var name = 'some name'; // &lt;-------------

var myFunc = function(){
// some doe

}; // &lt;------------</code></pre>
<p>This is useful when you want to compress the code (for faster load times). If at any place, semi-colon isn’t present, you won’t be able to compress the code or wouldn’t get expected results most likely code-wise. You should always, always use semi-colons.</p>
<h2>BONUS</h2>
<p>The good news is that you can solve most of above problems by using <a href="http://www.jshint.com/">JSHint</a> or <a href="http://jslint.com/">JSLint</a> code quality tool. It will tell you about best-practices and any errors that might exist in your code. Having said that, it is good to improve your JS skills and avoid the need to go to such tools.</p>]]></description>
<link>https://codeinphp.github.io/post/javascript-best-practices</link>
<pubDate>Sun, 19 Apr 2015 10:00:00 +0200</pubDate>
</item>
<item>
<title>Exploring Lambda Functions and Closures in PHP</title>
<description><![CDATA[<h1>What is a Lambda Function</h1>
<p>A lambda function (also known as <strong>anonymous function</strong>) is a function that has:</p>
<ol>
<li>No Name</li>
<li>Can be assigned to a variable</li>
<li>Can be passed as argument to other functions or methods of a class</li>
</ol>
<p>In the past, this was possible with <a href="http://php.net/manual/en/function.create-function.php"><code>create_function</code></a> like:</p>
<pre><code>$multiply = create_function('$a, $b','return $a * $b;');
echo $multiply(5, 5); // 25</code></pre>
<p>But it was a nuisance if you needed to write longer anonymous functions using <code>create_function</code> because it was difficult to write function body that way inside quotes and then escaping quotes and stuff...</p>
<p>PHP 5.3 introduced true support of lambda/anonymous functions similar to how you see in Javascript, so you could write above code like:</p>
<pre><code>$multiply = function ($a, $b) {
    return $a * $b;
};

echo $multiply(5, 5); // 25</code></pre>
<p>As can be seen, above anonymous function has no name and has been assigned to variable  <code>$multiply</code>. You can also pass it other functions:</p>
<pre><code>function countEmails($number) {
    echo 'you have ' . $number . ' emails!';
}

$multiply = function ($a, $b) {
    return $a * $b;
};

echo countEmails($multiply(2, 5)); // you have 10 emails!</code></pre>
<p>You could have also written above like this if you wanted:</p>
<pre><code>function countEmails($multiply, $a, $b) {
    echo 'you have ' . $multiply($a, $b) . ' emails!';
}

$multiply = function ($a, $b) {
    return $a * $b;
};

echo countEmails($multiply, 2, 5); // you have 10 emails!</code></pre>
<p>And even like this:</p>
<pre><code>function countEmails($multiply, $a, $b) {
    echo 'you have ' . $multiply($a, $b) . ' emails!';
}

echo countEmails(function ($a, $b) {
    return $a * $b;
}, 2, 5); // you have 10 emails!</code></pre>
<p>You can also assign it to array:</p>
<pre><code>$array['multiply'] = function ($a, $b) {
     return $a * $b;
};

echo $array['multiply'](2, 10); // 20</code></pre>
<p>And even an object:</p>
<pre><code>$obj = new StdClass();

$obj-&gt;multiply = function ($a, $b) {
     return $a * $b;
};</code></pre>
<p>But caveat here is that instead of calling it like <code>echo $obj-&gt;multiply(2, 10)</code>, you would instead need to do:</p>
<pre><code>$multiply = $obj-&gt;multiply;
echo $multiply(2, 10); // 20</code></pre>
<p>Now let's create little program which says <code>Hello, World</code> using anonymous function:</p>
<pre><code>$message = 'Hello, World!';

$sayHello = function () {
    echo $message;
};

$sayHello();</code></pre>
<p>Oops, it results in error:</p>
<p><code>Notice: Undefined variable: message</code></p>
<p>It means anonymous function does not have access to <code>$message</code> inside it. This is exactly when we need a closure to have access to that <code>$message</code> variable.</p>
<h1>What is a Closure</h1>
<p>A closure is a lambda/anonymous function that is aware of its surrounding context through the use of <code>use</code> keyword. It can access a variable outside of the scope where it is defined. Consider last <code>$sayHello</code> anonymous function and we convert it into closure through the use of <code>use</code> keyword and gain access to the <code>$message</code> variable:</p>
<pre><code>$message = 'Hello, World!';

$sayHello = function () use ($message) {
    echo $message;
};

$sayHello(); // Hello, World!</code></pre>
<p>Thanks to closure (<code>use</code> keyword), we are now able to access <code>$message</code> variable!</p>
<hr />
<p>If you need to change the value of passed outside variable, you need to use reference of course:</p>
<pre><code>$message = 'Hello, World!';

$sayHello = function () use (&amp;$message) {
    echo $message;
    $message = 'Hello World Again!';
};

$sayHello(); // Hello, World!
$sayHello(); // Hello World Again!</code></pre>
<p>You can also pass regular arguments to closure:</p>
<pre><code>$message = 'World!';

$sayHello = function ($arg) use ($message) {
    echo $arg . ' ' . $message;
};

$sayHello('Hello'); // Hello, World!</code></pre>
<p>You can also create a recursive function using closure easily, here is example of how you can create a factorial function:</p>
<pre><code>$factorial = function( $n ) use ( &amp;$factorial ) {
    if( $n == 1 ) return 1;
    return $factorial( $n - 1 ) * $n;
};

echo $factorial( 5 );</code></pre>
<p>Notice that <code>$factorial</code> is passed by reference using <code>&amp;</code> otherwise it won't work.</p>
<hr />
<p>The difference between an anonymous function and closure is that closure has ability to access a variable outside of its scope by using the <code>use</code> keyword. So that is the subtle difference between an anonymous function and a closure. In fact, both are of them are instances of <code>Closure</code> class internally:</p>
<pre><code>// anonymous function
$multiply = function ($a, $b) {
    return $a * $b;
};

$message = 'Hello, World';

// closure
$sayHello = function () use ($message) {
    echo $message;
};

var_dump ($multiply instanceof Closure); // true
var_dump ($sayHello instanceof Closure); // true</code></pre>
<h1>Type Hinting</h1>
<p>We know that you can already type hint few things:</p>
<ul>
<li>Object</li>
<li>Array</li>
<li>Interface</li>
<li>callable</li>
</ul>
<p>But you can also type hint <code>Closure</code> as shown below:</p>
<pre><code>function multiply($number, Closure $closure)
{
    return $closure($number);
}

$closure = function($x){ return $x * 2; };
echo multiply(10, $closure);</code></pre>
<p>Here we have made <code>multiply</code> function to require type of <code>Closure</code> as second parameter.</p>
<h1>Use Cases</h1>
<p>Anonymous functions and closures can be used in variety of situations.</p>
<p><strong>As Callbacks</strong></p>
<p>You can use them in your custom functions as callback or some of the PHP's built-in functions such as <code>array_map()</code>, <code>array_reduce()</code>, <code>array_filter()</code>, <code>array_walk()</code>, etc. Let's take example of <code>array_walk()</code>. If you <a href="http://php.net/manual/en/function.array-walk.php">look at it's definition</a>, here is how it looks:</p>
<pre><code>bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )</code></pre>
<p>Notice the second parameter <code>callable $callback</code>. It means it expects something to be callable function. Anytime you see such parameter in some function definition, it means you can apply anonymous functions to it. Here is example:</p>
<pre><code>$myArray = array(1, 2, 3, 4, 5);

// multiply each array value with 2    
array_walk($myArray, function(&amp;$value, $index){
    $value *= 2;
});

print_r($myArray);

Array
(
    [0] =&gt; 2
    [1] =&gt; 4
    [2] =&gt; 6
    [3] =&gt; 8
    [4] =&gt; 10
)</code></pre>
<hr />
<p><strong>In Routing</strong></p>
<p>You might have seen closures being used in routing in framework like Laravel, Slim, Silex, etc:</p>
<pre><code>$app = new \Slim\Slim($options);

$app-&gt;get('/', function () use ($app) {
    $app-&gt;render('home', array('content' =&gt; 'Hello, World!!!'));
});</code></pre>
<p>Here <code>$app</code> is imported from outside scope into the scope of closure so that it can be used to render the view <code>$app-&gt;render(...)</code></p>
<hr />
<p><strong>Accessing Private Members of a Class</strong></p>
<p>We can use <a href="http://www.php.net/manual/en/closure.bind.php"><code>bind()</code></a> or <a href="http://www.php.net/manual/en/closure.bindto.php"><code>bindTo</code></a> methods of <code>Closure</code> class to access <code>private</code> data of some class, for example:</p>
<pre><code>class MyClass {
    private $variable = 'I am private variable!';
}

$closure = function() {
    return $this-&gt;variable;
};

$result = Closure::bind($closure, new MyClass(), 'MyClass');
echo $result(); // I am private variable!</code></pre>
<p>There you see, we were able to get value of private variable <code>$variable</code>.</p>
<p>Similarly, it is also possible to <strong>add new behaviour to a class without actuallly modifying it direclty</strong>. Pretty cool hun ?</p>
<hr />
<p><strong>Lazy-loading a Class</strong></p>
<p>Another <code>^cool^</code> thing you can do with closure is to lazy-load a class. For example:</p>
<pre><code>class MyClass {
    public function __construct() {
        echo 'I am initialized!';
    }
}

$getMyClass = function() {
    $myClass = new MyClass();
    return $myClass;
};</code></pre>
<p>If you run above code, you might expect to see <code>I am initialized!</code> message because one might think we are creating an instance of <code>MyClass</code>. That's not true though, because code inside <code>$getMyClass</code> anonymous function is not run until you actually call it:</p>
<pre><code>$myClass = $getMyClass();</code></pre>
<p>And now you would see the message <code>I am initialized!</code>. So this is pretty neat trick to defer some piece of code and use it only when you need it.</p>]]></description>
<link>https://codeinphp.github.io/post/exploring-lambda-functions-and-closures-in-php</link>
<pubDate>Sat, 18 Apr 2015 23:57:00 +0200</pubDate>
</item>
<item>
<title>Learning Javascript</title>
<description><![CDATA[<p>JavaScript is <a href="http://en.wikipedia.org/wiki/JavaScript">cross-platform</a>, cross-browser language; javascript is everywhere; web, <a href="http://en.wikipedia.org/wiki/Rich_Internet_application">RIA</a> (rich internet applications), <a href="http://sixrevisions.com/javascript/mobile%C2%A0web-development-frameworks/">mobile, tablets</a>, <a href="https://github.com/mrdoob/three.js/">animations</a> and even on server with the advent of <a href="http://nodejs.org/">node.js</a>. Javascript is the language of the future.</p>
<p>I started off with jQuery without knowing anything much about javascript because by the time I didn’t find any reason to learn it due to fact that  javascript libraries did everything we needed putting complexities out of the way. Today I realize that I chose the wrong path, a good understanding of javascript language is crucial if you look at the reasons I have mentioned in the very beginning but it is never too late to start again, that’s exactly what I have decided, learning javascript seriously. I am not the only one who has started realizing the power and future of javascript, there are <a href="http://shiflett.org/blog/2012/feb/learning-javascript">giants</a> who have started learning it too. If you are also javascript-library-only developer, or even <strong>copy-paster</strong> programmer, <a href="http://phpadvent.org/2009/you-really-need-to-learn-javascript-by-ed-finkler">you should really</a> <a href="http://net.tutsplus.com/tutorials/javascript-ajax/from-jquery-to-javascript-a-reference/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:%20nettuts%20%28Nettuts%2b%29">learn javascript</a> seriously !</p>
<p>Despite design flaws and bad reputation of the language <a href="http://javascript.crockford.com/javascript.html">as they say</a> and probably rightly so, javascript is popular and language of the choice for those who have gone into deeper <a href="http://ejohn.org/">understating</a> <a href="http://sstephenson.us/">of</a> <a href="http://infrequently.org/about-me/">it</a>. Javascript language <a href="http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/">does</a> <a href="http://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/">have</a> <a href="http://www.svennerberg.com/2009/02/global-variables-in-javascript/">bad</a> <a href="http://lucumr.pocoo.org/2011/2/6/automatic-semicolon-insertion/">parts</a> but its <a href="http://www.amazon.com/dp/0596517742/?tag=stackoverfl08-20">good parts</a> over-weigh its bad parts and there is always room to avoid bad parts if you know the language right and use it effectively.</p>
<p>Javascript turns out to be extremely <a href="http://bonsaiden.github.com/JavaScript-Garden/">tricky</a> language, consider:</p>
<pre><code>// Comparison
'' == '0';    //false
0 == '';    // true
0 =='0';    // true

// Type checking
typeof null;    // object

// Scope
function myFunc() {
  return
  {
    name: 'sarfraz'
  };
}

var f = myFunc();
console.log(f);    // undefined</code></pre>
<p>I did <strong>a lot of research</strong> to find best javascript learning resources. On the journey of my exploration, I came across some of the great resources with a lot of reviews and user feedback. By now, if you made your mind to take javascript seriously, here are the best resources out there you should check out.</p>
<h2>Books</h2>
<ul>
<li><a href="http://shop.oreilly.com/product/9780596517748.do">JavaScript: The Good Parts</a> by <a href="http://crockford.com/">Douglas Crockford</a></li>
<li><a href="http://jsninja.com/">Secrets of the JavaScript Ninja</a> by <a href="http://ejohn.org/">John Resig</a></li>
<li><a href="http://jspro.org/">Pro JavaScript Techniques</a> by <a href="http://ejohn.org/">John Resig</a></li>
<li><a href="http://www.amazon.com/Performance-JavaScript-Faster-Application-Interfaces/dp/059680279X">High Performance JavaScript</a> by <a href="http://www.nczonline.net/blog/about/">Nicholas C. Zaka</a></li>
<li><a href="http://www.amazon.com/gp/product/B004XQX4K0/ref=pd_lpo_k2_dp_sr_3?pf_rd_p=486539851&amp;pf_rd_s=lpo-top-stripe-1&amp;pf_rd_t=201&amp;pf_rd_i=0596805527&amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_r=1GJCJ4PSFS8516NGDG28">JavaScript: The Definitive Guide</a> by <a href="http://www.davidflanagan.com/">David Flanagan</a></li>
</ul>
<h2>Online</h2>
<ul>
<li><a href="http://eloquentjavascript.net/">Eloquent JavaScript</a> by Marijn Haverbeke</li>
<li><a href="http://javascript.info/">The JavaScript Tutorial</a></li>
<li><a href="https://developer.mozilla.org/en/JavaScript/Guide">JavaScript Guide MDN</a></li>
<li><a href="http://bonsaiden.github.com/JavaScript-Garden/">JavaScript Garden</a> (For intermediate &amp; advanced programmers – must read !)</li>
</ul>
<h2>Videos</h2>
<ul>
<li><a href="http://learn.appendto.com/">appendto.com</a></li>
<li><a href="http://yuiblog.com/crockford/">Douglas Crockford’s JavaScript Video Series</a></li>
<li><a href="http://www.youtube.com/watch?v=hQVTIJBZook">JavaScript: The Good Parts</a></li>
</ul>
<h2>Blogs to Subscribe</h2>
<ul>
<li><a href="http://perfectionkills.com/">PerfectionKills</a></li>
<li><a href="http://dmitrysoshnikov.com/">Dmitry A. Soshnikov</a></li>
<li><a href="http://javascriptweblog.wordpress.com/">JavaScript, JavaScript</a></li>
<li><a href="http://www.adequatelygood.com/">Adequately Good</a></li>
<li><a href="http://ejohn.org/">John Resig</a></li>
<li><a href="http://www.2ality.com/">2ality</a></li>
<li><a href="http://nemisj.com/">Notes of Maks Nemisj</a></li>
<li><a href="http://addyosmani.com/blog/">Addy Osmani</a></li>
<li>Bonus: <a href="http://net.tutsplus.com/articles/web-roundups/30-developers-you-must-subscribe-to-as-a-javascript-junkie/">33 Developers you MUST Subscribe to as a JavaScript Junkie</a></li>
</ul>
<h2>Tools</h2>
<ul>
<li><a href="http://gruntjs.com/">Grunt</a> (The JavaScript Task Runner)</li>
<li><a href="http://www.jshint.com/">JSHint</a> (JS Code Quality Tool)</li>
<li><a href="http://jsperf.com/">JSPerf</a> (JS Performance Testing)</li>
<li><a href="http://www.jsunit.net/">JSUnit</a> (JS Unit Testing)</li>
<li><a href="http://siliconforks.com/jscoverage/">JSCoverage</a> (JS Code Coverage)</li>
<li><a href="http://code.google.com/p/jsdoc-toolkit/">JDDoc-Toolkit</a> (JS Documentation Tool)</li>
<li>Bonus: <a href="http://coding.smashingmagazine.com/2009/02/08/50-extremely-useful-javascript-tools/">50 Useful JavaScript Tools</a></li>
</ul>]]></description>
<link>https://codeinphp.github.io/post/learning-javascript</link>
<pubDate>Sat, 18 Apr 2015 20:35:00 +0200</pubDate>
</item>
<item>
<title>Abstract Class vs Interface</title>
<description><![CDATA[<p>I found this picture that tells the difference between <code>abstract class</code> and <code>interface</code>:</p>
<p><img src="https://codeinphp.github.io/images/142937584655328b66dcedc.png" alt="enter image description here" /></p>
<hr />
<p>Let's see each comparison practically so we know what it means.</p>
<pre>
Interface support multiple inheritance | Abstract class does not support multiple inheritance
</pre>
<p>It means you can extend an <code>interface</code> with one or more (hence <em>multiple inheritance</em>) interfaces like:</p>
<pre><code>interface Interface_A { }
interface Interface_B { }
interface Interface_C { }

interface MyInterface extends Interface_A, Interface_B, Interface_C { }</code></pre>
<p>As can be seen, we are extending <code>MyInterface</code> with three other interfaces <code>Interface_A</code>, <code>Interface_A</code> and <code>Interface_C</code>.</p>
<p>Let's now try to extend an <code>abstract class</code>:</p>
<pre><code>class Class_A { }

abstract class MyAbstractClass extends Class_A { }</code></pre>
<p>No problem there, you CAN extend an abstract class with exactly one class but if you try to add one more:</p>
<pre><code>class Class_A { }
class Class_B { }

abstract class MyAbstractClass extends Class_A, Class_B { }</code></pre>
<p>This time PHP would give you strange error without telling you what you are doing wrong:</p>
<p><code>Parse error: syntax error, unexpected ',', expecting '{'</code></p>
<p>I wish PHP would have given message somewhat like (hope PHP gives smarter error messages in future versions):</p>
<p><code>Fatal Error: You cannot extend an abstract class with more than one classes</code></p>
<hr />
<pre>
Interface does'n Contains Data Member | Abstract class contains Data Member
</pre>
<p>By data members, it means class properties or variables. So you cannot add data members to an interface:</p>
<pre><code>interface MyInterface {
    public $foo = null;
}</code></pre>
<p>So in an interface, only method stubs can be provided.</p>
<p>You can add data members to an abstract class though, this is valid code of course:</p>
<pre><code>abstract class MyAbstractClass {
    public $foo = null;
}</code></pre>
<hr />
<pre>
Interface does'n contains Constructors | Abstract class contains Constructors
</pre>
<p>It sounds like this point applies to may be other languages but in PHP an interface CAN have an empty constructor shell:</p>
<pre><code>interface MyInterface {
    public function __construct();
}</code></pre>
<p>Like other languages, PHP shouldn't have allowed having a constructor inside an interface. But anyways, it doesn't make much sense here and should be avoided anyway.</p>
<p>On the other hand, an abstract class can contain constructor method:</p>
<pre><code>abstract class MyAbstractClass {
    abstract public function __construct();
}</code></pre>
<p>Here constructor is said to be <code>abstract</code> and therefore expends child classes to complement for it. However, you can also have common initialization code in constructor of an abstract class too in which case, you would need to remove the <code>abstract</code> keyword and provide the body for it:</p>
<pre><code>abstract class MyAbstractClass {
    public function __construct() {
         // initialization code
    };
}</code></pre>
<hr />
<pre>
An interface Contains only incomplete member (signature of member) | An abstract class Contains both incomplete (abstract) and complete member
</pre>
<p>This simply means an interface can only contain method stubs not their implementation. This is pretty same as second point in the image above. This is why in methods of an interface, they don't have bodies marked with <code>{ }</code> braces. So an interface is completely empty shell that enforces some rules that child classes must implement and that's it.</p>
<p>Abstract classes can have both; empty method definitions as well as full method implementation. Generally empty method stubs are prefixed with <code>abstract</code> keyword so that child classes must provide their implementation details. But an abstract class can also contain full method implementation inside it which are generally used for common piece of functionality that each child class may need. For example:</p>
<pre><code>abstract class Animal {
    // child classes must implement this
    abstract function prey();

    public function run() {
        echo 'I am running!';
    }
}

class Dog extends Animal {
    public function prey() {
        echo 'I killed the cat !';
    }
}

class Cat extends Animal {
    public function prey() {
        echo 'I killed the rat !';
    }
}

$dog = new Dog();
$cat = new Cat();

$dog-&gt;prey(); // I killed the cat !
$cat-&gt;prey(); // I killed the rat !

$dog-&gt;run(); // I am running!
$cat-&gt;run(); // I am running!</code></pre>
<p>In above code, we can see that <code>Animal</code> class has one <code>abstract</code> method called <code>prey</code> because each child class (animal) have their own ways of finding prey and a full implemented method called <code>run</code> because all animals can run, this doesn't need to be defined in each of child classes. So here <code>run</code> method is fully implemented and represents common data that needs to be shared across child classes.</p>
<p>Notice that other than common fully implemented methods inside an abstract class, you can also have common data members eg variables that need to be shared across child classes.</p>
<hr />
<pre>
An interface cannot have access modifiers by default everything is assumed as public | An abstract class can contain access modifiers for the subs, functions, properties
</pre>
<p>By access modifiers, we mean ability to change scoping by using keywords like <a href="http://stackoverflow.com/questions/4361553/php-public-private-protected"><code>public</code>, <code>private</code> and <code>protected</code></a>. We cannot use these for interfaces but we can use them for everything in abstract classes.</p>
<hr />
<pre>
Members of interface can not be Static | Only Complete Member of abstract class can be Static
</pre>
<p>This is again possible in PHP (as of now with PHP 5.4) unlike other languages, so you CAN do:</p>
<pre><code>interface MyInterface {
    static function foo();
}</code></pre>
<p>Notice the addition of keyword <code>static</code> to mark it as static method.</p>
<p>For abstract class, you can have static members as well as those methods that are implemented in the abstract class:</p>
<pre><code>abstract class MyAbstractClass {
    public static $foo = null;

    public static function foo() {}
}</code></pre>
<p>But you cannot have a method to be both <code>static</code> and <code>abstract</code>, so you cannot do this, which is common across the languages:</p>
<pre><code>abstract class MyAbstractClass {
    public static $foo = null;

    abstract static function foo() {} // error
}</code></pre>
<hr />
<p>In conclusion, interface and abstract classes are completely different from each other, you cannot interchange them or use one as alternative over the other. Interfaces are completely empty shells that expect child classes to implement everything for them. On the other hand, abstract class can not only contain <em>common piece of information</em> by implementing inside them but also expect child classes to fill in the remaining gaps.</p>]]></description>
<link>https://codeinphp.github.io/post/abstract-class-vs-interface</link>
<pubDate>Sat, 18 Apr 2015 20:26:00 +0200</pubDate>
</item>
<item>
<title>PHPExecute – PHP Code Runner</title>
<description><![CDATA[<p>Often times, you quickly need to test some PHP code. To do so, you create a file, put it in web root folder, write some code in it, open its URL and then you see its output. This is kind of lot of work and I often need a way to quickly test my PHP code. This requirement made me create my own code testing tool, <strong>PHPExecute</strong>.</p>
<p>PHPExecute is the fastest way to test PHP code. You write the code, hit the execute button, an ajax request is triggered and you see the output fast without page refresh. Here are some of the cool things about it:</p>
<ul>
<li>Very fast way to test your code</li>
<li>Nice friendly interface</li>
<li>Code  Highlighting</li>
<li>Useful PHP, system information panel</li>
<li>Saving favorite code snippets</li>
<li>Adding useful classes</li>
<li>Easy to extend as per your needs</li>
</ul>
<p><strong>Screenshot</strong></p>
<p><img src="https://codeinphp.github.io/images/1428864689552abeb12a929.gif" alt="enter image description here" /></p>
<h2>Extending PHPExecute</h2>
<p>The good thing is that you can download (see below) it, see its source code and extend it however you like according to your needs. For example, you can add classes for testing, performance or any other purpose. One can even integrate bash commands (I am not going into details of that) to make it even more useful tool to work with.</p>
<h2>Usage Notes</h2>
<ul>
<li>
<p>PHPExecute uses <a href="http://php.net/manual/en/function.eval.php"><code>eval</code></a> function to run the code. It is strongly recommended that you should use that tool for local testing only and not on production server due to security reasons. If you do, you use it on your own risk.</p>
</li>
<li>
<p>In order to save snippets, PHPExecute uses <a href="http://en.wikipedia.org/wiki/Web_Storage">localStorage</a> feature which is available in latest browsers (and IE9+) only and also it can be around <strong>5MB</strong> in size. This isn’t that ideal if you are going to save a lot of snippets but you can always extend PHPExecute to add database support and save your snippets there.</p>
</li>
<li>The custom functions that can be used in PHPExecute can be found in <strong>includes/functions.php</strong> file. You can add any functions in that file that you want to use directly inside PHPExecute. The custom functions can also be seen in <strong>PHP Info &gt; User Defined Functions</strong>.</li>
</ul>
<hr />
<p><strong>Download</strong></p>
<p><a href="https://github.com/sarfraznawaz2005/PHPExecute">Download PHPExecute at Github</a></p>
<p>I hope PHPExecute turns out to be a useful tool for you. Please do share if you add anything to it via comments so that we could know it and integrate ourselves too :)</p>]]></description>
<link>https://codeinphp.github.io/post/phpexecute-php-code-runner</link>
<pubDate>Sun, 12 Apr 2015 20:57:00 +0200</pubDate>
</item>
<item>
<title>Outputting PHP To Browser Console</title>
<description><![CDATA[<p>Although there exist <strong>classes</strong> for outputting PHP to browser console such as Google’s <strong>PHP Console</strong> and certain others, I was looking for a way to output PHP to browser console without including those classes in my PHP files or installing any browser plugin to do the same. Currently, I am working on Facebook application development in which you have to commit/upload the code to check certain output out of PHP unlike offline development where you check the code output before committing it up. This makes Facebook application development a longer process for a developer but you got to live with it because you don’t have a choice.</p>
<p>Anyways, to speed up the code output checking process a little and rather using <code>debug_backtrace</code>, <code>print_r</code>, <code>print</code>, <code>echo</code>, <code>var_dump</code>, etc which you need to remove/comment again, I created a function to get output of PHP on the browser console. One could use <code>error_log</code> function but even that makes you go to your log file and then see the output. Of course, browser needs to support/have the console so that code result is output there. Because IE less than 8 doesn't have console, this won’t work in IE less than 8, though result won’t be affected in it. Notice that you can see console in IE=&gt;8 by pressing <kbd>F12</kbd> key and then going to <strong>Script</strong> tab where you need to make sure <strong>Console</strong> tab is selected on the right side.</p>
<p>Here is the function:</p>
<pre><code> /**
 * Logs messages/variables/data to browser console from within php
 *
 * @param $name: message to be shown for optional data/vars
 * @param $data: variable (scalar/mixed) arrays/objects, etc to be logged
 * @param $jsEval: whether to apply JS eval() to arrays/objects
 *
 * @return none
 * @author Sarfraz
 */
 function logConsole($name, $data = NULL, $jsEval = FALSE)
 {
      if (! $name) return false;

      $isevaled = false;
      $type = ($data || gettype($data)) ? 'Type: ' . gettype($data) : '';

      if ($jsEval &amp;&amp; (is_array($data) || is_object($data)))
      {
           $data = 'eval(' . preg_replace('#[\s\r\n\t\0\x0B]+#', '', json_encode($data)) . ')';
           $isevaled = true;
      }
      else
      {
           $data = json_encode($data);
      }

      # sanitalize
      $data = $data ? $data : '';
      $search_array = array("#'#", '#""#', "#''#", "#\n#", "#\r\n#");
      $replace_array = array('"', '', '', '\\n', '\\n');
      $data = preg_replace($search_array,  $replace_array, $data);
      $data = ltrim(rtrim($data, '"'), '"');
      $data = $isevaled ? $data : ($data[0] === "'") ? $data : "'" . $data . "'";

$js = &lt;&lt;&lt;JSCODE
\n&lt;script&gt;
 // fallback - to deal with IE (or browsers that don't have console)
 if (! window.console) console = {};
 console.log = console.log || function(name, data){};
 // end of fallback

 console.log('$name');
 console.log('------------------------------------------');
 console.log('$type');
 console.log($data);
 console.log('\\n');
&lt;/script&gt;
JSCODE;

      echo $js;
 } # end logConsole</code></pre>
<p>Here is an example of how to use it:</p>
<pre><code>$name = 'sarfraz';
$fruits = array("banana", "apple", "strawberry", "pineaple");

$user = new stdClass;
$user-&gt;name = "Sarfraz";
$user-&gt;desig = "Sr. Software Engineer";
$user-&gt;lang = "PHP";

logConsole('$name var', $name, true);
logConsole('An array of fruits', $fruits, true);
logConsole('$user object', $user, true);</code></pre>
<p>It would result in:</p>
<p><img src="https://codeinphp.github.io/images/1428862620552ab69c5381f.gif" alt="enter image description here" /></p>
<p>Although this does not prevent committing code first to see the code output if you are on facebook application development but it defintely does save some time. I have been using this function successfully so far, please let me know your ideas if any on how to improve this piece of code further. </p>]]></description>
<link>https://codeinphp.github.io/post/outputting-php-to-browser-console</link>
<pubDate>Sun, 12 Apr 2015 20:23:00 +0200</pubDate>
</item>
<item>
<title>My Local Development Workflow with WAMP/XAMPP, GIT and Google Drive</title>
<description><![CDATA[<p>I like to share my local development workflow which has turned out to be <strong>extremely useful</strong> in that all my projects’ files are <strong>version-ed and on the cloud</strong>. I use <strong>git</strong> to keep my files versioned and <strong>Google Drive</strong> so that I can access my projects anywhere. In this post, I will share really cool stuff that you definitely should consider implementing for your own projects.</p>
<p>If you don’t know about git and its benefits, there are numerous compelling reasons why it is useful, you might want to check out:</p>
<ul>
<li><a href="http://learn.github.com/p/intro.html">Introduction To Git</a></li>
<li><a href="http://www.gitology.com/chapter/benefits-of-using-git">The Benefits of Using Git</a></li>
<li><a href="http://coding.smashingmagazine.com/2011/07/26/modern-version-control-with-git-series/">Modern Version Control With Git</a></li>
<li><a href="http://whygitisbetterthanx.com/#svn">whygitisbetterthanx.com</a></li>
</ul>
<p>The benefits of keeping all my files and projects on the cloud like Google Drive should be obvious but if you are still not sure, check out:</p>
<ul>
<li><a href="http://www.salesforce.com/uk/socialsuccess/cloud-computing/why-move-to-cloud-10-benefits-cloud-computing.jsp">Why Move to the Cloud? 10 Benefits of Cloud Computing</a></li>
<li><a href="http://www.go-oodles.com/index.php/2012/08/the-six-key-business-benefits-of-google-drive/">The Six Key Business Benefits of Google Drive</a></li>
</ul>
<p>Although there are many other cloud storage services such as <a href="https://skydrive.live.com/">Microsoft SkyDrive</a>, <a href="https://www.dropbox.com/">Dropbox</a>, <a href="https://www.box.com/">Box</a>, <a href="http://www.bitcasa.com/">Bitcasa</a>, etc but I chose Google Drive since it gives 10GB of free space which should be enough for my development needs. If that’s not enough for you, you can create another Gmail account and get another 10GB free. You might want to read their usage policies too if you want.  You may also consider using Bitcasa which gives you unlimited space but since it is new, I can’t personally trust it as yet.</p>
<h2>Installing Google Drive</h2>
<p><strong>Step 1:</strong> <a href="https://mail.google.com/">Create a new Gmail account</a> to be used with Google Drive client software. Although you can use your existing account but it is good idea to create a new one used for your projects’ backup only.</p>
<p><strong>Step 2:</strong> Download Google Drive from <a href="https://tools.google.com/dlpage/drive">here</a> or <a href="http://filehippo.com/download_google_drive/">here</a>. During the installation, you would be asked to specify the folder path which will be synchronized with Google Drive. Make sure that you specify a folder present on any drive other than your OS drive so that even if your system crashes or corrupts, your projects remain intact. For example, I have that folder on path D:/Google Drive/</p>
<p><strong>Step 3:</strong>  Once installed, run Google Drive software and specify the credentials of your newly created Gmail account.</p>
<h2>Using Google Drive with WAMP/XAMPP</h2>
<p>Now that we’ve setup google drive, it is time to setup document root to google drive folder and create virtual host. This would allow you to run your local projects through WAMP/XAMPP from google drive folder. The reason why we do this is that since google drive folder will be sync by google drive software, any project we put in that folder will automatically be uploaded in your google drive account.</p>
<blockquote>
<p><strong>Note:</strong> I am using XAMPP but if you are using WAMP, some settings or file paths might be different, you should consider reading its
documentation.</p>
</blockquote>
<p><strong>Step 1:</strong> Inside your google drive folder, create a new folder named <strong>webroot</strong> making whole path <strong>X:\Google Drive\webroot</strong> where <strong>X</strong> represents your drive letter.</p>
<p><strong>Step 2:</strong> Assuming you have specified google drive folder to be  <strong>D:/Google Drive/</strong>, open <strong>httpd.conf</strong> (normally located at <strong>apache\conf</strong> folder) file in notepad or other text editor and find the line <strong>Include “conf/extra/httpd-vhosts.conf”</strong>. If there is a hash (#) before that line, remove it. Now find the line with <strong><Directory /></strong> and you should see something similar to:</p>
<pre><code>&lt;Directory /&gt;
   AllowOverride none
   Require all denied
&lt;/Directory&gt;</code></pre>
<p>Change <strong>Require all denied</strong>  to <strong>Require all granted</strong></p>
<p>Or if you see something like:</p>
<pre><code>&lt;Directory /&gt;
    Options FollowSymLinks
    AllowOverride None
    Order deny,allow
    Deny from all
&lt;/Directory&gt;</code></pre>
<p>Change it to:</p>
<pre><code>&lt;Directory /&gt;
    ........
    Allow from all
&lt;/Directory&gt;</code></pre>
<p>Now come to bottom of the file and add:</p>
<pre><code>&lt;Directory "D:\Google Drive\webroot"&gt;
  Options Indexes MultiViews
  Order Allow,Deny
  Allow from all
&lt;/Directory&gt;</code></pre>
<p>Save the file and close it.</p>
<p><strong>Step 3:</strong> Open <strong>httpd-vhosts.conf</strong> (normally located at <strong>apache\conf\extra</strong> folder) and add these lines at the end of it:</p>
<pre><code>&lt;VirtualHost 127.0.0.1:80&gt;
    DocumentRoot "D:/Google Drive/webroot"
    ServerName gdroot.loc
    ServerAlias gdroot.loc
    ErrorLog "D:/Google Drive/webroot/logs/error.log"
    CustomLog "D:/Google Drive/webroot/logs/access.log" combined
&lt;/VirtualHost&gt;</code></pre>
<p>Save the file and close it. Notice that we have specified <strong>gdroot.loc</strong> as address which actually means google drive root (<strong>.loc</strong> signals that it is local folder) which actually maps to your google drive webroot folder eg <strong>D:/Google Drive/webroot</strong>. Notice that you could name it anything you want like <strong>mycoolwebsite.com, yourname.com</strong>, etc but of course that is local folder running from your own computer.</p>
<p><strong>Step 4:</strong> Open <strong>hosts</strong> file in notepad or other text editor located at <strong>X:\Windows\System32\drivers\etc</strong> where <strong>X</strong> stands for drive letter where your OS is installed. At the end of that file add this line assuming you specified URL in above step as <strong>gdroot.loc</strong>:</p>
<pre><code>127.0.0.1       gdroot.loc</code></pre>
<p>Or if you also use port to access your LAMP/XAMPP URLs, specify that as well:</p>
<pre><code>127.0.0.1:PORT_NUMBER_HERE       gdroot.loc</code></pre>
<blockquote>
<p><strong>Note:</strong> If you can’t edit hosts file, you need to have file owner permission, search on Google how to do that.</p>
</blockquote>
<p>Restart apache and access the new url by typing <strong>gdroot.loc</strong> in your browser. You should see screen similar to when you go to <a href="http://localhost">http://localhost</a>.</p>
<p>Congratulations ! you have a nice workflow now. You can now put all your existing our new projects inside your new document root which was assumed to be located at <strong>D:\Google Drive\webroot</strong> and now all your projects are sync with google drive and automatically uploaded to your google account which you can access anywhere. For example, you can now access your projects at office or any other computer by installing google drive client software  there and telling it sync/download your webroot folder. Your projects are now always there and backed up on the cloud :)</p>
<p>Let’s take cool stuff one step further by using <strong>git</strong> so that our projects file are also <strong>version-ed</strong>. If you don’t know much about git and its benefits consider reading links posted above or below in the <strong>Git Resources</strong> section.</p>
<h2>Using Git with a Central Repository</h2>
<p>Creating and using central repository is especially useful in a team. If you just want to keep your projects version-ed and are the only developer working on a project, the normal flow is (unless you track your project to remote host such as <a href="http://github.com/">github</a>):</p>
<ul>
<li>modify files</li>
<li>commit your changes</li>
<li>repeat</li>
</ul>
<p>So essentially you can skip this section if you just want to version your project files and are only developer working on a project.</p>
<p><strong>Step 1:</strong> Download msysgit from <a href="http://code.google.com/p/msysgit/downloads/list">here</a>, choose first link from there. Install it with default settings.</p>
<p><strong>Step 2:</strong> Go to your google drive folder (<strong>D:\Google Drive\</strong>) and create a new folder there named <strong>central.git</strong></p>
<p><strong>Step 3:</strong> Right click on newly created folder and choose <strong>Git Bash Here</strong> and type: </p>
<pre><code>git init –bare</code></pre>
<p><strong>Step 4:</strong> Create a test project folder named <strong>myproject</strong> inside your normal WAMP/XAMPP webroot/htdocs folder or google drive webroot folder mentioned above (Although you can git-manage any folder anywhere on the drive but naturally we want to git-manage projects that we run from webroot/htdocs folder).</p>
<p><strong>Step 5:</strong> Right click on newly created folder, choose <strong>Git Bash Here</strong> and issue these commands one by one:</p>
<pre><code>git init
git remote add central /e/Google\ Drive/central.git/
git push --all central
git push --set-upstream-to central master</code></pre>
<p>Great! now we’ve setup central repository for all our git-managed projects and we can commit, push, fetch all changes from that central repository. For any new repository, you can now issue commands like:</p>
<pre><code>git clone /e/Google\ Drive/central.git/
git fetch /e/Google\ Drive/central.git/
git push central
and so on</code></pre>
<p>That's it.</p>
<h2>Git Resources</h2>
<ul>
<li><a href="http://learn.github.com/p/intro.html">Introduction To Git</a></li>
<li><a href="http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide">Git for beginners: The definitive practical guide</a></li>
<li><a href="http://net.tutsplus.com/tutorials/other/easy-version-control-with-git/">Easy Version Control with Git</a></li>
<li><a href="http://git-scm.com/book">Pro Git Book</a></li>
<li><a href="http://gitref.org/">Git Reference</a></li>
<li><a href="http://net.tutsplus.com/?s=git">and more</a></li>
</ul>]]></description>
<link>https://codeinphp.github.io/post/my-local-development-workflow-with-wamp-xampp-git-and-google-drive</link>
<pubDate>Sun, 12 Apr 2015 13:24:00 +0200</pubDate>
</item>
<item>
<title>GoodTodo PHP and SQlite App</title>
<description><![CDATA[<p>I really like to keep track of tasks and projects (personal or otherwise) I work on. I used to keep my todos list in notepad or by using some other sticky notes application but I wanted dead simple todos app with beautiful looks and simple to use without irrelevant options or goodies. So here I introduce GoodTodo; a todo app made via PHP and SQlite. I chose SQlite because I wanted to make sure that app is portable and of course since it’s small todo app, choosing SQlite for it makes perfect sense. I have used <a href="http://flightphp.com/">flightPHP</a> framework and <a href="http://j4mie.github.io/idiormandparis/">idiorm ORM</a> for it.</p>
<p>Here are its screenshots:</p>
<p><img src="https://codeinphp.github.io/images/1428836471552a507761961.png" alt="enter image description here" /></p>
<p><img src="https://codeinphp.github.io/images/1428836475552a507b38615.png" alt="enter image description here" /></p>
<p><img src="https://codeinphp.github.io/images/1428836467552a50733de24.png" alt="enter image description here" /></p>
<p><strong>How to use:</strong></p>
<p>Make sure you have wamp/xampp or other stack installed. Download the app and put in www/htdocs folder and browse to that folder via browser something like <a href="http://localhost/todo">http://localhost/todo</a>. Please make sure you have sqlite extension turned on from php.ini if it isn’t already.</p>
<p>So go ahead and <a href="https://dl.dropboxusercontent.com/u/11600057/todo.zip">download GoodTodo</a> to keep track of your todos.</p>]]></description>
<link>https://codeinphp.github.io/post/goodtodo-php-and-sqlite-app</link>
<pubDate>Sun, 12 Apr 2015 13:03:00 +0200</pubDate>
</item>
<item>
<title>BloggerCMS  - An Static Blog Generator CMS</title>
<description><![CDATA[<p>In the <a href="https://codeinphp.github.io/post/welcome.html">last post</a>, I had mentioned about BloggerCMS which is used to build this very blog. BloggerCMS is dead simple CMS that can be used to create fully functional static blogs. Although there are <a href="https://github.com/pinceladasdaweb/Static-Site-Generators#php">quite some static site generators</a> out there but I created BloggerCMS because I was missing these features in any of those static site generators:</p>
<ul>
<li>Web interface that allows me to create blog posts, add pages and more instead of writing blog posts manually in bunch of different text files</li>
<li>Markdown editor with live preview feature so that I don't have to type Markdown syntax myself</li>
<li>I needed a true blog generator instead of generic/advanced site generator</li>
</ul>
<p>Those three things are the driving force why I created BloggerCMS. Here is complete list of features of BloggerCMS as of now:</p>
<ul>
<li><strong>Graphical User Interface</strong> - manage your site via a browser</li>
<li><strong>File-based</strong> - no database required</li>
<li><strong>Truly Static</strong> - no server-side languages needed</li>
<li><strong>Portability</strong> - copy, move, backup or version control your site easily</li>
<li><strong>Integrated Markdown Editor</strong> - no need to know Markdown</li>
<li><strong>Built-in Images Manager</strong></li>
<li><strong>Disqus Commenting System</strong></li>
<li><strong>Search Posts Feature</strong></li>
<li><strong>Pagination</strong></li>
<li><strong>Responsive Layout</strong> - get started easily with the included responsive layout</li>
<li><strong>RSS Support</strong></li>
<li><strong>Sitemap Support</strong></li>
<li><strong>Google Analytics</strong></li>
<li><strong>Code Highlight Support</strong></li>
<li><strong>Tags Cloud Support</strong></li>
<li><strong>Social Follow Section</strong></li>
<li><strong>Categories Section</strong></li>
<li><strong>Archives Section</strong></li>
</ul>
<p>To know more about BloggerCMS, head over to <a href="https://bloggercms.github.io">it's blog</a> or see <a href="https://bloggercms.github.io/post/introducing-bloggercms.html">introductory post</a>.</p>]]></description>
<link>https://codeinphp.github.io/post/bloggercms-an-static-blog-generator-cms</link>
<pubDate>Mon, 06 Apr 2015 21:41:00 +0200</pubDate>
</item>
<item>
<title>Welcome !</title>
<description><![CDATA[<p><strong>Hello, World !</strong></p>
<p>This is my first post on this blog hosted at awesome <a href="https://pages.github.com/">github pages</a>. Previously I used to blog on wordpress <a href="http://sarfraznawaz.wordpress.com">here</a> but I switched to github pages because I really wanted to have static blog with free hosting and ability to write up quick posts using <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a> syntax. In the <a href="https://codeinphp.github.io/post/bloggercms-an-static-blog-generator-cms.html">next post</a>, I will write about <strong><a href="https://bloggercms.github.io">BloggerCMS</a></strong>, a CMS I have made that helps create static blogs. This blog has also been generated via BloggerCMS :)</p>
<p>On this blog, I intend to write my ideas mainly about PHP as well as other related web development technologies. </p>
<p><em>Stay tuned :)</em></p>]]></description>
<link>https://codeinphp.github.io/post/welcome</link>
<pubDate>Sun, 05 Apr 2015 15:46:00 +0200</pubDate>
</item>
</channel>
</rss>
