{
	"settings": {
		"url": "https:\/\/codeinphp.github.io",
		"title": "Code In PHP",
		"tagline": "PHP and more...",
		"author": "Sarfraz Ahmed",
		"number_posts": null,
		"layout": "default",
		"theme": "bootstrap.min.css",
		"disqus": "codeinphp",
		"analytics": "UA-61657332-1",
		"only_titles": "",
		"generated": null
	},
	"customValues": [
		{
			"title": "On Stackoverflow",
			"value": "<a href=\"http:\/\/stackoverflow.com\/users\/139459\/sarfraz\"> <img src=\"http:\/\/stackoverflow.com\/users\/flair\/139459.png?theme=clean\" width=\"355\" height=\"100\" alt=\"Sarfraz at Stack Overflow, Q&amp;A for professional and enthusiast programmers\" title=\"Sarfraz at Stack Overflow, Q&amp;A for professional and enthusiast programmers\" class=\"img-responsive\"> <\/a>",
			"id": 1428735262
		}
	],
	"pages": [
		{
			"title": "About",
			"body": "<img src=\"https:\/\/codeinphp.github.io\/images\/1464528216574aed582f5bb.png\" width=\"175\" height=\"180\"\/>\n<p>Hello, I am Sarfraz Ahmed, a self-taught programmer from Karachi, Pakistan mainly involved in PHP, MySQL, HTML\/CSS, JavaScript\/jQuery for around 9+ years now. I also have bit of experience with Android platform. I am also Pakistan's top user on <a href=\"http:\/\/stackoverflow.com\/users\/139459\/sarfraz\">StackOverflow<\/a> by reputation holding Gold badge for the tags PHP, Javascript, jQuery, HTML and CSS.<\/p>",
			"slug": "about",
			"generated": ""
		},
		{
			"title": "Projects",
			"body": "<h2>PHP (Open Source)<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/floyer\">Floyer<\/a>: Floyer is simple and fast deployment tool using git\/svn and (S)FTP.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/gitup\">Laravel GitUp<\/a>: Laravel package to upload git commits to server(s) via (s)ftp..<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/backupmanager\">Laravel BackupManager<\/a>: Simple laravel package to backup\/restore files and database.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/noty\">Laravel Noty<\/a>: Laravel package to incorporate beautiful noty notifications into laravel as flash messages.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/queryline\">Laravel QueryLine<\/a>:Package to show time graph against run queries on a page.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/eventable\">Laravel Eventable<\/a>:Package to add event listening capabilities to models on Create\/Update\/Delete operations.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/applog\">Laravel AppLog<\/a>:Package to view application logs.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/BloggerCMS\">BloggerCMS<\/a>: A CMS that helps you create static blogs via Admin Panel.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/EZPHP\">EZPHP<\/a>: Light-weight PHP Framework with MVC Design Pattern.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/Phexecute\">Phexecute<\/a>: Awesome PHP Code Runner<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/bookmarker\">BookMarker<\/a>: Bookmarker app, no more mixed up browser bookmarks.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/visitlog\">Laravel VisitLog<\/a>: Laravel package to log visitor information.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/GoodTodo\">Good Todo<\/a>: Keep track of your tasks and todos<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/VisualQuery\">Visual Query<\/a>: Visual query builder for MySQL<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/Save-Complete-HTML\">Save Page Complete<\/a>: Class to save pages in single file with all CSS and JavaScript<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/basecampapp\">Basecampapp<\/a>: Basecap Classic app to post todo times to basecamp.<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/gitup\">GitUp<\/a>: Laravel package to upload git commits to server(s) via (s)ftp.<\/li>\n<\/ul>\n<h2>PHP (Professional)<\/h2>\n<ul>\n<li><a href=\"http:\/\/tslic-backoffice.com\">TSLIC Agents<\/a>: A website made in Laravel for funeral home agents in USA<\/li>\n<li><a href=\"https:\/\/betterbodyboutique.com\/\">BetterBodyBoutique<\/a>: A web app to monitor and track health.<\/li>\n<li><a href=\"http:\/\/www.donorsimpact.com\">Donors Impact<\/a>: A donation giving website for the universities<\/li>\n<li><a href=\"http:\/\/www.cosmicjeans.co.uk\/\">CosmicJeans<\/a>: A website to buy jeans<\/li>\n<li><a href=\"http:\/\/www.spysure.com\/\">SpySure<\/a>: Website with services to monitor what employees are doing.<\/li>\n<li><a href=\"http:\/\/frenchdistrict.com\/\">French District<\/a>: A multi-purpose French website.<\/li>\n<li><a href=\"http:\/\/www.thezawiya.com\/\">Zawiya<\/a>: Religious and culture related website<\/li>\n<li><a href=\"http:\/\/www.ukexam.co.uk\/\">UK Exam<\/a>: Website with an exam system for those who want to come to United Kingdom<\/li>\n<li>Various other development projects<\/li>\n<li>Various Facebook Apps<\/li>\n<\/ul>\n<h2>Javascript<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/quran-cli\">Quran CLI<\/a>: Read The Holy Quran from the commandline<\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/whatspup\">Whatspup<\/a>: App to chat on whatsapp via CLI <\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/Slidr\">Slidr<\/a>: jQuery plugin to create beautiful HTML Presentations <\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/HTML5Sticky\">HTML5Sticky<\/a>: Sticky Notes App for the Web <\/li>\n<li><a href=\"http:\/\/sarfraznawaz.wordpress.com\/2010\/09\/19\/styletable-jquery-plugin\/\">StyleTable<\/a>: jQuery plugin to style html tables<\/li>\n<li><a href=\"http:\/\/sarfraznawaz.wordpress.com\/2010\/06\/29\/creating-drop-shadow-jquery-plugin\/\">DropShadow<\/a>: jQuery plugin to apply drop shadow effect to any element<\/li>\n<\/ul>\n<h2>Mobile<\/h2>\n<ul>\n<li><a href=\"http:\/\/sarfraznawaz.wordpress.com\/2014\/03\/03\/my-first-android-app-mygoals\/\">My Goals<\/a>: Android app to save tasks\/todos\/goals <\/li>\n<li><a href=\"https:\/\/f-droid.org\/repository\/browse\/?fdcategory=Phone%20&%20SMS&fdid=com.wordpress.sarfraznawaz.callerdetails\">Caller Details<\/a>: Android app to show caller details when they call <\/li>\n<li><a href=\"http:\/\/sarfraznawaz.wordpress.com\/2010\/03\/27\/magic-dialler-my-first-j2me-application\/\">Magic Dialler<\/a>: J2ME\/JavaMe app <\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/nativescript-holyquran\">Holy Quran<\/a>: Holy Quran app with English\/Urdu translation made in NativeScript. <\/li>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/nativescript-zikr\">Zikr<\/a>: Zikar\/Tasbeeh counter app made in NativeScript. <\/li>\n<\/ul>\n<h2>CSS<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/sarfraznawaz2005\/Bootstrap-Admin-Template\">Twitter Bootstrap Admin Template<\/a>: Make app's backend good-looking <\/li>\n<li><a href=\"http:\/\/sarfraznawaz.wordpress.com\/2012\/01\/14\/free-admin-template\/\">Free Admin Template<\/a>: Another admin template <\/li>\n<li><a href=\"http:\/\/sarfraznawaz.wordpress.com\/2010\/11\/27\/flag-of-pakistan-with-pure-css\/\">Pakistan's Flag<\/a>: Flag of Pakistan with pure CSS<\/li>\n<\/ul>\n<h2>Browser<\/h2>\n<ul>\n<li><a href=\"http:\/\/sarfraznawaz.wordpress.com\/2012\/02\/15\/introducing-webnote-chrome-extension\/\">Webnote<\/a>: Chrome browser extension + backend to help you save pages and do research <\/li>\n<li><a href=\"http:\/\/sarfraznawaz.wordpress.com\/2012\/02\/09\/facebookifying-pages\/\">Facebookify<\/a>: Greasemonkey script to inject instance of Facebook object into pages<\/li>\n<\/ul>\n<h2>Others<\/h2>\n<ul>\n<li><a href=\"http:\/\/sarfraznawaz.wordpress.com\/2010\/03\/15\/send-sms-to-any-network-in-pakistan-for-free\/\">Pak SMS<\/a>: Software made in VB6 to send free SMS to Pakistan <\/li>\n<\/ul>\n<hr \/>\n<blockquote>\n<p><strong>Technologies<\/strong>: php, javascript, jquery, css\/css3, html\/html5, mvc, wordpress, joomla, codeigniter, laravel, opencart, backbone,\nangularjs, android, git, svn, agile, etc<\/p>\n<\/blockquote>",
			"slug": "projects",
			"generated": "1"
		},
		{
			"title": "Contact",
			"body": "<p>To get in touch, <a href=\"http:\/\/www.twitter.com\/sarfraznawaz\">Twitter<\/a> or <a href=\"mailto:sarfraznawaz2005@gmail.com\">Email<\/a> is best (depending on the length of the message). I\u2019m also on <a href=\"https:\/\/www.linkedin.com\/pub\/sarfraz-ahmed\/14\/419\/709\">LinkedIn<\/a>.<\/p>\n<hr \/>\n<blockquote>\n<p><em><a href=\"http:\/\/careers.stackoverflow.com\/sarfraznawaz\">Hey! I am available for hire ;-)<\/a><\/em><\/p>\n<\/blockquote>",
			"slug": "contact",
			"generated": "1"
		}
	],
	"follow": {
		"twitter": "https:\/\/twitter.com\/sarfraznawaz",
		"linkedin": "https:\/\/pk.linkedin.com\/in\/sarfraz-ahmed-70941914",
		"google": "",
		"facebook": "",
		"github": "https:\/\/github.com\/sarfraznawaz2005"
	},
	"posts": [
		{
			"author": "Sarfraz Ahmed",
			"title": "Laravel: Automatic Vendor Cleanup Command",
			"tags": [
				"command",
				"laravel",
				"vendor"
			],
			"category": "PHP",
			"body": "<p>When installing composer packages, they come up with <strong>lot of useless files and folders<\/strong> such as <code>.git<\/code>, <code>tests<\/code>, <code>readme.md<\/code> and more. When project becomes bigger with many packages, this junk takes considerable disk space. Since I work with Laravel framework most of the time, I created a command that allows me to automatically delete all these junk files whenever I happen to install or update composer packages.<\/p>\n<p>Here is the pattern used by <code>glob<\/code> function to detect and delete all junk files:<\/p>\n<pre><code>protected $patterns = [\n    '.git',\n    '.github',\n    'test',\n    'tests',\n    'travis',\n    'demo',\n    'demos',\n    'license',\n    'changelog*',\n    'contributing*',\n    'upgrading*',\n    'upgrade*',\n    '.idea',\n    '.vagrant',\n    'readme*',\n    '_ide_helper.php',\n    '{,.}*.yml',\n    '*.yaml',\n    '*.md',\n    '*.xml',\n    '*.log',\n    '*.txt',\n    '*.dist',\n    '*.pdf',\n    '*.xls',\n    '*.doc',\n    '*.docx',\n    '*.png',\n    '*.gif',\n    '*.jpg',\n    '*.bmp',\n    '*.jpeg',\n    '*.ico',\n    '.php_cs*',\n    '.scrutinizer',\n    '.gitignore',\n    '.gitattributes',\n    '.editorconfig',\n    'dockerfile',\n    'composer.json',\n    'composer.lock',\n];<\/code><\/pre>\n<p>The command itself can be <a href=\"https:\/\/github.com\/sarfraznawaz2005\/laravel55-starter\/blob\/master\/Modules\/Core\/Console\/VendorCleanup.php\">seen here<\/a>.<\/p>\n<p>To automatically cleanup junk files\/folders when installing or updating composer packages in Laravel, <code>@php artisan vendor:cleanup<\/code> should be added under the <code>post-autoload-dump<\/code> section in <code>composer.json<\/code> file. Or we can also trigger it manually anytime by typing <code>php artisan vendor:cleanup --o<\/code> where <code>--o<\/code> is optional argument to display verbose output.<\/p>\n<p>If you actually want to be able to use this idea of cleanup of useless files in any PHP project (Laravel or not), you might want to create a <a href=\"https:\/\/getcomposer.org\/doc\/articles\/plugins.md\">composer plugin<\/a> instead and install it globally that can then work across PHP projects and cleanup useless files from the <code>vendor<\/code> folder.<\/p>\n<p>If you witness any issue or something missing in the pattern list shown above, please leave your suggestion\/improvements in comments. Thanks<\/p>",
			"addpost": "addpost",
			"dated": "January 25, 2018 12:16 AM",
			"slug": "laravel-automatic-vendor-cleanup-command",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>When installing composer packages, they come up with <strong>lot of useless files and folders<\/strong> such as <code>.git<\/code>, <code>tests<\/code>, <code>readme.md<\/code> and more. When project becomes bigger with many packages, this junk takes considerable disk space. Since I work with Laravel...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Whatsapp Chat from CLI Using Puppeteer",
			"tags": [
				"console",
				"whatsapp",
				"puppeteer"
			],
			"category": "Random",
			"body": "<p><a href=\"https:\/\/github.com\/GoogleChrome\/puppeteer\">GoogleChrome puppeteer<\/a>  is interesting project to create browser automation tools, testing tools or web scrapping. I was wondering to use it for something useful and an idea popped in about creating CLI application that can be used to send and receive messages on Whatsapp. So I went on to creating <strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/whatspup\">Whatspup<\/a><\/strong>, a name based on both Whatsapp and puppeteer.<\/p>\n<h2>Features<\/h2>\n<ul>\n<li>Send and receive messages<\/li>\n<li>Read Receipts<\/li>\n<li>Switch between users to chat with<\/li>\n<li>Popup notifications for new chat messages<\/li>\n<li>Privacy settings for popup notifications<\/li>\n<li>One-time authentication, no need to scan QR code again and again<\/li>\n<li>Windowless\/headless (hidden) mode<\/li>\n<li>Colorful chat messages<\/li>\n<\/ul>\n<h2>Screenshot<\/h2>\n<p><img src=\"https:\/\/raw.githubusercontent.com\/sarfraznawaz2005\/whatspup\/master\/screenshot.jpg\" alt=\"Main Window\" \/><\/p>\n<hr \/>\n<p><strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/whatspup\">Head over to Whatspup repository and start using it :)<\/a><\/strong><\/p>",
			"addpost": "addpost",
			"dated": "December 10, 2017 04:06 PM",
			"slug": "whatsapp-chat-from-cli-using-puppeteer",
			"categoryslug": "random",
			"status": "publised",
			"summary": "\n<p><a href=\"https:\/\/github.com\/GoogleChrome\/puppeteer\">GoogleChrome puppeteer<\/a>  is interesting project to create browser automation tools, testing tools or web scrapping. I was wondering to use it for something useful and an idea popped in about creating CLI application that can be used to send a...<\/p>\n",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Laravel QueryDumper",
			"tags": [
				"laravel",
				"php",
				"sql",
				"log"
			],
			"category": "PHP",
			"body": "<p>I wanted simple and quick way to see all running queries on any page of my laravel application especially accompanied by MySQL's <code>EXPLAIN<\/code> results. So I created very simple package called <strong>Laravel QueryDumper<\/strong> that allows me see just that.<\/p>\n<h1>Screenshot<\/h1>\n<p><img src=\"https:\/\/camo.githubusercontent.com\/35a43c98152c978c9df07b32f833609fe065edac\/68747470733a2f2f7261772e6769746875622e636f6d2f7361726672617a6e6177617a323030352f717565727964756d7065722f6d61737465722f73637265656e2e706e67\" alt=\"enter image description here\" \/><\/p>\n<hr \/>\n<p><strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/querydumper\">Checkout Laravel QueryDumper<\/a><\/strong><\/p>",
			"addpost": "addpost",
			"dated": "September 16, 2017 06:16 PM",
			"slug": "laravel-querydumper",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>I wanted simple and quick way to see all running queries on any page of my laravel application especially accompanied by MySQL's <code>EXPLAIN<\/code> results. So I created very simple package called <strong>Laravel QueryDumper<\/strong> that allows me see just that.<\/p>\n<h1>Screenshot<\/h1>\n<p><img...><\/img...><\/p>\n",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Introducing Floyer",
			"tags": [
				"deployment",
				"ftp",
				"git",
				"php",
				"svn"
			],
			"category": "PHP",
			"body": "<p>At my company, they still use ^svn^ and on top of that ^ftp^ and it was pain in the ass to upload files especially when client didn't have dedicated hosting or where there was no SSH access available. I did find some git-to-ftp or svn-to-ftp deployment tools but they were very slow because they uploaded each file individually.<\/p>\n<p>I sat down over the weekend and came up with my own solution <strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/floyer\">Floyer<\/a><\/strong> (shortened from FTPDeployer). It works with both <code>git<\/code> and <code>svn<\/code> and is quit fast able to upload hundreds of files in few seconds. Other than FTP, it also supports SFTP.<\/p>\n<h1>How does it work<\/h1>\n<ul>\n<li>It stores revision\/commit hash on the server in a file when deployment is started.<\/li>\n<li>On next deployment, it compares local revision with remote one thereby able to deploy only the files changed between these two revisions.<\/li>\n<li>Once it knows what files to upload, it creates zip archive of these files to be deployed on the server.<\/li>\n<li>Rather than uploading each file individually (which is very slow process), it creates and uploads zip archive file to server where there is corresponding extract zip PHP script which extracts these files very fast. This script is also created and uploaded by Floyer.<\/li>\n<li>After deployment is finished, zip archive and extract script is deleted automatically.<\/li>\n<\/ul>\n<p>Deploying by uploading and extracting archive file not only makes deployment fast but also we don't have to worry about some permission issues or creating new directories and so on because extract script runs from server itself thereby avoiding these issues.<\/p>\n<h1>Screenshot<\/h1>\n<p><img src=\"https:\/\/camo.githubusercontent.com\/dbd0d6326b7820922db866f0095af8752ff6e3bf\/68747470733a2f2f7261772e6769746875622e636f6d2f7361726672617a6e6177617a323030352f666c6f7965722f6d61737465722f73637265656e73686f742e706e67\" alt=\"enter image description here\" \/><\/p>\n<p><strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/floyer\">Checkout Floyer at Github<\/a><\/strong><\/p>",
			"addpost": "addpost",
			"dated": "August 24, 2017 10:03 PM",
			"slug": "introducing-floyer",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>At my company, they still use ^svn^ and on top of that ^ftp^ and it was pain in the ass to upload files especially when client didn't have dedicated hosting or where there was no SSH access available. I did find some git-to-ftp or svn-to-ftp deployment tools but they were very slow because they u...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Sockets with PHP and Node",
			"tags": [
				"node",
				"php",
				"realtime",
				"socket"
			],
			"category": "PHP",
			"body": "<p>I was looking to implement real time notifications system via sockets without having to use any third party services such as <a href=\"https:\/\/pusher.com\/\">Pusher<\/a>, etc. I just wanted to be able to send notifications from PHP side to the client and instantly show them on the web application similar to Facebook notifications. <\/p>\n<p>First I came across <a href=\"http:\/\/socketo.me\/\">ratchet<\/a> library, it worked great but problem emerged when setting it up on secure connection (https) on my host (siteground), tried apache proxy module and everything else told on the internet but to no avail (it seems siteground has problem with ratchet on https) so in the end I had to drop ratchet.<\/p>\n<p>Then I thought of using <a href=\"https:\/\/socket.io\/\">socket.io<\/a> with Node+PHP and with my research I came across <a href=\"https:\/\/github.com\/Wisembly\/elephant.io\">elephant.io<\/a> library (though it isn't updated recently) and this one worked wonderfully well both on non-secure and secure protocols allowing us to send and receive messages from PHP with node-based server.<\/p>\n<p>Here are the steps that I followed to get my notification system working.<\/p>\n<p><strong>Install elephant.io<\/strong><\/p>\n<p>For your PHP application, install <code>elephant.io<\/code> via composer:<\/p>\n<pre><code>composer require wisembly\/elephant.io<\/code><\/pre>\n<p><strong>Install Node Dependencies<\/strong><\/p>\n<p>Create a directory in your project root and under it create a file named <code>package.json<\/code> with these contents:<\/p>\n<pre><code>{\n    \"name\": \"elephantIO_example_emitter\",\n    \"version\": \"3.0.0\",\n    \"main\": \"server.js\",\n\n    \"scripts\": {\n        \"start\": \"supervisor --debug server.js\"\n    },\n\n    \"dependencies\": {\n        \"socket.io\": \"~1\",\n        \"winston\": \"*\"\n    }\n}<\/code><\/pre>\n<p>On newly created directory run command <code>npm install --save<\/code>. This will install <code>socket.io<\/code> and logger library.<\/p>\n<p>In same newly created directory, create a file <code>server.js<\/code> with these contents:<\/p>\n<pre><code>var server     = require('http').createServer(),\n    io         = require('socket.io')(server),\n    logger     = require('winston'),\n    port       = 1337;\n\n\/\/ Logger config\nlogger.remove(logger.transports.Console);\nlogger.add(logger.transports.Console, { colorize: true, timestamp: true });\nlogger.info('SocketIO &gt; listening on port ' + port);\n\nio.on('connection', function (socket){\n    var nb = 0;\n\n    logger.info('SocketIO &gt; Connected socket ' + socket.id);\n\n    socket.on('broadcast', function (message) {\n        ++nb;\n        logger.info('ElephantIO broadcast &gt; ' + JSON.stringify(message));\n\n        \/\/ send to all connected clients\n        io.sockets.emit(\"broadcast\", message);\n    });\n\n    socket.on('disconnect', function () {\n        logger.info('SocketIO : Received ' + nb + ' messages');\n        logger.info('SocketIO &gt; Disconnected socket ' + socket.id);\n    });\n});\n\nserver.listen(port);<\/code><\/pre>\n<p>Run <code>server.js<\/code> file through node by typing <code>node server.js<\/code>, you should see message that server has started on specified port.<\/p>\n<p><strong>Client Side<\/strong><\/p>\n<p>Put following javascript code in your application's page\/footer:<\/p>\n<pre><code>&lt;script src='\/\/cdnjs.cloudflare.com\/ajax\/libs\/socket.io\/1.7.4\/socket.io.min.js'&gt;&lt;\/script&gt;\n\n&lt;script&gt;\nvar socket = io.connect('\/\/127.0.0.1:1337');\n\nsocket.on('connect', function () {\n    console.log('connected');\n\n    socket.on('broadcast', function (data) {\n        \/\/console.log(data);\n        \/\/socket.emit(\"broadcast\", data);\n        alert(data.text);\n    });\n\n    socket.on('disconnect', function () {\n        console.log('disconnected');\n    });\n});\n&lt;\/script&gt;<\/code><\/pre>\n<p><strong>Sending Notification from PHP<\/strong><\/p>\n<p>Here is how you can send a message to all connected clients:<\/p>\n<pre><code>require __DIR__ . '\/vendor\/autoload.php';\n\nuse ElephantIO\\Client;\nuse ElephantIO\\Engine\\SocketIO\\Version1X;\n\n$client = new Client(new Version1X('\/\/127.0.0.1:1337'));\n\n$client-&gt;initialize();\n\/\/ send message to connected clients\n$client-&gt;emit('broadcast', ['type' =&gt; 'notification', 'text' =&gt; 'Hello There!']);\n$client-&gt;close();<\/code><\/pre>\n<p>and that's all there is to it.<\/p>\n<p><strong>Installing and Running Node on Production Site<\/strong><\/p>\n<p>I was on <code>CentOSv6<\/code> and I installed node by following <a href=\"https:\/\/www.a2hosting.com\/kb\/installable-applications\/manual-installations\/installing-node-js-on-managed-hosting-accounts\">this guide<\/a>. Then I created simple php file that will be run by cron so that node server is automatically started\/restarted if it is not running:<\/p>\n<pre><code>$nodePath = 'your node binary path here';\n$filePath = 'your server.js file path';\nshell_exec($nodePath . ' ' . $filePath);<\/code><\/pre>\n<p>and then specify that file in cron to run at your specified time intervals.<\/p>\n<p><strong>Important Notes<\/strong><\/p>\n<ul>\n<li>I was having bit of issue getting node path from PHP script where I initially installed it so I copied the nodejs folder to my <code>public_html<\/code> folder (app's root).<\/li>\n<li>On production site, I had to type actual server IP rather than <code>127.0.0.1<\/code> on client side code eg instead of <code>var socket = io.connect('\/\/127.0.0.1:1337');<\/code>, it has to be <code>var socket = io.connect('\/\/SERVER_IP_HERE:1337');<\/code><\/li>\n<li>If you are having issue getting it to work on https, check out <a href=\"https:\/\/github.com\/Wisembly\/elephant.io\/issues?utf8=%E2%9C%93&amp;q=\">issues section<\/a> to fix it.<\/li>\n<li>Check out <strong>examples<\/strong> folder of <code>elephant.io<\/code> to know how to send or receive messages both from PHP as well as Javascript.<\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "July 22, 2017 02:19 AM",
			"slug": "sockets-with-php-and-node",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>I was looking to implement real time notifications system via sockets without having to use any third party services such as <a href=\"https:\/\/pusher.com\/\">Pusher<\/a>, etc. I just wanted to be able to send notifications from PHP side to the client and instantly show them on the web application sim...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Laravel VisitLog",
			"tags": [
				"laravel"
			],
			"category": "PHP",
			"body": "<p>VisitLog is a simple Laravel 5 package that can be used to log visitor information and save it into database. <\/p>\n<h2>Features<\/h2>\n<ul>\n<li>Other than basic log such as IP, Browser and OS, it can also log Location information.<\/li>\n<li>Allows to log both unique and non-unique visits based on IP.<\/li>\n<li>Allows to cache the visits based on IP.<\/li>\n<li>Allows to log authenticated user info.<\/li>\n<li>Provides log viewer page out of box.<\/li>\n<\/ul>\n<h2>Screenshots<\/h2>\n<p><img src=\"https:\/\/raw.github.com\/sarfraznawaz2005\/visitlog\/master\/screen.png\" alt=\"Main Window\" \/><\/p>\n<hr \/>\n<p><a href=\"https:\/\/github.com\/sarfraznawaz2005\/visitlog\">Visit Package Repository<\/a> to know more about it and installation.<\/p>",
			"addpost": "addpost",
			"dated": "September 13, 2016 05:50 PM",
			"slug": "laravel-visitlog",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>VisitLog is a simple Laravel 5 package that can be used to log visitor information and save it into database. <\/p>\n<h2>Features<\/h2>\n<ul><li>Other than basic log such as IP, Browser and OS, it can also log Location information.<\/li>\n<li>Allows to log both unique and non-unique visits based on IP...<\/li><\/ul>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "From Bad to Good: DI, DIC and Services",
			"tags": [
				"container",
				"injection",
				"oop",
				"php",
				"service"
			],
			"category": "PHP",
			"body": "<p>In this post, I intend to touch the concepts of:<\/p>\n<ul>\n<li>Dependency Injection (<a href=\"http:\/\/codeinphp.github.io\/post\/dependency-injection-in-php\/\">My previous post on DI<\/a>)<\/li>\n<li>Dependency Injection Container (DIC)<\/li>\n<li>Services<\/li>\n<\/ul>\n<p>Even though these terms seems scary at first especially to new-comers but are really easy to understand and help write <strong>quality code that is easy to understand and extend<\/strong>. We will take a ^legacy code^ and convert it into object-oriented one by using these principles.<\/p>\n<p>Suppose we have simple application that sends newsletter email to all its subscribers, here is the legacy code:<\/p>\n<pre><code>\/\/ file: index.php or could also be considered as Controller file in MVC paradigm\n\nrequire __DIR__ . 'vendor\/autoload.php';\n\nuse Demo\\Mailer\\SmtpMailer;\n\n$dsn = 'sqlite:' . __DIR__ . 'database.sqlite';\n$pdo = new PDO($dsn);\n\n$mailer = new SmtpMailer('smtp.example.com', 'user', 'password', '465');\n\n$sql = 'SELECT * from subscribers';\n\nforeach ($pdo-&gt;query($sql) as $row) {\n    $mailer-&gt;sendMessage(\n        $row['email'],\n        'This is the email body',\n        $row['name'],\n        'info@example.com'\n    );\n}<\/code><\/pre>\n<p>Right now above code smells and has these problems:<\/p>\n<ul>\n<li>Logic is mixed up, SQL queries, sending emails database configuration is all in one file<\/li>\n<\/ul>\n<p>To fix this, first instinct is to convert it into class:<\/p>\n<pre><code>class SubscriberMailer\n{\n    public function sendEmails()\n    {\n        $dsn = 'sqlite:' . __DIR__ . 'database.sqlite';\n        $pdo = new PDO($dsn);\n\n        $mailer = new SmtpMailer('smtp.example.com', 'user', 'password', '465');\n\n        $sql = 'SELECT * from subscribers';\n\n        foreach ($pdo-&gt;query($sql) as $row) {\n            $mailer-&gt;sendMessage(\n                $row['email'],\n                'This is the email body',\n                $row['name'],\n                'info@example.com'\n            );\n        }\n    }\n}<\/code><\/pre>\n<p>This looks good to eye but it has more problems:<\/p>\n<ul>\n<li>Logic is <em>still<\/em> mixed up, SQL queries, sending emails database configuration is all in one file<\/li>\n<li>It has hard-coded dependencies (tight-coupling) on PDO and Mailer class, what if we wanted to change Mailer class ?<\/li>\n<li>It is hard to unit-test because of tight coupling<\/li>\n<\/ul>\n<p>Let's try to fix these problems. We can see that this class has dependency on PDO so instead of hard-coding it inside <code>SubscriberMailer<\/code> class, we can ^pass^ it via its constructor which now makes the class:<\/p>\n<pre><code>class SubscriberMailer\n{\n    protected $pdo = null;\n\n    public function __construct($pdo)\n    {\n        $this-&gt;pdo = $pdo;\n    }\n\n    public function sendEmails()\n    {\n        $mailer = new SmtpMailer('smtp.example.com', 'user', 'password', '465');\n\n        $sql = 'SELECT * from subscribers';\n\n        foreach ($this-&gt;pdo-&gt;query($sql) as $row) {\n            $mailer-&gt;sendMessage(\n                $row['email'],\n                'This is the email body',\n                $row['name'],\n                'info@example.com'\n            );\n        }\n    }\n}<\/code><\/pre>\n<p>This is a bit better, the class doesn't care where PDO objects comes from, it just needs one to operate and you can't instantiate the class without providing one so it makes its intention clear. So this is what is called <strong>Dependency Injection<\/strong>, no need to fear even though the term sounded scary initially (read my <a href=\"http:\/\/codeinphp.github.io\/post\/dependency-injection-in-php\/\">previous article<\/a> on more ways of injecting dependencies). Here is how we use above class at this point of the time:<\/p>\n<pre><code>require __DIR__ . 'vendor\/autoload.php';\n\nuse Demo\\Mailer\\SmtpMailer;\nuse Demo\\Mailer\\SubscriberMailer;\n\n$dsn = 'sqlite:' . __DIR__ . 'database.sqlite';\n$pdo = new PDO($dsn);\n\n$subscriberMailer = new SubscriberMailer($pdo);\n$subscriberMailer-&gt;sendEmails();<\/code><\/pre>\n<p>This is starting to look better compared to first snippet of code. However, we still have a problem in that we have hard-coded smtp config into our class, what if we wanted to change the smtp config without touching the class ? Or what if we had different setup of smtp config for development and production ? Remember a class should be a black-box which simply does its job without editing it again and again, you can only extend it not edit it. So this reasoning hints us that like pdo, we should also pass smtp config via class's constructor and move it from the class itself.<\/p>\n<pre><code>class SubscriberMailer\n{\n    protected $pdo = null;\n    protected $smtpConfig = [];\n\n    public function __construct($pdo, array $smtpConfig)\n    {\n        $this-&gt;pdo = $pdo;\n        $this-&gt;smtpConfig = $smtpConfig;\n    }\n\n    public function sendEmails()\n    {\n        $mailer = new SmtpMailer(\n            $this-&gt;smtpConfig['host'],\n            $this-&gt;smtpConfig['user'],\n            $this-&gt;smtpConfig['password'],\n            $this-&gt;smtpConfig['port']\n        );\n\n        $sql = 'SELECT * from subscribers';\n\n        foreach ($this-&gt;pdo-&gt;query($sql) as $row) {\n            $mailer-&gt;sendMessage(\n                $row['email'],\n                'This is the email body',\n                $row['name'],\n                'info@example.com'\n            );\n        }\n    }\n}<\/code><\/pre>\n<p>Usage:<\/p>\n<pre><code>require __DIR__ . 'vendor\/autoload.php';\n\nuse Demo\\Mailer\\SmtpMailer;\nuse Demo\\Mailer\\SubscriberMailer;\n\n$dsn = 'sqlite:' . __DIR__ . 'database.sqlite';\n$pdo = new PDO($dsn);\n\n$subscriberMailer = new SubscriberMailer($pdo, [\n   'host' =&gt; 'smtp.example.com',\n   'user' =&gt; 'user',\n   'password' =&gt; 'password',\n   'port' =&gt; '465',\n]);\n\n$subscriberMailer-&gt;sendEmails();<\/code><\/pre>\n<p>This is better, we can now readily change smtp config in one place and we don't have to touch our class. It still has these problems though:<\/p>\n<ul>\n<li>It is tightly coupled to SMTP mailer, what if we wanted to change mailer from smtp to another one like sendmail ?<\/li>\n<li>SQL is still written in our class, logic is mixed up, our mail class shouldn't know about users or interact with database, it just needs to send emails !<\/li>\n<\/ul>\n<blockquote>\n<p><code>Hint<\/code>: The <code>new<\/code> keyword is considered code-smell, whenever you\nencounter it, it means it is something you should pass via dependency\ninjection.<\/p>\n<\/blockquote>\n<p>So by now we know that to remove hard-coded dependency or tight-coupling, we should pass it instead via dependency injection. So instead of passing mailer config, we should pass mailer object:<\/p>\n<pre><code>class SubscriberMailer\n{\n    protected $pdo = null;\n    protected $mailer = null;\n\n    public function __construct(\\PDO $pdo, SmtpMailer $mailer)\n    {\n        $this-&gt;pdo = $pdo;\n        $this-&gt;mailer = $mailer;\n    }\n\n    public function sendEmails()\n    {\n        $sql = 'SELECT * from subscribers';\n\n        foreach ($this-&gt;pdo-&gt;query($sql) as $row) {\n            $this-&gt;mailer-&gt;sendMessage(\n                $row['email'],\n                'This is the email body',\n                $row['name'],\n                'info@example.com'\n            );\n        }\n    }\n}<\/code><\/pre>\n<p>Usage:<\/p>\n<pre><code>require __DIR__ . 'vendor\/autoload.php';\n\nuse Demo\\Mailer\\SmtpMailer;\nuse Demo\\Mailer\\SubscriberMailer;\n\n$dsn = 'sqlite:' . __DIR__ . 'database.sqlite';\n$pdo = new PDO($dsn);\n\n$mailer = new SmtpMailer('smtp.example.com', 'user', 'password', '465');\n\n$subscriberMailer = new SubscriberMailer($pdo, $mailer);       \n$subscriberMailer-&gt;sendEmails();<\/code><\/pre>\n<p>This is better, we removed hard-coded dependency to smtp mailer and notice that we have also type-hinted the <code>PDO<\/code> and <code>SmtpMailer<\/code> in the constructor of our class, this is extremely helpful because:<\/p>\n<ul>\n<li>Our class makes clear intention that it needs a <code>PDO<\/code> and <code>SmtpMailer<\/code> to work properly<\/li>\n<li>If somebody passes something other than these two dependencies, they would get clear error message<\/li>\n<li>Type-hinting makes our code self-documenting<\/li>\n<li>It makes IDE auto-completion <\/li>\n<\/ul>\n<p>Right now our mailer class knows it needs an instance of <code>SmtpMailer<\/code> to work and it should have a <code>sendMessage<\/code> method. Remember, we refactored our code in hope that we might use some other type of mailer like sendmail but problem is that it might not necessarily have the <code>sendMessage<\/code> method which means we cannot use it. So how do we solve this problem to be able to use some other type of mailer implementation ? Well the answer is to use an interface\/contract and use that instead:<\/p>\n<pre><code>\/\/ app\/Demo\/Contracts\/MailerInterface.php\ninterface MailerInterface\n{\n   public function sendMessage($email, $body, $subject, $from);\n}\n\n\/\/ app\/Demo\/Mailer\/SmtpMailer.php\nuse Demo\\Contracts\\MailerInterface;\n\nclass SmtpMailer implements MailerInterface\n{\n    public function sendMessage($email, $body, $subject, $from) {\n        \/\/ code to send email\n    }\n}\n\n\/\/ app\/Demo\/Mailer\/SubscriberMailer.php    \nclass SubscriberMailer\n{\n    protected $pdo = null;\n    protected $mailer = null;\n\n    public function __construct(\\PDO $pdo, MailerInterface $mailer)\n    {\n        $this-&gt;pdo = $pdo;\n        $this-&gt;mailer = $mailer;\n    }\n\n    public function sendEmails()\n    {\n        $sql = 'SELECT * from subscribers';\n\n        foreach ($this-&gt;pdo-&gt;query($sql) as $row) {\n            $this-&gt;mailer-&gt;sendMessage(\n                $row['email'],\n                'This is the email body',\n                $row['name'],\n                'info@example.com'\n            );\n        }\n    }\n}<\/code><\/pre>\n<p>Just like every step that we are performing, this step also has nice advantages:<\/p>\n<ul>\n<li>Our <code>SubscriberMailer<\/code> class is now greatly expandable since it now accepts <strong>ANY object<\/strong> that implements <code>MailerInterface<\/code> that has <code>sendMessage<\/code> method<\/li>\n<li>It documents our code a bit more, it is clear now how an object should be constructed that implements the <code>MailerInterface<\/code><\/li>\n<\/ul>\n<p>All well and good so far. We now see that in our class has SQL to get users. Again it should not care about talking to database, it just needs users' emails to send emails to. To fix this, we need use the <strong><a href=\"http:\/\/shawnmc.cool\/the-repository-pattern\">Repository Pattern<\/a><\/strong> which is essentially a class talking to database to manipulate specific entity, in this case users. So we can pass <code>UserRepository<\/code> as dependency that has a method to get all users:<\/p>\n<pre><code>\/\/ app\/Demo\/Mailer\/SubscriberMailer.php\nuse Demo\\Contracts\\MailerInterface;\nuse Demo\\Repositories\\UserRepository;\n\nclass SubscriberMailer\n{\n    protected $mailer = null;\n    protected $userRepository = null;\n\n    public function __construct(MailerInterface $mailer, UserRepository $userRepository)\n    {\n        $this-&gt;mailer = $mailer;\n        $this-&gt;userRepository = $userRepository;\n    }\n\n    public function sendEmails()\n    {\n        $users = $this-&gt;userRepository-&gt;getAll();\n\n        foreach ($users as $user) {\n            $this-&gt;mailer-&gt;sendMessage(\n                $user-&gt;email,\n                'This is the email body',\n                $user-&gt;name,\n                'info@example.com'\n            );\n        }\n    }\n}<\/code><\/pre>\n<p>Usage:<\/p>\n<pre><code>require __DIR__ . 'vendor\/autoload.php';\n\nuse Demo\\Mailer\\SmtpMailer;\nuse Demo\\Mailer\\SubscriberMailer;\nuse Demo\\Repositories\\UserRepository;\n\n$mailer = new SmtpMailer('smtp.example.com', 'user', 'password', '465');\n\n$subscriberMailer = new SubscriberMailer($mailer, new UserRepository);    \n$subscriberMailer-&gt;sendEmails();<\/code><\/pre>\n<p>Awesome! our <code>SubscriberMailer<\/code> class now does not have any mixed-up logic, it is complete black-box whose task is to send emails to provided users. It doesn't need to care about how you pass <code>MailerInterface<\/code> or <code>UserRepository<\/code>, it just needs them to operate. It has only one task of sending emails. Not to mention that our class is also easy to be unit-tested. Notice also that we removed PDO as dependency since it is now job of <code>UserRepository<\/code> to give us the users.<\/p>\n<p>We can now call our class a <strong>Service<\/strong> that performs one and only one task without any coupling. If you have heard about <strong><a href=\"https:\/\/en.wikipedia.org\/wiki\/Service-oriented_architecture\">Service-Oriented Architecture<\/a><\/strong>, this is what it is, a collection of service classes with one and only one responsibility each without any hard-coded dependencies.<\/p>\n<p>At this point of the time, we are all good with our class but one of the downsides of Dependency Injection is that all the complexity of creating and configuring objects is your job. Now this isn't that bad since it happens at one place and gives you the control but it is something which we can still improve.<\/p>\n<p>To do this, we need to leverage what is called <strong>Dependency Injection Container<\/strong> (DIC). The job of DIC is to create and configure objects for us. There are many DIC out there for PHP but let's see our modified code using famous <strong><a href=\"http:\/\/pimple.sensiolabs.org\/\">Pimple<\/a><\/strong> container, here we wrap the dependencies or services into Pimple container. I am not going into details of how to use it, you should refer to its documentation.<\/p>\n<pre><code>\/\/ file: container.php\n\nuse Demo\\Mailer\\SmtpMailer;\nuse Demo\\Repositories\\UserRepository;\nuse Pimple\\Container;\nuse Demo\\Mailer\\SubscriberMailer;\n\n$container = new Pimple();\n\n\/\/ container can also hold configs - ideally should be put in separate file...\n$container['smtp_config'] = [\n   'host' =&gt; 'smtp.example.com',\n   'user' =&gt; 'user',\n   'pass' =&gt; 'password',\n   'port' =&gt; '465',\n];\n\n$container['mailer'] = $container-&gt;share(function(Pimple $container){\n   return new SmtpMailer(\n      $container['smtp_config']['host'],\n      $container['smtp_config']['user'],\n      $container['smtp_config']['pass'],\n      $container['smtp_config']['port']\n   );\n});\n\n$container['userRepository'] = $container-&gt;share(function(){\n   return new UserRepository();\n});\n\n$container['subscriberMailer'] = $container-&gt;share(function(Pimple $container){\n   return new SubscriberMailer($container['mailer'], $container['userRepository']);\n});\n\n\/\/ file: index.php\n\nrequire __DIR__ . 'vendor\/autoload.php';\nrequire __DIR__ . 'container.php';\n\n$subscriberMailer = $container['subscriberMailer'];\n$subscriberMailer-&gt;sendEmails();<\/code><\/pre>\n<p>Notice how clear and concise our <code>index.php<\/code> code is now compared to initial version. <\/p>\n<p>Using the DIC provides us with these advantages:<\/p>\n<ul>\n<li>Wrapping our object creation in container's anonymous function makes object creation lazy which means object isn't created <em>only until needed<\/em> and if we never reference our <code>SubscriberMailer<\/code> class, those objects are never created at all saving us memory !<\/li>\n<li>Using the container's <code>share<\/code> method means no matter how many times we need, it will always give us same original object instance. If we need to send many emails, we don't need many instances. This also makes code a bit more faster.<\/li>\n<li>All the logic of which objects depend on other objects is abstracted away into container itself, we don't need to worry how they are created or what their dependencies are, we just use our services straight away out of container.<\/li>\n<li>If we ever need to change config or something, we only edit it at one place, nobody needs to know about this change.<\/li>\n<\/ul>\n<hr \/>\n<p>In conclusion, no matter which framework you use, these principles can be applied to make code which is easy to understand, extend and test.<\/p>",
			"savedraft": "savedraft",
			"dated": "August 28, 2016 02:37 PM",
			"slug": "from-bad-to-good-di-dic-and-services",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>In this post, I intend to touch the concepts of:<\/p>\n<ul><li>Dependency Injection (<a href=\"http:\/\/codeinphp.github.io\/post\/dependency-injection-in-php\/\">My previous post on DI<\/a>)<\/li>\n<li>Dependency Injection Container (DIC)<\/li>\n<li>Services<\/li>\n<\/ul><p>Even though these terms seems scary ...<\/p>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Fast MySQL Backup and Restore",
			"tags": [
				"backup",
				"database",
				"mysql",
				"ssh"
			],
			"category": "Random",
			"body": "<p>Backing up and restoring MySQL database is generally trivial task however when database is huge, it is really a pain to do so because of amount of time it takes to perform backup\/restore operation with conventional tools like PHPMyAdmin or similar.<\/p>\n<p>If you have <strong>SSH access<\/strong> to server, we can leverage built-in MySQL commands <a href=\"https:\/\/dev.mysql.com\/doc\/refman\/5.5\/en\/mysqldump.html\"><code>mysqldump<\/code><\/a> and <a href=\"http:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/mysql.html\"><code>mysql<\/code><\/a> respectively to backup and restore big database really fast.<\/p>\n<p><strong>To Backup Database:<\/strong><\/p>\n<p><code>mysqldump -uDB_USER_HERE -pDB_PASSWORD_HERE DATABASE_NAME_HERE &gt; backup.sql<\/code><\/p>\n<p><strong>To Restore Database:<\/strong><\/p>\n<p><code>mysql -uDB_USER_HERE -pDB_PASSWORD_HERE DATABASE_NAME_HERE &lt; backup.sql<\/code><\/p>\n<hr \/>\n<p><strong>Note:<\/strong> If you don't have SSH access, you can use tools like <a href=\"http:\/\/www.mysqldumper.net\/\">MySQLDumper<\/a> which does fairly good job but not as fast as <code>mysqldump<\/code> and <code>mysql<\/code> commands of course.<\/p>",
			"addpost": "addpost",
			"dated": "May 29, 2016 06:57 PM",
			"slug": "fast-mysql-backup-and-restore",
			"categoryslug": "random",
			"status": "publised",
			"summary": "\n<p>Backing up and restoring MySQL database is generally trivial task however when database is huge, it is really a pain to do so because of amount of time it takes to perform backup\/restore operation with conventional tools like PHPMyAdmin or similar.<\/p>\n<p>If you have <strong>SSH access<\/strong> t...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Coding to Interface",
			"tags": [
				"interface",
				"oop",
				"php",
				"polymorphism"
			],
			"category": "PHP",
			"body": "<p>One of the nicest things you can add to your programming skills is <strong>coding to interface<\/strong>. One of the <a href=\"https:\/\/en.wikipedia.org\/wiki\/SOLID_%28object-oriented_design%29\">five principles of S.O.L.I.D<\/a> is <a href=\"https:\/\/en.wikipedia.org\/wiki\/Dependency_inversion_principle\">Dependency inversion principle<\/a> which states:<\/p>\n<blockquote>\n<p>In object-oriented programming, the dependency inversion principle\nrefers to a specific form of decoupling software modules. When\nfollowing this principle, the conventional dependency relationships\nestablished from high-level, policy-setting modules to low-level,\ndependency modules are reversed, thus rendering high-level modules\nindependent of the low-level module implementation details. The\nprinciple states:<a href=\"https:\/\/en.wikipedia.org\/wiki\/SOLID_%28object-oriented_design%29\">1<\/a><\/p>\n<p>A. High-level modules should not depend on low-level modules. Both\nshould depend on abstractions.<\/p>\n<p>B. Abstractions should not depend on details. Details should depend on\nabstractions.<\/p>\n<\/blockquote>\n<p>Pretty <em>formal<\/em> definition hun ? let's understand through example actually.<\/p>\n<p>Imagine we have rudimentary MySQL wrapper class:<\/p>\n<pre><code>class Mysql\n{\n    protected $db = null;\n\n    public function connect($dsn, $user = '', $pass = '')\n    {\n        $this-&gt;db = new PDO($dsn, $user, $pass);\n    }\n\n    public function query($query)\n    {\n        return $this-&gt;db-&gt;query($query);\n    }\n}<\/code><\/pre>\n<p>Pretty common and valid code in old days we used to be proud while writing such class. There are couple of problems associated with it though:<\/p>\n<ul>\n<li>The class <code>Mysql<\/code> has implicit dependency (tight-coupling) on the <code>PDO<\/code> class. All dependencies should always be explicit not implicit.<\/li>\n<li>It is hard to unit-test due to implicit dependency<\/li>\n<\/ul>\n<p>Let's use above class:<\/p>\n<pre><code>class User\n{\n    private $database = null;\n\n    public function __construct()\n    {\n        $this-&gt;database = new Mysql();\n        $this-&gt;database-&gt;connect('mysql:host=localhost;dbname=test', 'root', '');\n    }\n\n    public function getUsers()\n    {\n        $users = $this-&gt;database-&gt;query('SELECT * FROM users ORDER BY id DESC');\n        print_r($users);\n    }\n}\n\n$user = new User();\n$user-&gt;getUsers();<\/code><\/pre>\n<p>Again pretty common piece of code but again this one has even more problems:<\/p>\n<ul>\n<li>The class <code>User<\/code> has implicit dependency (tight-coupling) on the <code>Mysql<\/code> class. All dependencies should always be explicit not implicit.<\/li>\n<li>It is hard to unit-test due to implicit dependency<\/li>\n<li>If we wanted to change database credentials, we need to edit the <code>User<\/code> class which is not good; every class should be completely <strong>modular<\/strong> or black box. If we need to operate further on it, we should actually use its public properties and methods instead of editing it again and again.<\/li>\n<li>Let's assume right now class is using MySQL as database. What if we wanted to use some other type of database ? You will have to modify class.<\/li>\n<li>The <code>User<\/code> class does not necessarily need to know about database connection, it should be confined to its own functionality only. So writing database connection code in <code>User<\/code> class doesn't make it modular. This defeats the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Single_responsibility_principle\">Single responsibility principle<\/a>.<\/li>\n<\/ul>\n<p>You might wonder above code has problems but these days we write code based on MVC design pattern and follow best practices and write <em>modern code<\/em> but I am sure below code is pretty common even today using any framework you use:<\/p>\n<pre><code>class UserController extends Controller\n{\n    public function actionListAllUsers()\n    {          \n       \/\/ fetch all users from database\n        $users = User::model()-&gt;findAll();\n\n       \/\/ show them on screen\n        print_r($users);          \n    }\n}<\/code><\/pre>\n<p>If you analyze this has same problems again in that class <code>UserController<\/code> is tightly coupled (implicit dependency) with <code>User<\/code> model class which also makes it hard to unit-test.<\/p>\n<p>This means:<\/p>\n<blockquote>\n<p>Coupled Code is Evil BIG DOT<\/p>\n<\/blockquote>\n<h2>So what's the solution ?<\/h2>\n<p>The solution is <a href=\"https:\/\/en.wikipedia.org\/wiki\/Dependency_injection\">Dependency Injection<\/a> (see my previous post <a href=\"http:\/\/codeinphp.github.io\/post\/dependency-injection-in-php\/\">Dependency Injection in PHP<\/a>). The idea behind Dependency Injection is that instead of writing implicit dependencies, we should pass\/provide those via constructor or setter method or even interface.<\/p>\n<p>Let's refactor <code>User<\/code> class code and pass our dependency via constructor instead of hard-coding it inside <code>User<\/code> class method:<\/p>\n<pre><code>class User\n{\n    private $database = null;\n\n    public function __construct(Mysql $database)\n    {\n        $this-&gt;database = $database;\n    }\n\n    public function getUsers()\n    {\n        $users = $this-&gt;database-&gt;query('SELECT * FROM users ORDER BY id DESC');\n        print_r($users);\n    }\n}\n\n$database = new Mysql();\n$database-&gt;connect('mysql:host=localhost;dbname=test', 'root', '');\n$user = new User($database);\n$user-&gt;getUsers();<\/code><\/pre>\n<p>This is much better! We no more have implicit dependency on <code>Mysql<\/code> class which also makes our <code>User<\/code> class easier to unit-test. The class makes clear intention that it needs some sort of <code>Mysql<\/code> class. It also doesn't know (or care) where <code>Mysql<\/code> will come form, it just needs one to operate. The <code>User<\/code> class is now completely modular and follows single responsibility principle (that of manipulating users).<\/p>\n<p>In the similar way, we can also improve our modern code:<\/p>\n<pre><code>class UserController extends Controller\n{\n    protected $user;\n\n    public function __construct(User $user)\n    {\n        $this-&gt;user = $user;\n    }\n\n    public function actionListAllUsers()\n    {          \n       \/\/ fetch all users from database\n        $users = $this-&gt;user-&gt;findAll();\n\n       \/\/ show them on screen\n        print_r($users);          \n    }\n}<\/code><\/pre>\n<p>Here again we pass dependency (<code>User<\/code> class) of <code>UserController<\/code> via its constructor making it much better. So all good ? Not really...<\/p>\n<h2>We still have a problem<\/h2>\n<p>One problem with <code>User<\/code> class which still persists is that it is tied to <strong>specific type of database<\/strong> (<code>Mysql<\/code>). What if we wanted to use some other database like Sqlite or SQL Server or some other ? Well this is where <strong>dependency inversion principle<\/strong> comes into play. <\/p>\n<p>To overcome this problem, we need to create an <strong>interface<\/strong> (abstraction or contract - see definition of DIP above) which would allow us to use <em>any database<\/em> with <code>User<\/code> class. Here is our interface that all databases would implement:<\/p>\n<pre><code>interface DB\n{\n    public function connect($dsn, $user = '', $pass = '');\n    public function query($query);\n}<\/code><\/pre>\n<p>Here is <code>Mysql<\/code> class now implementing above interface:<\/p>\n<pre><code>class Mysql implements DB\n{\n    protected $db = null;\n\n    public function connect($dsn, $user = '', $pass = '')\n    {\n        $this-&gt;db = new PDO($dsn, $user, $pass);\n    }\n\n    public function query($query)\n    {\n        return $this-&gt;db-&gt;query($query);\n    }\n}<\/code><\/pre>\n<p>Another database class implementing above interface:<\/p>\n<pre><code>class Sqlite implements DB\n{\n    protected $db = null;\n\n    public function connect($dsn, $user = '', $pass = '')\n    {\n        $this-&gt;db = new PDO($dsn);\n    }\n\n    public function query($query)\n    {\n        return $this-&gt;db-&gt;query($query);\n    }\n}<\/code><\/pre>\n<p>As you can see both <code>Mysql<\/code> and <code>Sqlite<\/code> implement methods imposed by the interface. Finally here is our <code>User<\/code> class:<\/p>\n<pre><code>class User\n{\n    private $database = null;\n\n    public function __construct(DB $database)\n    {\n        $this-&gt;database = $database;\n    }\n\n    public function getUsers()\n    {\n        $users = $this-&gt;database-&gt;query('SELECT * FROM users ORDER BY id DESC');\n        print_r($users);\n    }\n}<\/code><\/pre>\n<p>Notice that in constructor of above class, we are now passing interface rather than specific type of database.<\/p>\n<p>Now we can use any database for the <code>User<\/code> class, here is example of <code>Mysql<\/code>:<\/p>\n<pre><code>$database = new Mysql();\n$database-&gt;connect('mysql:host=localhost;dbname=test', 'root', '');\n$user = new User($database);\n$user-&gt;getUsers();<\/code><\/pre>\n<p>And example of <code>Sqlite<\/code> database class:<\/p>\n<pre><code>$database = new Sqlite();\n$database-&gt;connect('sqlite:database.sqlite');\n$user = new User($database);\n$user-&gt;getUsers();<\/code><\/pre>\n<p>Amazing! we can now readily change database to be used with our <code>User<\/code> class, our <code>User<\/code> class is much more flexible by following the dependency inversion principle. If client requires to use some other database, no problem we implement one and specify to <code>User<\/code> class in similar fashion!<\/p>\n<p>As you can see we took basic and common example of code and converted it into re-usable, flexible, modular and testable piece of code. <\/p>\n<p>You might want to read more about <a href=\"https:\/\/en.wikipedia.org\/wiki\/SOLID_%28object-oriented_design%29\">S.O.L.I.D principles<\/a> to write pleasant code and as bonus avoid <a href=\"http:\/\/williamdurand.fr\/2013\/07\/30\/from-stupid-to-solid-code\/\">S.T.U.P.I.D<\/a> code.<\/p>",
			"savedraft": "savedraft",
			"dated": "December 28, 2015 11:45 PM",
			"slug": "coding-to-interface",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>One of the nicest things you can add to your programming skills is <strong>coding to interface<\/strong>. One of the <a href=\"https:\/\/en.wikipedia.org\/wiki\/SOLID_%28object-oriented_design%29\">five principles of S.O.L.I.D<\/a> is <a href=\"https:\/\/en.wikipedia.org\/wiki\/Dependency_inversion_principle\" ...><\/a><\/p>\n",
			"addpost": "addpost",
			"prevStatus": "draft",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Introducing Phexecute - PHP Code Runner",
			"tags": [
				"php",
				"runner",
				"tester"
			],
			"category": "PHP",
			"body": "<p>Some time ago I had <a href=\"http:\/\/codeinphp.github.io\/post\/phpexecute-php-code-runner\/\">posted about PHPExecute<\/a> which is PHP code runner \/ tester. The purpose of PHPExecute was to quickly test some PHP code and save snippets for later use. PHPExecute was very basic, I always wanted to have ability to write tests, store unlimited snippets, check coding conventions based on PSR2 but I actually never updated it to implement those features. Last weekend I sat down and wrote <strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/Phexecute\">Phexecute<\/a><\/strong> , it supersedes PHPExecute. <\/p>\n<p>Phexecute has these features:<\/p>\n<ul>\n<li>PHP Code_Sniffer to easily identify and fix problematic parts of code (through PSR-2)<\/li>\n<li>Run PHPUnit tests and see results right inside browser<\/li>\n<li>Run SimpleTest tests<\/li>\n<li>Uses Symfony VarDumper component easy visualization of vars, arrays, objects<\/li>\n<li>Ability to save unlimited snippets<\/li>\n<li>Live PHP error highlighting<\/li>\n<li>Easy to extend<\/li>\n<\/ul>\n<h2>Screenshots<\/h2>\n<p>Main Screen<\/p>\n<p><img src=\"https:\/\/raw.github.com\/sarfraznawaz2005\/phexecute\/master\/screenshots\/main.png\" alt=\"Main Window\" \/><\/p>\n<p>PHP Code_Sniffer Results<\/p>\n<p><img src=\"https:\/\/raw.github.com\/sarfraznawaz2005\/phexecute\/master\/screenshots\/codesniffer.png\" alt=\"CodeSniffer Window\" \/><\/p>\n<p>PHPUnit Results<\/p>\n<p><img src=\"https:\/\/raw.github.com\/sarfraznawaz2005\/phexecute\/master\/screenshots\/phpunit.png\" alt=\"PHPUnit Window\" \/><\/p>\n<p>SimpleTest Results<\/p>\n<p><img src=\"https:\/\/raw.github.com\/sarfraznawaz2005\/phexecute\/master\/screenshots\/simpletest.png\" alt=\"SimpleTest Window\" \/><\/p>\n<hr \/>\n<p><a href=\"https:\/\/github.com\/sarfraznawaz2005\/Phexecute\">Checkout Phexecute on Github<\/a><\/p>",
			"addpost": "addpost",
			"dated": "May 25, 2015 01:04 PM",
			"slug": "introducing-phexecute-php-code-runner",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>Some time ago I had <a href=\"http:\/\/codeinphp.github.io\/post\/phpexecute-php-code-runner\/\">posted about PHPExecute<\/a> which is PHP code runner \/ tester. The purpose of PHPExecute was to quickly test some PHP code and save snippets for later use. PHPExecute was very basic, I always wanted to have ...<\/p>\n",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Slim3 Skeleton",
			"tags": [
				"github",
				"php",
				"slim"
			],
			"category": "PHP",
			"body": "<p>I needed to start working on some personal project which essentially isn't going to be that big. For this I was looking for light framework so I looked into <a href=\"http:\/\/silex.sensiolabs.org\/\">Silex<\/a>, <a href=\"http:\/\/lumen.laravel.com\/\">Lumen<\/a> and <a href=\"http:\/\/www.slimframework.com\/\">Slim<\/a>. Even though all of them do good job I however chose Slim3 to go with.<\/p>\n<p>I had downloaded and started <em>configuring<\/em> Slim for my needs but then I saw a <a href=\"http:\/\/akrabat.com\/a-slim3-skeleton\/\">post by Rob Allen<\/a> he posted yesterday mentioning that he has created Slim 3 skeleton. It was good because he already had put together all the goodies I needed:<\/p>\n<ul>\n<li>Built-in Dependency Injection Container (Slim uses Pimple DIC)<\/li>\n<li>Monolog<\/li>\n<li>Ability to inject middlewares<\/li>\n<li>Twig templating engine<\/li>\n<li>Dependency-Aware Controllers<\/li>\n<\/ul>\n<p>It provided good base to start with. I modified his skeleton a bit:<\/p>\n<ul>\n<li>Added <a href=\"http:\/\/tracy.nette.org\/en\/\">Tracy PHP debugger<\/a><\/li>\n<li>Added nice-looking interface<\/li>\n<li>Created Twig templates with partials<\/li>\n<li>Modified folder structure a bit so that both frontend and backend assets can easily be added and used<\/li>\n<\/ul>\n<p>This now allows me to easily start working on my project.<\/p>\n<hr \/>\n<p>Here is screenshot of default page of Slim 3 skeleton I created:<\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/1432042531555b3c238f08c.png\" alt=\"slim-skeleton\" \/><\/p>\n<hr \/>\n<p><strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/slim3-skeleton\">Slim 3 Skeleton on Github<\/a><\/strong><\/p>",
			"addpost": "addpost",
			"dated": "May 19, 2015 06:57 PM",
			"slug": "slim3-skeleton",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>I needed to start working on some personal project which essentially isn't going to be that big. For this I was looking for light framework so I looked into <a href=\"http:\/\/silex.sensiolabs.org\/\">Silex<\/a>, <a href=\"http:\/\/lumen.laravel.com\/\">Lumen<\/a> and <a href=\"http:\/\/www.slimframework.com\/\">...<\/a><\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Singleton and Multiton Design Patterns",
			"tags": [
				"design-pattern",
				"singleton"
			],
			"category": "Design Patterns",
			"body": "<h2>Singleton<\/h2>\n<p>One of the simplest design patterns is the Singleton. The purpose of Singleton design pattern is to always have a <strong>single<\/strong> instance of a some class. Singletons are usually used for things you don't necessarily need multiple instances of such as database or logging or similar. You always work with same instance of a singleton object.<\/p>\n<p>This is how you create a singleton:<\/p>\n<pre><code>class MySingleton\n{\n    public static function getInstance()\n    {\n        static $instance;\n\n        if (null === $instance) {\n            $instance = new self();\n        }\n\n        return $instance;\n    }\n\n    \/\/ prevent creating multiple instances due to \"private\" constructor\n    private function __construct(){}\n\n    \/\/ prevent the instance from being cloned\n    private function __clone(){}\n\n    \/\/ prevent from being unserialized\n    private function __wakeup(){}\n}<\/code><\/pre>\n<p>Usage:<\/p>\n<pre><code>$instance = MySingleton::getInstance();<\/code><\/pre>\n<p>Following the same pattern, you can create your own singletons and add any necessary functionality you want. The <strong>main<\/strong> trick here is that we have made the constructor <code>private<\/code> which is what disallows creation of multiple instances of singleton class.<\/p>\n<p>It is important to point out that Singleton design pattern is considered anti-pattern (and more so in the world of PHP) because of following reasons:<\/p>\n<ul>\n<li>Singletons create global state which is bad; they create tight-coupling<\/li>\n<li>Singletons are essentially class-oriented not object-oriented<\/li>\n<li>We cannot tell what dependencies it contains, it hides logic<\/li>\n<li>Because you cannot create multiple instances, you cannot easily test them<\/li>\n<li>PHP runs on <a href=\"http:\/\/en.wikipedia.org\/wiki\/Shared_nothing_architecture\">shared nothing architecture<\/a> which essentially means unlike other languages like Java\/.Net, life of a PHP application is just one http request which is why singletons do not make <em>much<\/em> sense in PHP<\/li>\n<\/ul>\n<p>Having said that, many argue that you can at least use singletons for single-nature things like an instance of database or logging (though it is matter of personal preference on how you design database or logging stuff)  while others avoid singletons completely (especially <em><a href=\"http:\/\/en.wikipedia.org\/wiki\/Test-driven_development\">TDD Worshipers<\/a><\/em>).<\/p>\n<p>That's all there is to a singleton.<\/p>\n<h2>Multiton<\/h2>\n<p>As the name suggests, a multiton is a design pattern that helps you create multiple instances of itself. Both singleton and multiton are same, the only difference is that a multiton can store and retrieve <em>multiple<\/em> instances of itself. Obviously multiton suffers from same problems as singletons.<\/p>\n<p>Here is example of multiton:<\/p>\n<pre><code>class Logger\n{\n    private static $instances = array();\n\n    public static function getInstance($key)\n    {\n        if(!array_key_exists($key, self::$instances)) {\n            self::$instances[$key] = new self();\n        }\n\n        return self::$instances[$key];\n    }\n\n    \/\/ prevent creating multiple instances due to \"private\" constructor\n    private function __construct(){}\n\n    \/\/ prevent the instance from being cloned\n    private function __clone(){}\n\n    \/\/ prevent from being unserialized\n    private function __wakeup(){}\n}<\/code><\/pre>\n<p>Usage:<\/p>\n<pre><code>$firstInstance = Logger::getInstance('file');\n$secondInstance = Logger::getInstance('email');<\/code><\/pre>",
			"savedraft": "savedraft",
			"dated": "May 16, 2015 05:21 PM",
			"slug": "singleton-and-multiton-design-patterns",
			"categoryslug": "design-patterns",
			"status": "publised",
			"summary": "\n<h2>Singleton<\/h2>\n<p>One of the simplest design patterns is the Singleton. The purpose of Singleton design pattern is to always have a <strong>single<\/strong> instance of a some class. Singletons are usually used for things you don't necessarily need multiple instances of such as database or loggin...<\/p>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Factory Design Pattern",
			"tags": [
				"design-pattern"
			],
			"category": "Design Patterns",
			"body": "<h2>Overview<\/h2>\n<p>Factory design pattern works like a factory in the real world in that it creates something for others to use. In the context of OOP, it helps in creating and instantiating objects. <\/p>\n<h2>Example<\/h2>\n<p>Let's say for our application we are using different types of databases based on requirement such as MySQL, PostgreSQL, and SQLite. Our classes look like this:<\/p>\n<p>MySQL:<\/p>\n<pre><code>class MySQLDB\n{\n    public function setHost($host)\n    {\n        \/\/ code\n    }\n    public function setDB($db)\n    {\n        \/\/ code\n    }\n    public function setUserName($user)\n    {\n        \/\/ code\n    }\n    public function setPassword($pwd)\n    {\n        \/\/ code\n    }\n    public function connect()\n    {\n        \/\/ code\n    }\n}<\/code><\/pre>\n<p>PostgreSQL:<\/p>\n<pre><code>class PostgreSQLDB\n{\n    public function setHost($host)\n    {\n        \/\/ code\n    }\n    public function setDB($db)\n    {\n        \/\/ code\n    }\n    public function setUserName($user)\n    {\n        \/\/ code\n    }\n    public function setPassword($pwd)\n    {\n        \/\/ code\n    }\n    public function connect()\n    {\n        \/\/ code\n    }\n}<\/code><\/pre>\n<p>...and so on for SQLite database.<\/p>\n<p>Then we instantiate different objects based on configuration:<\/p>\n<pre><code>if (Config::item('db_type') === 'mysql') {\n    $DB = new MySQLDB();\n    $DB-&gt;setHost(\"host\");\n    $DB-&gt;setDB(\"db\");\n    $DB-&gt;setUserName(\"user\");\n    $DB-&gt;setPassword(\"pwd\");\n    $DB-&gt;connect();\n}\nelseif (Config::item('db_type') === 'postgre') {\n    $DB = new PostgreSQLDB();\n    $DB-&gt;setHost(\"host\");\n    $DB-&gt;setDB(\"db\");\n    $DB-&gt;setUserName(\"user\");\n    $DB-&gt;setPassword(\"pwd\");\n    $DB-&gt;connect();\n}\nelseif (Config::item('db_type') === 'sqlite') {\n    $DB = new SQLiteDB();\n    $DB-&gt;setHost(\"host\");\n    $DB-&gt;setDB(\"db\");\n    $DB-&gt;setUserName(\"user\");\n    $DB-&gt;setPassword(\"pwd\");\n    $DB-&gt;connect();\n}<\/code><\/pre>\n<p>Generally above works but it creates problems in rather big applications. Above code has these problems:<\/p>\n<ul>\n<li>Should you add more database types, code would keep on growing making it complex<\/li>\n<li>The code is hard coded with database type names<\/li>\n<li>Whole process becomes tedious<\/li>\n<\/ul>\n<p>To solve these issues, we can instead create a central factory object that would create those objects for us:<\/p>\n<pre><code>class DBFactory\n{\n    protected $driver = null;\n\n    public function setDriver($driver)\n    {\n        $this-&gt;driver = $driver;\n    }\n\n    public function makeDB($host, $user, $pass, $dbname)\n    {\n        if ($this-&gt;driver === 'mysql') {\n            $DB = new MySQLDB();\n        }\n        elseif ($this-&gt;driver === 'postgre') {\n            $DB = new PostgreSQLDB();\n        }\n        elseif ($this-&gt;driver === 'sqlite') {\n            $DB = new SQLiteDB();\n        }\n\n        $DB-&gt;setHost($host);\n        $DB-&gt;setDB($dbname);\n        $DB-&gt;setUserName($user);\n        $DB-&gt;setPassword($pass);\n        $DB-&gt;connect();\n\n        return $DB;\n    }\n}<\/code><\/pre>\n<p>And then using it:<\/p>\n<pre><code>$dbFactory = new DBFactory;\n$dbFactory-&gt;setDriver(Config::item('db_type'));\n$DB = $dbFactory-&gt;makeDB(\"host\", \"db\", \"user\", \"pwd\");<\/code><\/pre>\n<p>And that's it. You won't have to modify above code, it will always remain same, we have moved the complex object creation logic separate in the factory itself which now makes our code a lot more easier to work with. <\/p>\n<p>Please notice that there are some variations of factory design pattern such as <code>simple factory<\/code>, <code>abstract factory<\/code> and <code>factory method<\/code>. In this example, we used the <code>factory method<\/code> eg we used a <em>method<\/em> named <code>makeDB()<\/code> to create our objects. Other variations are almost similar; for example with <code>abstract factory<\/code>, you actually create an abstract class and then all concrete classes should extend it. It just enforces commonality between similar concrete classes.<\/p>\n<blockquote>\n<p><strong>Note:<\/strong> In modern day, the object creation has become very simple with the help of <a href=\"http:\/\/ralphschindler.com\/2012\/10\/10\/di-dic-service-locator-redux\">Dependency Injection Containers and Service\nLocators<\/a>. There are quite some <a href=\"http:\/\/www.sitepoint.com\/php-dependency-injection-container-performance-benchmarks\/\">DICs to choose from for PHP<\/a>.<\/p>\n<\/blockquote>",
			"addpost": "addpost",
			"dated": "May 15, 2015 12:29 AM",
			"slug": "factory-design-pattern",
			"categoryslug": "design-patterns",
			"status": "publised",
			"summary": "\n<h2>Overview<\/h2>\n<p>Factory design pattern works like a factory in the real world in that it creates something for others to use. In the context of OOP, it helps in creating and instantiating objects. <\/p>\n<h2>Example<\/h2>\n<p>Let's say for our application we are using different types of databases b...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Quick Learning Resources via StackOverflow",
			"tags": [
				"stackoverflow"
			],
			"category": "Random",
			"body": "<p>Did you know that you that other than asking questions and answering, you can also use StackOverflow to find very useful information and learning resources for certain language or technology? Do you want to get started with some new programming language or technology ? StackOverflow can help you get started.<\/p>\n<p>StackOverflow can help you get started by providing you with information such as history of some language\/technology, books, references, commonly asked questions and tools, videos and more. Here is the format of the URL you can go to and find out useful information about certain language or technology:<\/p>\n<p><code>http:\/\/stackoverflow.com\/tags\/TECHNOLOGY\/info<\/code><\/p>\n<p>In above URL, replace <code>TECHNOLOGY<\/code> with what you want to learn about such as <code>javascript<\/code>, <code>php<\/code>, <code>.net<\/code>, etc<\/p>\n<p>Here are few examples:<\/p>\n<ul>\n<li><a href=\"http:\/\/stackoverflow.com\/tags\/language-agnostic\/info\">http:\/\/stackoverflow.com\/tags\/language-agnostic\/info<\/a><\/li>\n<li><a href=\"http:\/\/stackoverflow.com\/tags\/javascript\/info\">http:\/\/stackoverflow.com\/tags\/javascript\/info<\/a><\/li>\n<li><a href=\"http:\/\/stackoverflow.com\/tags\/php\/info\">http:\/\/stackoverflow.com\/tags\/php\/info<\/a><\/li>\n<li><a href=\"http:\/\/stackoverflow.com\/tags\/.net\/info\">http:\/\/stackoverflow.com\/tags\/.net\/info<\/a><\/li>\n<li><a href=\"http:\/\/stackoverflow.com\/tags\/node.js\/info\">http:\/\/stackoverflow.com\/tags\/node.js\/info<\/a><\/li>\n<li><a href=\"http:\/\/stackoverflow.com\/tags\/java\/info\">http:\/\/stackoverflow.com\/tags\/java\/info<\/a><\/li>\n<li><a href=\"http:\/\/stackoverflow.com\/tags\/android\/info\">http:\/\/stackoverflow.com\/tags\/android\/info<\/a><\/li>\n<li><a href=\"http:\/\/stackoverflow.com\/tags\/iphone\/info\">http:\/\/stackoverflow.com\/tags\/iphone\/info<\/a><\/li>\n<li><a href=\"http:\/\/stackoverflow.com\/tags\/bash\/info\">http:\/\/stackoverflow.com\/tags\/bash\/info<\/a><\/li>\n<\/ul>\n<p>Of course, you can replace tag in above URL from <a href=\"http:\/\/stackoverflow.com\/tags\">various tags to choose from<\/a>.<\/p>",
			"addpost": "addpost",
			"dated": "May 14, 2015 10:25 PM",
			"slug": "quick-learning-resources-via-stackoverflow",
			"categoryslug": "random",
			"status": "publised",
			"summary": "\n<p>Did you know that you that other than asking questions and answering, you can also use StackOverflow to find very useful information and learning resources for certain language or technology? Do you want to get started with some new programming language or technology ? StackOverflow can help you ...<\/p>\n",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Creating Your Own Artisan in PHP",
			"tags": [
				"console",
				"laravel",
				"php"
			],
			"category": "PHP",
			"body": "<p>This post is basic tutorial of how you can create your own command line tool. I will try to explain things step by step so things are easily understood.<\/p>\n<p>When I first saw Laravel framework, I really liked its Artisan console tool, it seemed like magic providing us with a bunch of stuff we could do with it such as creating MVC triads, running migrations and a lot more. Although similar concepts already existed in frameworks like CakePHP but Laravel did good job of making us realize how useful a console app can be and that we can use it beyond basic CRUD operations.<\/p>\n<p>To create a console app, we can use <a href=\"http:\/\/symfony.com\/doc\/current\/components\/console\/introduction.html\">Symfony's console component<\/a> and in fact Laravel also uses the same. We could also use <a href=\"https:\/\/github.com\/auraphp\/Aura.Cli\">Aura.Cli<\/a> from AuraPHP but for this post, we will stick with one provided by Symfony.<\/p>\n<h2>Installing Symfony Console Component<\/h2>\n<p>The easiest way to install it is via composer. Create a new folder in your document root named <strong>consoleApp<\/strong> and inside it create <strong>composer.json<\/strong> file with these contents:<\/p>\n<pre><code>{\n    \"require\" :{\n        \"symfony\/console\": \"2.6.7\"\n    }\n}<\/code><\/pre>\n<p>and then run <code>composer install<\/code> command in newly created folder from your cli application. After some while you should have <strong>vendor<\/strong> directory created. <\/p>\n<h2>Creating Our First Command<\/h2>\n<p>A command is something that performs an specific task. For example, in Laravel's artisan tool, you can type this:<\/p>\n<pre><code>&gt; php artisan app:name yourAppName<\/code><\/pre>\n<p>Here <code>app:name<\/code> is a command that can changes namespace of your Laravel application. Here is also breakdown of above line:<\/p>\n<ul>\n<li><code>php<\/code> - php executable (php.exe). This assumes you have already added php.exe in your <code>PATH<\/code> enviroment variable in your system<\/li>\n<li><code>artisan<\/code> - The name of the console application<\/li>\n<li><code>app:name<\/code> - The name of the command that will be run<\/li>\n<li><code>yourAppName<\/code> is an argument to the <code>app:name<\/code> command<\/li>\n<\/ul>\n<p>Create a <strong>Commands<\/strong> folder in root of application, this will contain all our commands for the console app we will be creating. Also create empty file called <strong>app<\/strong> (without extension) either by using editor of your choice or running this command via your cli in app root folder <code>touch app<\/code>. The folder structure should now look like this:<\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/1431513018555327ba67b95.png\" alt=\"enter image description here\" \/><\/p>\n<p>Open app <code>app<\/code> file in editor of your choice and paste this line in it:<\/p>\n<pre><code>#!\/usr\/bin\/env php<\/code><\/pre>\n<p>This tells the system that is a php env file and should be run by php executable. You may need to apply <em>execute<\/em> permission on this file if you are on Linux.<\/p>\n<p>Next, let's include our dependencies through composer's autoload feature, so add this line:<\/p>\n<pre><code>require __DIR__ . '\/vendor\/autoload.php';<\/code><\/pre>\n<p>This will automatically include our dependencies which in this case is Symfony Console Component.<\/p>\n<p>By now <code>app<\/code> file should have these contents:<\/p>\n<pre><code>#!\/usr\/bin\/env php\n&lt;?php\nrequire __DIR__ . '\/vendor\/autoload.php';<\/code><\/pre>\n<p>Before we edit this file further, let's first create our command which will basically be a <code>Greet<\/code> command. Our commands will essentially be class files therefore inside Commands directory that we created earlier, create a file called <code>GreetCommand.php<\/code>. <\/p>\n<p>The Symfony Console Component requires that we should extend it and provide at least two methods called <code>configure()<\/code> and <code>execute()<\/code>. As the names suggest, the <code>configure()<\/code> method can be used to configure our command such as what command will be called, what arguments and options it will accept and the <code>execute()<\/code> command will actually execute our command.<\/p>\n<p>In <code>GreetCommand.php<\/code> file, paste in these contents:<\/p>\n<pre><code>&lt;?php\nuse Symfony\\Component\\Console\\Command\\Command;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\nclass GreetCommand extends Command\n{\n    protected $commandName = 'app:greet';\n    protected $commandDescription = \"Greets Someone\";\n\n    protected $commandArgumentName = \"name\";\n    protected $commandArgumentDescription = \"Who do you want to greet?\";\n\n    protected $commandOptionName = \"cap\"; \/\/ should be specified like \"app:greet John --cap\"\n    protected $commandOptionDescription = 'If set, it will greet in uppercase letters';    \n\n    protected function configure()\n    {\n        $this\n            -&gt;setName($this-&gt;commandName)\n            -&gt;setDescription($this-&gt;commandDescription)\n            -&gt;addArgument(\n                $this-&gt;commandArgumentName,\n                InputArgument::OPTIONAL,\n                $this-&gt;commandArgumentDescription\n            )\n            -&gt;addOption(\n               $this-&gt;commandOptionName,\n               null,\n               InputOption::VALUE_NONE,\n               $this-&gt;commandOptionDescription\n            )\n        ;\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $name = $input-&gt;getArgument($this-&gt;commandArgumentName);\n\n        if ($name) {\n            $text = 'Hello '.$name;\n        } else {\n            $text = 'Hello';\n        }\n\n        if ($input-&gt;getOption($this-&gt;commandOptionName)) {\n            $text = strtoupper($text);\n        }\n\n        $output-&gt;writeln($text);\n    }\n}<\/code><\/pre>\n<p>The code is pretty much self-explanatory:<\/p>\n<ul>\n<li><code>$commandName<\/code> is the name of our command<\/li>\n<li><code>$commandDescription<\/code> is description\/help text for our command<\/li>\n<li><code>$commandArgumentName<\/code> is argument name of our command<\/li>\n<li><code>$commandOptionName<\/code> is option name of our command. The difference between argument and option is that an option is optional one unlike argument and can be specified with <code>--optionName<\/code>.<\/li>\n<li>Inside <code>configure()<\/code> method, we can easily understand how we set command name, argument and options. <\/li>\n<li>Inside <code>execute()<\/code> method, we get argument and check to see if it is set. If set, we say <code>Hello Name<\/code> otherwise we simply say <code>Hello<\/code>. Then we check if option is provided and if so we upper case it and finally output the result.<\/li>\n<\/ul>\n<p>Now finally let's tell Symfony Console Component to use our command we just created. Modify <code>app<\/code> file so it looks like this:<\/p>\n<pre><code>#!\/usr\/bin\/env php\n&lt;?php\nrequire __DIR__ . '\/vendor\/autoload.php';\n\nuse Symfony\\Component\\Console\\Application;\n\n$application = new Application();\n\n# add our commands\n$application-&gt;add(new GreetCommand());\n\n$application-&gt;run();<\/code><\/pre>\n<p>Let's test our command. Open your cli app and point it to our app root and run this command:<\/p>\n<pre><code>&gt; php app app:greet John<\/code><\/pre>\n<p>That should result in error that <code>GreetCommand.php<\/code> flle was not found. Let's tell composer to automatically include our commands from <strong>Commands<\/strong> folder. Edit composer.json file so it looks like this:<\/p>\n<pre><code>{\n  \"require\": {\n    \"symfony\/console\": \"2.6.7\"\n  },\n  \"autoload\": {\n    \"classmap\": [\"Commands\"]\n  }\n}<\/code><\/pre>\n<p>and then type <code>composer dump -o<\/code> from your cli app. Now run our command again:<\/p>\n<pre><code>&gt; php app app:greet John<\/code><\/pre>\n<p>and you should see <code>Hello John<\/code>. Type:<\/p>\n<pre><code>&gt; php app app:greet John --cap<\/code><\/pre>\n<p>and you should see <code>HELLO JOHN<\/code>.<\/p>\n<p>Here we named our console file <code>app<\/code> but if you rename it to <code>artisan<\/code> and then run above commands replacing <code>app<\/code> with <code>artisan<\/code>, you will have your own artisan tool, funny enough :)<\/p>\n<p>Of course, you can now add any commands you want to your new console app. You can even run composer or git commands through your new console app or may be some deployment\/build scripts or even system commands. If you are using some MVC framework, you can use this tool to for example create your own way of creating controllers, entity classes, run your custom migrations, call methods from your controllers and more.<\/p>\n<p>If you want to see how Laravel does it all, you can take a look inside this folder and see how those commands are created:<\/p>\n<p><code>vendor\/laravel\/framework\/src\/Illuminate\/Foundation\/Console<\/code> <\/p>\n<p>I am currently working on a project powered by CodeIgniter (and it doesn't have built-in console app as you know) and I have created quite some commands that have really helped me speed up my development time where I do a host of different things via my console app.<\/p>\n<p>Have fun with your artisan tool :)<\/p>",
			"savedraft": "savedraft",
			"dated": "May 13, 2015 04:28 PM",
			"slug": "creating-your-own-artisan-in-php",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>This post is basic tutorial of how you can create your own command line tool. I will try to explain things step by step so things are easily understood.<\/p>\n<p>When I first saw Laravel framework, I really liked its Artisan console tool, it seemed like magic providing us with a bunch of stuff we c...<\/p>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Adapter Design Pattern",
			"tags": [
				"adapter",
				"design-pattern"
			],
			"category": "Design Patterns",
			"body": "<h2>Overview<\/h2>\n<p>The adapter design pattern as the name suggests is like real life adapter that converts one thing into some other one. Similarly, it can help us wrap functionality of some object into adapter providing us with consistent methods\/API to work with. Understanding through an example is always the best way to learn.<\/p>\n<h2>Example<\/h2>\n<p>Suppose you have developed a website where client has asked you to allow users to post status updates on the Facebook. In order to to that, we use Facebook PHP client library which looks something like this:<\/p>\n<pre><code>class Facebook {    \n    public function getUserToken($userId) {\n        \/\/ code to get user token\n    }\n\n    public function postUpdate($message) {\n        \/\/ code to post status update\n    }\n}<\/code><\/pre>\n<p>And then you use it to post updates on Facebook:<\/p>\n<pre><code>$statusUpdate = new Facebook;\n$statusUpdate-&gt;getUserToken($someUserId);\n$statusUpdate-&gt;postUpdate('some message');<\/code><\/pre>\n<p>Now let's assume suddenly client requires that instead of Facebook, he wants users to post updates on Twitter and Twitter's PHP client library looks like this:<\/p>\n<pre><code>class Twitter {    \n    public function checkUserToken($userId) {\n        \/\/ code to get user token\n    }\n\n    public function setStatusUpdate($message) {\n        \/\/ code to post status update\n    }\n}<\/code><\/pre>\n<p>And here is the problem. We can see that Twitter's library has different method names which means we will have to modify code everywhere where we are using status updates. At this point, as developer, we should also not overrule the fact that client may again ask to use Facebook again or may be some other service to allow users to post status update but we don't want to change our code again and again.<\/p>\n<p>So how do we make sure that:<\/p>\n<ul>\n<li>We should be able to add any new service easily when client asks<\/li>\n<li>We should be able to not modify code again and again, same code should post status updates without modifying it<\/li>\n<\/ul>\n<p>This is where Adapter pattern comes out to be as life saver. In order to implement that, we first set rules\/interface that all status update service should follow so let's create one:<\/p>\n<pre><code>interface iStatusUpdate {\n    function getUserToken($userId);\n    function postUpdate($message);\n}<\/code><\/pre>\n<p>Now we create our Twitter adapter class:<\/p>\n<pre><code>class TwitterAdapter implements iStatusUpdate {\n\n    protected $twitter;\n\n    public function __construct(Twitter $twitter){\n        $this-&gt;twitter = $twitter;\n    }\n\n    public function getUserToken($userId) {\n        $this-&gt;twitter-&gt;checkUserToken($userId);\n    }\n\n    public function postUpdate($message) {\n        $this-&gt;twitter-&gt;setStatusUpdate($message);\n    }\n}<\/code><\/pre>\n<p>Notice how we have passed <code>Twitter<\/code> object via the constructor. Of course we could have used setter or interface injection as well. <\/p>\n<p>We can see that we now have same method names for Facebook and Twitter which means we won't have to modify much code in our codebase where we need to post status updates for users. Now all we need to do is to use our new adapter class providing it with actual Twitter object:<\/p>\n<pre><code>$statusUpdate = new TwitterAdapter(new Twitter);\n$statusUpdate-&gt;getUserToken($someUserId);\n$statusUpdate-&gt;postUpdate('some message');<\/code><\/pre>\n<p>As can be we have added a line or couple but most of status update code remains same, thanks to adapter pattern. We as developers should foresee such changes client may require in which case we would have created adapter class even for our first Facebook service and then we didn't need to modify even a single line of code.<\/p>\n<p>Okay, client asks some other service to use, no problem:<\/p>\n<pre><code>class SomeOtherServiceAdapter implements iStatusUpdate {\n\n    protected $otherService;\n\n    public function __construct(SomeOtherService $otherService){\n        $this-&gt;otherService = $otherService;\n    }\n\n    public function getUserToken($userId) {\n        $this-&gt;otherService-&gt;authenticate($userId);\n    }\n\n    public function postUpdate($message) {\n        $this-&gt;otherService-&gt;postMessage($message);\n    }\n}<\/code><\/pre>\n<p>And then:<\/p>\n<pre><code>$statusUpdate = new SomeOtherServiceAdapter(new SomeOtherService);\n$statusUpdate-&gt;getUserToken($someUserId);\n$statusUpdate-&gt;postUpdate('some message');<\/code><\/pre>\n<p>Again most of the code remains same. <\/p>\n<p>So these simple examples show how useful and time-saver adapter pattern is. It provides us with consistent API to work with and allows us to use new services easily.<\/p>",
			"addpost": "addpost",
			"dated": "May 11, 2015 02:20 PM",
			"slug": "adapter-design-pattern",
			"categoryslug": "design-patterns",
			"status": "publised",
			"summary": "\n<h2>Overview<\/h2>\n<p>The adapter design pattern as the name suggests is like real life adapter that converts one thing into some other one. Similarly, it can help us wrap functionality of some object into adapter providing us with consistent methods\/API to work with. Understanding through an example...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Strategy Design Pattern",
			"tags": [
				"strategy",
				"design-pattern"
			],
			"category": "Design Patterns",
			"body": "<p>In this post, we will explore what strategy design pattern is and what problems does it solve but first, what is a design pattern ? Here is how Wikipedia defines it:<\/p>\n<blockquote>\n<p>In software engineering, a design pattern is a general <strong>reusable\nsolution<\/strong> to a <strong>commonly occurring problem<\/strong> within a given context in\nsoftware design.<\/p>\n<\/blockquote>\n<p>So a design pattern is nothing but a <strong>re-usable solution towards commonly occurring problems<\/strong> you may face while programming.<\/p>\n<h2>Overview<\/h2>\n<p>One of the common problems we face in programming is to make decisions based on <em>different conditions\/inputs.<\/em> <\/p>\n<p>Let's say we have created a framework of our own and we want to be able to allow users to choose <em>different<\/em> types of logging methods such as logging to file, database or email.<\/p>\n<h2>Example<\/h2>\n<p>First, we create our logger classes for the framework that implement common interface:<\/p>\n<pre><code>interface InterfaceLogger {\n    function log($message);\n}\n\nclass FileLogger implements InterfaceLogger {\n    public function log($message) {\n        \/\/ code to write logging information to file system\n    }   \n}\n\nclass DatabaseLogger implements InterfaceLogger {\n    public function log($message) {\n        \/\/ code to write logging information to database\n    }   \n}\n\nclass EmailLogger implements InterfaceLogger {\n    public function log($message) {\n        \/\/ code to write logging information to email\n    }   \n}<\/code><\/pre>\n<p>Let's assume users of our framework are allowed to choose an specific logger through some configuration file by typing <code>file<\/code>, <code>database<\/code> or <code>email<\/code> and our framework is able to know it:<\/p>\n<pre><code>$loggerType = App::getConfig('logger');<\/code><\/pre>\n<p>Now we can easily find out which logger to use using strategy design pattern:<\/p>\n<pre><code>switch($loggerType) {\n    case \"file\":\n        $logger = new FileLogger();\n        break;\n    case \"database\":\n        $logger = new DatabaseLogger();\n        break;\n    case \"email\":\n        $logger = new EmailLogger();\n        break;\n    default:\n        $logger = new FileLogger();\n}<\/code><\/pre>\n<p>And then throughout our framework, we can use <code>$logger-&gt;log()<\/code> method which would automatically know which logger type to use.<\/p>\n<p>As you might have noticed, strategy pattern is very simple one and we might have written similar code a number of times before albeit without realizing it is actually some design pattern.<\/p>",
			"addpost": "addpost",
			"dated": "May 10, 2015 05:40 PM",
			"slug": "strategy-design-pattern",
			"categoryslug": "design-patterns",
			"status": "publised",
			"summary": "\n<p>In this post, we will explore what strategy design pattern is and what problems does it solve but first, what is a design pattern ? Here is how Wikipedia defines it:<\/p>\n<blockquote>\n<p>In software engineering, a design pattern is a general <strong>reusable\nsolution<\/strong> to a <strong>commonly...<\/strong><\/p><\/blockquote>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Replace Nested Conditions with Guard Clauses",
			"tags": [
				"php",
				"refactoring",
				"tip"
			],
			"category": "PHP",
			"body": "<p>Sometimes we have to write code when we need to put conditions inside conditions (nested conditions) and once all of those are true, we perform some action. Here is dummy example of what I mean:<\/p>\n<pre><code>function isAuthorized($userId, $age)\n{\n    if (isLoggedIn($userId))\n    {        \n        if (isAdmin($userId) &amp;&amp; $age &gt;= 18)\n        {            \n            if (hasAcess($userId, $resourceId))\n            {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}<\/code><\/pre>\n<p>Although functionally nothing wrong with above code but it is good practice to avoid nested conditions (also nested loops) in some way or the other. This is simple example that may look easy to grasp to the naked eye, this isn't always the case. Obviously we can refactor above code and avoid nested conditions like this:<\/p>\n<pre><code>function isAuthorized($userId, $age)\n{\n    if (isLoggedIn($userId) &amp;&amp; isAdmin($userId) &amp;&amp; $age &gt;= 18 &amp;&amp; hasAcess($userId, $resourceId))\n    {        \n        return true;\n    }\n\n    return false;\n}<\/code><\/pre>\n<p>We have shortened the code but still it doesn't look that good and readability is compromised here. Depending on the code editor\/IDE you are using and font you are using or if you have even more nested conditions, this doesn't seem good solution or one that is easy to understand.<\/p>\n<p>The solution is something called <strong>Guard Clauses<\/strong> which essentially mean you put your conditions in inverted way than your original conditions. Guard clauses should return opposite value compared to your original conditions. Here is how we can use guard conditions with above example:<\/p>\n<pre><code>function isAuthorized($userId, $age)\n{\n    if (! isLoggedIn($userId)) { return false; }\n    if (! isAdmin($userId) || $age &lt; 18) { return false; }\n    if (! hasAcess($userId, $resourceId)) { return false; }\n\n    return true;\n}<\/code><\/pre>\n<p>As can be seen, we have got rid of nested conditions by putting reverse conditions on top of the function. We don't proceed any further when any of these is <code>false<\/code>. If none is false, <code>true<\/code> is returned as default value in the end.<\/p>\n<p>The benefit here is that code looks easy to understand and gives quick idea of what it is doing at first glimpse. Pretty simple yet effective stuff. <\/p>\n<h1>Avoid This ;-)<\/h1>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/14316395635555160b05859.png\" alt=\"enter image description here\" \/><\/p>",
			"addpost": "addpost",
			"dated": "May 09, 2015 01:53 PM",
			"slug": "replace-nested-conditions-with-guard-clauses",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>Sometimes we have to write code when we need to put conditions inside conditions (nested conditions) and once all of those are true, we perform some action. Here is dummy example of what I mean:<\/p>\n<pre><code>function isAuthorized($userId, $age)\n{\n    if (isLoggedIn($userId))\n    {        \n     ...<\/code><\/pre>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Managing Times for Users in PHP",
			"tags": [
				"date",
				"php",
				"time",
				"timezone"
			],
			"category": "PHP",
			"body": "<p>Most of the time, applications we write are meant to be used by users all over the world from different parts of the world having different time zones. Imagine a users from USA posts an status update and some other user from Asia sees completely different time even though original users might have posted status update moments ago.<\/p>\n<p>Well the easiest way to deal with this problem would be to allow users in your application choose their timezones; for example you can present them with a dropdown of all timezones. That's first step.<\/p>\n<p>Now once you know user's timezone, we can easily convert it back and forth. We can use GMT for this purpose because it makes it easy to convert users' timezones. So when saving times to database for example, we would first convert it to GMT. When reading from database and to show on actual webpage, we convert it from GMT to user's actual timezone. This way, we always save times in GMT and show them back to users according to their timezones.<\/p>\n<p>I have made this simple class you can use in your applications:<\/p>\n<pre><code>\/**\n * A class to ease timezone managment for users in an applications\n *\n * @author Sarfraz Ahmed &lt;sarfraznawaz2005@gmail.com&gt;\n * @license http:\/\/www.opensource.org\/licenses\/mit-license.html MIT License\n *\/\nclass UserTimeZone\n{\n\n    \/**\n     * Time format to be used\n     *\n     * @var string\n     *\/\n    protected $format = null;\n\n    \/**\n     * Timezone to be used\n     *\n     * @var string\n     *\/\n    protected $defaultTimeZone = null;\n\n    \/**\n     * @param string $format\n     * @param string $defaultTimeZone\n     *\/\n    public function __construct($format = 'Y-m-d h:i:s P', $defaultTimeZone = 'UTC')\n    {\n        $this-&gt;format = $format;\n        $this-&gt;defaultTimeZone = $defaultTimeZone;\n    }\n\n    \/**\n     * Returns all timezones in an array.\n     * Can be used to construct a dropdown of all timezones\n     * for users to select\n     *\n     * @return array\n     *\/\n    public function getTimeZones()\n    {\n        return DateTimeZone::listIdentifiers();\n    }\n\n    \/**\n     * Sets dates in GMT format.\n     * Should be used when saving dates in database for example.\n     *\n     * @param $date\n     * @return string\n     *\/\n    public function setDate($date)\n    {\n        $date = new DateTime($date, new DateTimeZone($this-&gt;defaultTimeZone));\n        $date-&gt;setTimezone(new DateTimeZone('GMT'));\n\n        return $date-&gt;format($this-&gt;format);\n    }\n\n    \/**\n     * Gets data based on users' timezones.\n     * Should be used when showing dates in pages for example.\n     *\n     * @param $date\n     * @return string\n     *\/\n    public function getDate($date)\n    {\n        $date = new DateTime($date, new DateTimeZone('GMT'));\n        $date-&gt;setTimezone(new DateTimeZone($this-&gt;defaultTimeZone));\n\n        return $date-&gt;format($this-&gt;format);\n    }\n}<\/code><\/pre>\n<p>It is self-explanatory. Read the comments in class please.<\/p>\n<p>Usage:<\/p>\n<pre><code>$format = 'd-m-Y h:i:s';\n$userTZ = 'Asia\/Karachi'; \/\/ user's time zone\n$tz = new UserTimeZone($format, $userTZ);\n\n$date = $tz-&gt;setDate('2015-01-01 6:32 PM');\n\/\/ save $date in db for example\n\n$date = $tz-&gt;getDate('2015-01-01 9:32 PM');\n\/\/ show $date on webapge for example<\/code><\/pre>",
			"addpost": "addpost",
			"dated": "May 05, 2015 01:31 PM",
			"slug": "managing-times-for-users-in-php",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>Most of the time, applications we write are meant to be used by users all over the world from different parts of the world having different time zones. Imagine a users from USA posts an status update and some other user from Asia sees completely different time even though original users might hav...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Semantic Versioning and Composer",
			"tags": [
				"composer",
				"semver",
				"versioning"
			],
			"category": "PHP",
			"body": "<p>Today any seriously written application\/software follows the <em><a href=\"http:\/\/semver.org\/\">Semantic Versioning<\/a><\/em> (also called <em>SemVer<\/em>). It boils down to this (emphasis mine):<\/p>\n<ol>\n<li>MAJOR version when you make <strong>incompatible API changes<\/strong><\/li>\n<li>MINOR version when you add functionality in a <strong>backwards-compatible<\/strong> manner<\/li>\n<li>PATCH version when you make <strong>backwards-compatible bug fixes<\/strong><\/li>\n<\/ol>\n<p>Let's take example of <a href=\"http:\/\/symfony.com\/\">Symfony<\/a> framework which follows SemVer. As of this writing, its stable version stands at <code>2.6.6<\/code><\/p>\n<p><strong>Symfony Versioning<\/strong><\/p>\n<pre>\n+-------+---------+\n| Name  | Version |\n+-------+---------+\n| MAJOR | 2       |\n+-------+---------+\n| MINOR | 6       |\n+-------+---------+\n| PATCH | 6       |\n+-------+---------+\n<\/pre>\n<p>Here, we can see that MINOR and PATCH versions are  backwards-compatible. This means if you install Symfony version <code>2.0.0<\/code> or <code>2.x.x<\/code> with <code>x<\/code> being any number, it will be backwards-compatible. Meaning if you had initially installed Symfony version <code>2.0.0<\/code> and now you want to install version <code>2.6.6<\/code>, you can do so <strong>without worrying<\/strong> it breaking functionality. However when Symfony announces a version starting with <code>3<\/code> as MAJOR version then it will most likely break some of the functionality with all previous version  less than <code>3.x.x<\/code>.  Thanks to SemVer, we can easily find that out now. Not to mention, almost all nicely written frameworks or libraries or software in general now follow SemVer. <a href=\"http:\/\/semver.org\/\">Please read more about it<\/a>.<\/p>\n<p>As a PHP developer, <a href=\"https:\/\/getcomposer.org\/\">composer<\/a> is something we can't do without these days. If you think you are a PHP developer and haven't started using composer yet, you are not a PHP developer DOT In that case, search on Google on what it is and its tutorials or see its <a href=\"https:\/\/getcomposer.org\/doc\/\">official documentation<\/a>.  In short, it is package manager for PHP that has superseded older methods such as PEAR, etc. It is like NPM for NodeJS or RubyGem for Ruby developers.<\/p>\n<p>Let's say I want to install Symfony via composer, I can specify specific version to use in quite some ways like:<\/p>\n<pre>\n+--------------------------------+----------------------------------------------------------------+\n| Version                        | Description                                                    |\n+--------------------------------+----------------------------------------------------------------+\n| symfony\/symfony: \"2.6.6\"       | Exact 2.6.6 version                                            |\n+--------------------------------+----------------------------------------------------------------+\n| symfony\/symfony: \">= 2.6\"      | Any version greater than or equal to 2.6 like 2.6.7, 6.6.9     |\n+--------------------------------+----------------------------------------------------------------+\n| symfony\/symfony: \">= 2.6,<3.0\" | Any version greater than or equal to 2.6 but less than 3 Major |\n+--------------------------------+----------------------------------------------------------------+\n| symfony\/symfony: \"2.*\"         | Any version as long as Major version is 2                      |\n+--------------------------------+----------------------------------------------------------------+\n| symfony\/symfony: \"*\"           | Latest version                                                 |\n+--------------------------------+----------------------------------------------------------------+\n| symfony\/symfony: \"dev-master\"  | Latest version from \"master\" branch                            |\n+--------------------------------+----------------------------------------------------------------+\n| symfony\/symfony: \"dev-testing\" | Latest version from \"testing\" branch                           |\n+--------------------------------+----------------------------------------------------------------+\n<\/pre>\n<p>We can also use special tilde character <code>~<\/code>:<\/p>\n<pre>\n+---------------------------+-----------------------------------------------------------------------+\n| Version                   | Description                                                           |\n+---------------------------+-----------------------------------------------------------------------+\n| symfony\/symfony: \"~2.6.6\" | Any version starting from 2.6.0 to 2.6.x with x being any number      |\n+---------------------------+-----------------------------------------------------------------------+\n| symfony\/symfony: \"~2.6\"   | Any version starting from 2.0 to 2.x or 2.x.x with x being any number |\n+---------------------------+-----------------------------------------------------------------------+\n| symfony\/symfony: \"~2\"     | Any Major version greater than or equal to 2 like 2.x or 5.x.x        |\n+---------------------------+-----------------------------------------------------------------------+\n<\/pre>\n<p>Once you know how to specify versions in composer, you can easily make sure you are only installing those packages that are <strong>backwards-compatible<\/strong> unless you want fresh installation of some package. Similarly, if you have wrote some package, you should choose versioning sensibly so that users of your package don't go <strong>incompatible<\/strong> accidentally if you have not made Major changes to your package.<\/p>\n<hr \/>\n<p>By the way, here is extremely useful <a href=\"http:\/\/composer.json.jolicode.com\/\">Composer cheat sheet<\/a>, have fun !<\/p>",
			"addpost": "addpost",
			"dated": "April 30, 2015 12:53 AM",
			"slug": "semantic-versioning-and-composer",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>Today any seriously written application\/software follows the <em><a href=\"http:\/\/semver.org\/\">Semantic Versioning<\/a><\/em> (also called <em>SemVer<\/em>). It boils down to this (emphasis mine):<\/p>\n<ol><li>MAJOR version when you make <strong>incompatible API changes<\/strong><\/li>\n<li>MINOR versio...<\/li><\/ol>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Throwing Your Own Library Exceptions in PHP",
			"tags": [
				"exception",
				"php",
				"spl",
				"pdo",
				"custom"
			],
			"category": "PHP",
			"body": "<p>In the <a href=\"http:\/\/codeinphp.github.io\/post\/exceptions-are-bad-yet-awesome\/\">previous post<\/a>, we saw the difference between errors and exceptions, how exceptions can be useful and created our custom exception handler. In this post, we will look how we can create custom exceptions specific to our application, library or company. We also talk about <a href=\"http:\/\/php.net\/manual\/en\/spl.exceptions.php\">SPL Exceptions<\/a> that should be used in your code where possible as best practice.<\/p>\n<h2>Background<\/h2>\n<p>Let's start with bit of background. If you worked on PHP's DOM, PDO, MySQLi or some other extensions or frameworks such as Symphony, Laravel, Slim or any other third party libraries, you might have noticed usually they throw their own exceptions:<\/p>\n<pre><code>$dsn = 'mysql:dbname=testdb;host=127.0.0.1';\n$user = 'dbuser';\n$password = 'dbpass';\n\n$dbh = new PDO($dsn, $user, $password);\n$dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);<\/code><\/pre>\n<p>In case of wrong database connection, it would throw <code>PDOException<\/code>:<\/p>\n<pre><code>PDOException: SQLSTATE[HY000] [1045] Access denied for user 'dbuser'@'localhost'<\/code><\/pre>\n<p>Where did <code>PDOException<\/code> come from ? Or how did PDO gave that exception ? It is simple. As I had pointed out in my <a href=\"http:\/\/codeinphp.github.io\/post\/exceptions-are-bad-yet-awesome\/\">previous post<\/a>, <a href=\"http:\/\/php.net\/manual\/en\/class.exception.php\"><code>Exception<\/code><\/a> is a class like any other normal class that can be <a href=\"http:\/\/php.net\/manual\/en\/language.exceptions.extending.php\">extended<\/a>. That's exactly what PDO does here, it simply <code>extends<\/code> the <code>Exception<\/code> class so PDO extension should be doing something like this under the hood to be able to throw <code>PDOException<\/code>:<\/p>\n<pre><code>class PDOException extends Exception {}<\/code><\/pre>\n<p>And that's <em>usually<\/em> it. And then PDO should now be throwing that new exception instead of <code>Exception<\/code>:<\/p>\n<pre><code>\/\/ something went wrong\nthrow new PDOException('message here');<\/code><\/pre>\n<p>And then user of PDO sees those <code>PDOExceptions<\/code>.<\/p>\n<p>Now that we know <code>PDOException<\/code> actually extends <code>Exception<\/code>, we can come to conclusion that we can catch exceptions thrown by PDO either by using <code>PDOException<\/code> or <code>Exception<\/code> through <em>nested<\/em> catch blocks. If exception is NOT caught for <code>PDOException<\/code>, it will fall back to base <code>Exception<\/code>:<\/p>\n<pre><code>try{\n    \/\/ any PDO code here\n}\ncatch(PDOException $e){\n    \/\/ handle PDOException\n}\ncatch(Exception $e){\n    \/\/ handle Exception\n}<\/code><\/pre>\n<h2>Throwing Your Own Exceptions<\/h2>\n<p>As said above, we can throw our own exceptions by extending the <code>Exception<\/code> class:<\/p>\n<pre><code>class MyAwesomeLibraryException extends Exception {}<\/code><\/pre>\n<p>or<\/p>\n<pre><code>class MyCompanyException extends Exception {}<\/code><\/pre>\n<p>That's easy but one might ask why throw custom exceptions? I can see these reasons:<\/p>\n<ul>\n<li>It makes it easy to recognize which thing (library, class, extension, etc) generated exception in code hierarchy<\/li>\n<li>This helps developer of orginal library easily spot problems in their code<\/li>\n<li>It brands your library exceptions like PDO, DOM, etc do.<\/li>\n<\/ul>\n<p>Now as developer of some library\/application, any time we find we need to throw exception, we simply throw our own custom exceptions:<\/p>\n<pre><code>\/\/ something wrong, throw our custom exception\nthrow new MyAwesomeLibraryException('some message');<\/code><\/pre>\n<p>Of course you can have many exception types as well for your application if you want.<\/p>\n<h2>Prioritizing Your Own Exceptions<\/h2>\n<p>Imagine we want to create our own ORM library called <strong>SuperORM<\/strong> and it uses PDO under the hood. We create our custom exception first:<\/p>\n<pre><code>class SuperORMException extends PDOException {}<\/code><\/pre>\n<p>And now we throw <code>SuperORMException<\/code> exception from whole of our ORM where needed. But since we are using PDO under the hood, we get its <code>PDOException<\/code> as well and we don't want to show this <em>directly<\/em> to the consumers of our SuperORM library, we want to be able to first show them our own exception type. This is how we can do that:<\/p>\n<pre><code>class SuperORMException extends PDOException {}\n\nclass SuperORM {\n    public function connect($dsn, $user, $password) {\n        \/\/ try connecting to database\n        try {\n            $dbh = new PDO($dsn, $user, $password);\n            $dbh-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        }\n        catch (PDOException $e) {\n            throw new SuperORMException($e-&gt;getMessage(), null, $e);\n        }        \n    }\n}\n\n$dsn = 'mysql:dbname=testdb;host=127.0.0.1';\n$user = 'dbuser';\n$password = 'dbpass';\n\n$superORM = new SuperORM;\n$superORM-&gt;connect($dsn, $user, $password);<\/code><\/pre>\n<p>And that would result in our <code>SuperORMException<\/code>:<\/p>\n<p><code>SuperORMException: SQLSTATE[HY000] [1045] Access denied for user 'dbuser'@'localhost'<\/code><\/p>\n<p>And consumer of our SuperORM can catch our exception now:<\/p>\n<pre><code>try {\n    $dsn = 'mysql:dbname=testdb;host=127.0.0.1';\n    $user = 'dbuser';\n    $password = 'dbpass';\n\n    $superORM = new SuperORM;\n    $superORM-&gt;connect($dsn, $user, $password);\n}\ncatch (SuperORMException $e) {\n    echo $e-&gt;getMessage();\n}<\/code><\/pre>\n<p>This makes sure consumer of library will now know that SuperORM will always throw exception of type <code>SuperORMException<\/code>.<\/p>\n<p>We see that <code>SuperORMException<\/code> extends <code>PDOException<\/code> and <code>PDOException<\/code> extends <code>Exception<\/code>, this gives consumer the opportunity to catch exceptions in those types like so:<\/p>\n<pre><code>try {\n    $dsn = 'mysql:dbname=testdb;host=127.0.0.1';\n    $user = 'dbuser';\n    $password = 'dbpass';\n\n    $superORM = new SuperORM;\n    $superORM-&gt;connect($dsn, $user, $password);\n}\ncatch (SuperORMException $e) {\n    \/\/ code to catch exception\n}\ncatch (PDOException $e) {\n    \/\/ code to catch exception\n}\ncatch (Exception $e) {\n    \/\/ code to catch exception\n}<\/code><\/pre>\n<p>So that's how you can throw your own custom exceptions. In fact that's how some of the ORMs or database libraries from various framework do and throw their own exceptions for consumers to catch.<\/p>\n<h2>Don't Always Throw Your Custom Exceptions<\/h2>\n<p>By this I mean there are certain exceptions types that are part of Standard PHP (SPL) known as <a href=\"http:\/\/php.net\/manual\/en\/spl.exceptions.php\">SPL Exceptions<\/a>. They are made to be thrown for <em>specific<\/em> reasons and considered best practice. You should throw SPL Exceptions <em>where applicable<\/em> instead of your own custom exceptions. Here they are:<\/p>\n<ul>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.logicexception.php\">LogicException<\/a> (extends <a href=\"http:\/\/php.net\/manual\/en\/class.exception.php\">Exception<\/a>)\n<ul>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.badfunctioncallexception.php\">BadFunctionCallException<\/a>\n<ul>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.badmethodcallexception.php\">BadMethodCallException<\/a><\/li>\n<\/ul><\/li>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.domainexception.php\">DomainException<\/a><\/li>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.invalidargumentexception.php\">InvalidArgumentException<\/a><\/li>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.lengthexception.php\">LengthException<\/a><\/li>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.outofrangeexception.php\">OutOfRangeException<\/a><\/li>\n<\/ul><\/li>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.runtimeexception.php\">RuntimeException<\/a> (extends <a href=\"http:\/\/php.net\/manual\/en\/class.exception.php\">Exception<\/a>)\n<ul>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.outofboundsexception.php\">OutOfBoundsException<\/a><\/li>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.overflowexception.php\">OverflowException<\/a><\/li>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.rangeexception.php\">RangeException<\/a><\/li>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.underflowexception.php\">UnderflowException<\/a><\/li>\n<li><a href=\"http:\/\/php.net\/manual\/en\/class.unexpectedvalueexception.php\">UnexpectedValueException<\/a><\/li>\n<\/ul><\/li>\n<\/ul>\n<p>As can be seen, those exceptions can be broadly divided into two main categories: <code>LogicException<\/code> and <code>RuntimeException<\/code>. All of those exceptions are self-explanatory from their names. For example <code>LogicException<\/code> represent any errors caused by the logical errors in your code,  <code>RuntimeException<\/code> represent any errors that are caused after script has run eg runtime errors; similarly <code>BadMethodCallException<\/code> exception should be thrown if a method in your class doesn't exist and so on.<\/p>\n<p>These SPL exceptions are excellent addition to PHP core because previously if call was made to some method which didn't exist, you usually communicated that to user through a message like:<\/p>\n<pre><code>throw new Exception('Method does not exist!');<\/code><\/pre>\n<p>So you communicated through those messages for different types of problems. The problem here was that we needed specific exceptions; if method didn't exist, we needed <code>BadMethodCallException<\/code> exception. This clearly tells developer what type of exception it is and <em>why<\/em> it might have come about. Another benefit is that such exceptions are useful even for Non-English speaking developers who can also easily spot the problem. Therefore, you must use SPL exceptions for different situations they are made for.<\/p>",
			"savedraft": "savedraft",
			"dated": "April 27, 2015 06:06 PM",
			"slug": "throwing-your-own-library-exceptions-in-php",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>In the <a href=\"http:\/\/codeinphp.github.io\/post\/exceptions-are-bad-yet-awesome\/\">previous post<\/a>, we saw the difference between errors and exceptions, how exceptions can be useful and created our custom exception handler. In this post, we will look how we can create custom exceptions specific t...<\/p>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Exceptions Are Bad Yet Awesome!",
			"tags": [
				"error",
				"exception",
				"php"
			],
			"category": "PHP",
			"body": "<h2>Overview<\/h2>\n<p>At first thought, the words <strong>errors<\/strong> and <strong>exceptions<\/strong> give the general idea that they are the same thing or collectively <em>errors<\/em> especially to the beginners. For example, when we see this:<\/p>\n<p><code>Fatal error: Call to undefined method Foo::bar()<\/code><\/p>\n<p>Or this:<\/p>\n<p><code>Exception: Method is not callable by this object<\/code><\/p>\n<p>Most beginner developer would concluded that those are just errors that need to be fixed and that may be right in a superficial sense because both of those messages are bad and need to be fixed anyway but in reality they are different things. The first one is an <strong>Error<\/strong> while later one is an <strong>Exception<\/strong>. Once we understand there can be <em>both errors and exceptions<\/em> and how to successfully handle each, we can surely write better code. <\/p>\n<p>In this post, we will see how we can deal with both of them and even create our own custom error and exception handlers for more control over how we want them to be displayed or handled while following best practices.<\/p>\n<h1>Difference between Errors and Exceptions<\/h1>\n<p><strong>Errors<\/strong><\/p>\n<ul>\n<li>\n<p>Errors are errors that are emitted by the programming language and you need to fix them. <\/p>\n<\/li>\n<li>\n<p>There can be syntax errors or logic errors. In PHP, there are different <em>levels<\/em> of errors such as <code>ERROR<\/code>, <code>PARSE<\/code>, <code>WARNING<\/code>, <code>NOTICE<\/code>, <code>STRICT<\/code>. Some errors levels halt the further execution of your PHP script (such as <code>FATAL<\/code> errors) while others allow it to continue while presenting useful information that might also need to be fixed or payed attention to such as <code>WARNING<\/code> or <code>NOTICE<\/code>. And finally there are other error levels that can tell whether a particular function is deprecated (<code>DEPRECATED<\/code>) or whether or not standards are being followed (<code>STRICT<\/code>).<\/p>\n<\/li>\n<li>\n<p>Errors can be converted into user-thrown exceptions while still some being recoverable other not because they are emitted by core programming language<\/p>\n<\/li>\n<li>\n<p>We can emit custom\/user errors through <a href=\"http:\/\/php.net\/manual\/en\/function.trigger-error.php\"><code>trigger_error()<\/code><\/a> function<\/p>\n<\/li>\n<li>\n<p>We can create custom error handler for all errors using <a href=\"http:\/\/php.net\/manual\/en\/function.set-error-handler.php\"><code>set_error_handler()<\/code><\/a><\/p>\n<\/li>\n<li>The <a href=\"http:\/\/php.net\/manual\/en\/function.error-get-last.php\"><code>error_get_last<\/code><\/a> function can be used to get any error that happened last in PHP code. The <a href=\"http:\/\/php.net\/manual\/en\/reserved.variables.phperrormsg.php\"><code>$php_errormsg<\/code><\/a> variable can be used to get previous error message.<\/li>\n<\/ul>\n<p><strong>Exceptions<\/strong>:<\/p>\n<ul>\n<li>\n<p>Exceptions are object oriented approach to errors and are thrown intentionally by code\/developer and should be handled\/caught using <code>try - catch -finally<\/code> blocks<\/p>\n<\/li>\n<li>\n<p>An <code>Exception<\/code>is a standard class that can be used like any other class and can also be extended.<\/p>\n<\/li>\n<li>\n<p>Exceptions can have many types (through sub-classes) while errors can only have levels mentioned above.<\/p>\n<\/li>\n<li>\n<p>Exceptions can be caught at any point in the call stack and can also be caught at root\/default exception handler. In comparison, errors are only handled in pre-defined error handler.<\/p>\n<\/li>\n<li>\n<p>We can throw custom\/user exceptions by using <code>throw new Exception(...)<\/code><\/p>\n<\/li>\n<li>We can create custom exception handler for all exceptions using <a href=\"http:\/\/php.net\/manual\/en\/function.set-exception-handler.php\"><code>set_exception_handler()<\/code><\/a><\/li>\n<\/ul>\n<h2>General Practice<\/h2>\n<p>Nowadays, it seems common (and better) practice to always throw exceptions (even for errors) from your code so that they can be caught and dealt with in caller script. Of course if we throw an exception for error which is <code>FATAL<\/code>, we can't recover from it but we can still provide OOP approach to caller script. If you have used <code>MySQL<\/code> extension, you would notice that it emits normal errors if something goes wrong; here is an example when connection to database could not be made:<\/p>\n<p><code>Warning: mysql_connect(): Access denied for user 'root'@'localhost'<\/code><\/p>\n<p>Notice that it emits error level of <code>Warning<\/code>. This is just an example for the function <code>mysql_connect<\/code> but other functions of <code>MySQL<\/code> extension also emit errors in the same way and can be grabbed with <a href=\"http:\/\/php.net\/manual\/en\/function.mysql-error.php\"><code>mysql_error()<\/code><\/a> function.<\/p>\n<p>But if you use improved version of MySQL called <code>MySQLi<\/code> or even <code>PDO<\/code>, you would notice they can now also throw exceptions, here is same example if connection could not be made to database using <code>mysqli<\/code>:<\/p>\n<pre><code>mysqli_report(MYSQLI_REPORT_STRICT); \/\/ tell mysqli to generate exceptions as well\nmysqli_connect('localhost', 'root', 'wrongPassword', 'test');<\/code><\/pre>\n<p>It would give you both error as well as exception:<\/p>\n<p><code>Fatal error: Uncaught exception 'mysqli_sql_exception' with message 'Access denied for user 'root'@'localhost'<\/code><\/p>\n<p><code>mysqli_sql_exception: Access denied for user 'root'@'localhost' (using password: YES)<\/code><\/p>\n<p>So these days any good written package or library or some extension you use, it would most likely generate Exceptions of its own type so that they can be caught and handled gracefully.<\/p>\n<h2>How Do Exceptions Help ?<\/h2>\n<p>Let's understand through example. Let's say you want to connect to database using <code>mysql<\/code> and you would normally do something like this:<\/p>\n<pre><code>mysql_connect('localhost', 'root', 'wrongPassword', 'test');<\/code><\/pre>\n<p>If connection could not be made to database, you would receive error:<\/p>\n<p><code>Warning: mysql_connect(): Access denied for user 'root'@'localhost'<\/code><\/p>\n<p>Now the <strong><em>only<\/em><\/strong> thing you can do is go to your code and edit it to specify correct database credentials. <\/p>\n<p>Let's now do the same thing using <code>mysqli<\/code>:<\/p>\n<pre><code>mysqli_report(MYSQLI_REPORT_STRICT); \/\/ tell mysqli to generate exceptions as well\nmysqli_connect('localhost', 'root', 'wrongPassword', 'test');<\/code><\/pre>\n<p>This would generate an error as well as exception as shown previously. Since exception is generated, we can catch it and show the message:<\/p>\n<pre><code>try {    \n    mysqli_connect('localhost', 'root', 'wrongPassword', 'test');\n} catch (mysqli_sql_exception $e) {\n    echo $e-&gt;getMessage();\n}<\/code><\/pre>\n<p>The reason why exception is useful here is because you are given a chance to catch that exception gracefully. Inside <code>catch<\/code> block, we can handle the exception however we want. For the sake of example, let's say we want to connect to database again with correct password this time:<\/p>\n<pre><code>mysqli_report(MYSQLI_REPORT_STRICT);\n\ntry {    \n    mysqli_connect('localhost', 'root', 'wrongPassword', 'test');\n} catch (mysqli_sql_exception $e) {\n    mysqli_connect('localhost', 'root', 'rightPassword', 'test');\n}<\/code><\/pre>\n<p>And thanks to exception, we were able to catch it and handle it the way we needed and we are now connected to database which was simply not possible with previous example using <code>mysql<\/code> which only emitted an error and we couldn't do much. Of course in real world applications, you might not have different passwords to connect to database but this example just gives an idea of <em>how<\/em> exceptions can be useful.<\/p>\n<p>As another example, let's say we want read feed\/rss of some website using <a href=\"http:\/\/php.net\/manual\/en\/book.simplexml.php\">SimpleXML<\/a> (which can also throw exceptions) and store 10 posts in an array:<\/p>\n<pre><code>$feedUrl = 'http:\/\/some_feed_url';\n$feeds = file_get_contents($feedUrl);\n$xml = new SimpleXmlElement($feeds);\n\n$articles = array();\nforeach ($xml-&gt;channel-&gt;item as $item) {\n   $item = (array) $item;\n   $articles[] = array('title' =&gt; $item['title'], 'link' =&gt; $item['link']);\n}\n\n$data['articles'] = array_slice($articles, 0, 10);<\/code><\/pre>\n<p>This would work as long as feed url is correct and has posts but if url is wrong, you would see a <code>Fatal<\/code> error as well <code>Exception<\/code> being generated by the script:<\/p>\n<p><code>Fatal error: Uncaught exception 'Exception' with message 'String could not be parsed as XML<\/code><\/p>\n<p><code>Exception: String could not be parsed as XML<\/code><\/p>\n<p>Since it is <code>FATAL<\/code> error, our script died at that point and we can't do anything. How do we ensure that our script continues working and runs any code below that feed code even if provided feed url was wrong ? Of course we need to <code>catch<\/code> the exception since as we saw it also generated an <code>Exception<\/code>:<\/p>\n<pre><code>try {\n    $feedUrl = 'http:\/\/some_feed_url';\n    $feeds = file_get_contents($feedUrl);\n    $xml = new SimpleXmlElement($feeds);\n\n    $articles = array();\n    foreach ($xml-&gt;channel-&gt;item as $item) {\n       $item = (array) $item;\n       $articles[] = array('title' =&gt; $item['title'], 'link' =&gt; $item['link']);\n    }\n\n    $data['articles'] = array_slice($articles, 0, 10);\n} catch (Exception $e) {\n\n}\n\necho 'Hello World';<\/code><\/pre>\n<p>And now since we have wrapped our code in <code>try-catch<\/code> and caught the exception, our code below that should still run. In this case even if feed url was wrong, you should still see the <code>Hello World<\/code> message. Our script didn't die and continued its execution. So those two examples should now give idea of how useful exceptions can be when used.<\/p>\n<h2>How do I convert Errors into Exceptions?<\/h2>\n<p>To do so ,we can use the <a href=\"http:\/\/php.net\/manual\/en\/function.set-error-handler.php\"><code>set_error_handler()<\/code><\/a> function and throw exceptions of type <a href=\"http:\/\/php.net\/manual\/en\/class.errorexception.php\"><code>ErrorException<\/code><\/a> something like:<\/p>\n<pre><code>set_error_handler(function ($errorNumber, $errorText, $errorFile, $errorLine ) \n{\n    throw new ErrorException($errorText, 0, $errorNumber, $errorFile, $errorLine);\n});<\/code><\/pre>\n<p>With that custom exception now in place, you can do things like:<\/p>\n<pre><code>try {\n    \/\/ wrong url\n    file_get_contents('http:\/\/wrong_url');\n} catch (ErrorException $e) {\n    \/\/ fix the url\n    file_get_contents('http:\/\/right_url');\n}<\/code><\/pre>\n<p>So in <code>catch<\/code> block, we are now able to fix the URL for the <code>file_get_contents<\/code> function. Without this exception, we could do nothing but may be suppressing the error by using <a href=\"http:\/\/php.net\/manual\/en\/language.operators.errorcontrol.php\">error control operator @<\/a>.<\/p>\n<h2>Universal Exception Handler<\/h2>\n<p>Now that we have seen how useful exceptions are and how to convert errors into exceptions, we can create our custom universal exception handler that can be used throughout the application. It will always generate exceptions not errors. It will do these things:<\/p>\n<p>1 - Allow us to tell it our environment which can be either <code>development<\/code> or <code>production<\/code><\/p>\n<p>2 - In case of <code>production<\/code> environment, it will log all errors to a file instead of displaying them on screen<\/p>\n<p>3 - In case of <code>development<\/code> environment, it will display all errors on the screen<\/p>\n<pre><code>\/**\n * A class that handles both errors and exceptions and generates an Exception for both.\n *\n * In case of \"production\" environment, errors are logged to file\n * In case of \"development\" environment, errors are echoed out on screen\n *\n * Usage:\n *\n * new ExceptionHandler('development', '\/myDir\/logs');\n *\n * Note: Make sure to use it on very beginning of your project or bootstrap file.\n *\n *\/\nclass ExceptionHandler {\n    \/\/ file path where all exceptions will be written to\n    protected $log_file = '';\n    \/\/ environment type\n    protected $environment = '';\n\n    public function __construct($environment = 'production', $log_file = 'logs')\n    {\n        $this-&gt;environment = $environment;\n        $this-&gt;log_file = $log_file;\n\n        \/\/ NOTE: it is better to set ini_set settings via php.ini file instead to deal with parse errors.\n        if ($this-&gt;environment === 'production') {\n            \/\/ disable error reporting\n            error_reporting(0);\n            ini_set('display_errors', false);\n            \/\/ enable logging to file\n            ini_set(\"log_errors\", true);\n            ini_set(\"error_log\", $this-&gt;log_file);\n        }\n        else {\n            \/\/ enable error reporting\n            error_reporting(E_ALL);\n            ini_set('display_errors', 1);\n            \/\/ disable logging to file\n            ini_set(\"log_errors\", false);\n        }\n\n        \/\/ setup error and exception handlers\n        set_error_handler(array($this, 'errorHandler'));\n        set_exception_handler(array($this, 'exceptionHandler'));        \n    }\n\n    public function exceptionHandler($exception)\n    {\n        if ($this-&gt;environment === 'production') {\n            error_log($exception, 3, $this-&gt;log_file);\n        }\n\n        throw new Exception('', null, $exception);\n    }\n\n    public function errorHandler($error_level, $error_message, $error_file, $error_line)\n    {\n        if ($this-&gt;environment === 'production') {      \n            error_log($message, 3, $this-&gt;log_file);\n        }\n\n        \/\/ throw exception for all error types but NOTICE and STRICT\n        if ($error_level !== E_NOTICE &amp;&amp; $error_level !== E_STRICT) {\n            throw new ErrorException($error_message, 0, $error_level, $error_file, $error_line);\n        }        \n    }\n}<\/code><\/pre>\n<p>Test it:<\/p>\n<pre><code>\/\/ register our error and exceptoin handlers\nnew ExceptionHandler('development', 'logs');\n\n\/\/ create error and exception for testing\ntrigger_error('Iam an error but will be converted into ErrorException!');\nthrow new Exception('I am an Exception anyway!');<\/code><\/pre>\n<p>So that is an example of <em>basic<\/em> universal error and exception handler class. Actually you can do a lot more like customizing the display of messages, getting the stack trace as well as code that caused it, creating timestamp for when those events take place, etc. You should checkout the official documentation in order to achieve those goodies. At any point in your code, you want to restore original PHP's error and exception handlers, you can use <a href=\"http:\/\/php.net\/manual\/en\/function.restore-error-handler.php\"><code>restore_error_handler()<\/code><\/a> and <a href=\"http:\/\/php.net\/manual\/en\/function.restore-exception-handler.php\"><code>restore_exception_handler()<\/code><\/a> functions.<\/p>\n<h2>Conclusion<\/h2>\n<p>No exception to exceptions!<\/p>\n<hr \/>\n<p>As a side note, I personally hope someday a PSR standard is created for handling errors and exceptions and their best practices because they are integral part of any PHP code.<\/p>",
			"savedraft": "savedraft",
			"dated": "April 27, 2015 02:09 AM",
			"slug": "exceptions-are-bad-yet-awesome",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<h2>Overview<\/h2>\n<p>At first thought, the words <strong>errors<\/strong> and <strong>exceptions<\/strong> give the general idea that they are the same thing or collectively <em>errors<\/em> especially to the beginners. For example, when we see this:<\/p>\n<p><code>Fatal error: Call to undefined method F...<\/code><\/p>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "CodeIgniter Tip: Accessing CodeIgniter Instance Outside",
			"tags": [
				"codeigniter",
				"php",
				"tip"
			],
			"category": "PHP",
			"body": "<p>Sometimes you need to access CodeIgniter application instance completely outside of it, may be in Ajax request or an script which is not part of your main CI application. To do so, you can do this:<\/p>\n<pre><code>\/\/ file: CI.php\nob_start();\nrequire_once 'index.php'; \/\/ adjust path accordingly\nob_get_clean();\nreturn $CI;<\/code><\/pre>\n<p>Here we are including <code>index.php<\/code> file of main CI application. We are using buffering functions here so we don't see actual CI application page and finally we we <code>return<\/code> the <code>$CI<\/code> instance so that in any page where we need CI instance, we can simply include this file there. So to use it in some other script, you would simply include above file there:<\/p>\n<pre><code>$CI = require_once 'CI.php';\necho $CI-&gt;config-&gt;item('base_url'); \/\/ test CI instance<\/code><\/pre>\n<p>That should work for the most cases.<\/p>\n<p>I happen to need CI instance in a cli\/console application but above method didn't do the trick for me in console app. So here is another very very hacky way of getting instance of CI in a console app that I was able to come up with after analyzing CodeIgniter code:<\/p>\n<pre><code>\/\/ Hacky Way of Accessing CI Instance Outside\n\nerror_reporting(1);\n\n$environment = 'development';\n\n$system_path = 'system';\n\n$application_folder = 'application';\n\nif (realpath($system_path) !== false) {\n    $system_path = realpath($system_path) . '\/';\n}\n\n$system_path = rtrim($system_path, '\/') . '\/';\n\ndefine('BASEPATH', str_replace(\"\\\\\", \"\/\", $system_path));\ndefine('APPPATH', $application_folder . '\/');\ndefine('EXT', '.php');\ndefine('ENVIRONMENT', $environment ? $environment : 'development');\n\nrequire(BASEPATH .'core\/Common.php');\n\nif (file_exists(APPPATH.'config\/'.ENVIRONMENT.'\/constants.php')) {\n    require(APPPATH.'config\/'.ENVIRONMENT.'\/constants.php');\n} else {\n    require(APPPATH.'config\/constants.php');\n}\n\n$GLOBALS['CFG'] =&amp; load_class('Config', 'core');\n$GLOBALS['UNI'] =&amp; load_class('Utf8', 'core');\n\nif (file_exists($basepath.'core\/Security.php')) {\n  $GLOBALS['SEC'] =&amp; load_class('Security', 'core');\n}\n\nload_class('Loader', 'core');\nload_class('Router', 'core');\nload_class('Input', 'core');\nload_class('Lang', 'core');\n\nrequire(BASEPATH . 'core\/Controller.php');\n\nfunction &amp;get_instance() {\n    return CI_Controller::get_instance();\n}\n\n$class = 'CI_Controller';\n$instance = new $class();\n\nreturn $instance;<\/code><\/pre>\n<p>As said above, this is extremely hacky way and may or may not work in all cases and you would also need to adjust paths in above code and\/or load more libraries\/helpers\/etc you need by modifying it.<\/p>",
			"addpost": "addpost",
			"dated": "April 26, 2015 02:17 AM",
			"slug": "codeigniter-tip-accessing-codeigniter-instance-outside",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>Sometimes you need to access CodeIgniter application instance completely outside of it, may be in Ajax request or an script which is not part of your main CI application. To do so, you can do this:<\/p>\n<pre><code>\/\/ file: CI.php\nob_start();\nrequire_once 'index.php'; \/\/ adjust path accordingly\nob_...<\/code><\/pre>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Sharing Functionality Using Traits in PHP",
			"tags": [
				"oop",
				"php",
				"trait"
			],
			"category": "PHP",
			"body": "<p>Official <a href=\"http:\/\/php.net\/manual\/en\/language.oop5.traits.php\">documentation<\/a> defines traits as:<\/p>\n<blockquote>\n<p>Traits are a mechanism for code reuse in single inheritance languages\nsuch as PHP. A Trait is intended to reduce some limitations of single\ninheritance by enabling a developer to reuse sets of methods freely in\nseveral independent classes living in different class hierarchies. The\nsemantics of the combination of Traits and classes is defined in a way\nwhich reduces complexity, and avoids the typical problems associated\nwith multiple inheritance and Mixins.<\/p>\n<\/blockquote>\n<p>So what does this mean ? Let's understand through practical example. Imagine we have chat application and database contains two tables; <code>users<\/code> and <code>messages<\/code> and we want to be able to have <a href=\"http:\/\/en.wikipedia.org\/wiki\/Create,_read,_update_and_delete\">CRUD<\/a> functionality for each of those entities. Here is how model class for <code>User<\/code> looks:<\/p>\n<pre><code>class User {\n    protected $table = 'users';\n\n    public function getAll() {\n        return DB::getAll($this-&gt;table);\n    }\n\n    public function get($id) {\n        return DB::get($this-&gt;table, $id);\n    }\n\n    public function add($data) {\n        return DB::add($this-&gt;table, $data);\n    }\n\n    public function update($id) {\n        return DB::update($this-&gt;table, $id);\n    }\n\n    public function remove($id) {\n        return DB::remove($this-&gt;table, $id);\n    }\n}<\/code><\/pre>\n<p><code>Message<\/code> model class:<\/p>\n<pre><code>class Message {\n    protected $table = 'messages';\n\n    public function getAll() {\n        return DB::getAll($this-&gt;table);\n    }\n\n    public function get($id) {\n        return DB::get($this-&gt;table, $id);\n    }\n\n    public function add($data) {\n        return DB::add($this-&gt;table, $data);\n    }\n\n    public function update($id) {\n        return DB::update($this-&gt;table, $id);\n    }\n\n    public function remove($id) {\n        return DB::remove($this-&gt;table, $id);\n    }\n}<\/code><\/pre>\n<p>At first glance, we can see that both of these classes have exactly the same code for those five methods with only difference of <code>$table<\/code> being different. This smells and to follow the principle of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Don%27t_repeat_yourself\">Don't Repeat Yourself<\/a>, we can use inheritance of course. So we create a new abstract class that will contain common functionality in the form of those five methods and then both classes would extend this base class:<\/p>\n<pre><code>abstract class Model {     \n    public function getAll() {\n        return DB::getAll($this-&gt;table);\n    }\n\n    public function get($id) {\n        return DB::get($this-&gt;table, $id);\n    }\n\n    public function add($data) {\n        return DB::add($this-&gt;table, $data);\n    }\n\n    public function update($id) {\n        return DB::update($this-&gt;table, $id);\n    }\n\n    public function remove($id) {\n        return DB::remove($this-&gt;table, $id);\n    }\n}<\/code><\/pre>\n<p>And now our <code>User<\/code> and <code>Message<\/code> classes look like this:<\/p>\n<pre><code>class User extends Model {\n    protected $table = 'users';\n}\n\nclass Message extends Model {\n    protected $table = 'messages';\n}<\/code><\/pre>\n<p>And that's it, now both of these classes inherit those five methods from the base <code>Model<\/code> class, no need to repeat them now, perfect !<\/p>\n<p>Now imaging that suddenly clients requires that some of the fields in both of those tables should be encrypted. For that we create a class that contains two methods <code>encrypt()<\/code> and <code>decrypt()<\/code>:<\/p>\n<pre><code>class Encoder {\n    public static function encrypt($text, $key) {\n        \/\/ code to encrypt text\n    }\n\n    public static function decrypt($text, $key) {\n        \/\/ code to decrypt text\n    } \n}<\/code><\/pre>\n<p>But how do we use it now ? First thought would be to use it as needed:<\/p>\n<pre><code>$user = new User();\n$user-&gt;add(array('email' =&gt; 'foo@bar.com', 'password' =&gt; Encoder::encrypt('some_password', 'key')));<\/code><\/pre>\n<p>This sounds okay but wouldn't it be better whenever we add a user, it should automatically apply <code>encrypt()<\/code> for the <code>password<\/code> field or other fields that we want? It would certainly help us save time and keep from repeating code of <code>encrypt()<\/code> and <code>decrypt()<\/code> whenever we operated on such field. So to achieve that we extend our classes with this functionality as well:<\/p>\n<pre><code>\/\/ wrong code...\nclass User extends Model extends Encoder  {\n    protected $table = 'users';\n}<\/code><\/pre>\n<p>Of course we can't do above. We can't extend a class with multiple classes since in PHP you can only do single inheritance.<\/p>\n<p>So another thought that comes to mind is to extend <code>Model<\/code>class instead:<\/p>\n<pre><code>abstract class Model extends Encoder {\n    \/\/ ....\n}<\/code><\/pre>\n<p>And this would certainly work and we would have <code>Encoder<\/code> functionality available in all our model classes where we can use it the way we need. But think about it. Is it good idea to have Model and Encryption functionality mixed up ? They are totally different things and it doesn't sound like good idea to put encryption logic into your business logic. But then how ? We can use traits !<\/p>\n<p>So let's convert previous <code>Encoder<\/code> class into a trait:<\/p>\n<pre><code>trait Encoder {\n    public static function encrypt($text, $key) {\n        \/\/ code to encrypt text\n    }\n\n    public static function decrypt($text, $key) {\n        \/\/ code to decrypt text\n    } \n}<\/code><\/pre>\n<p>And to use that trait in some other classes, we need to use it using <code>use Encoder;<\/code> syntax, so let's add this functionality in our classes:<\/p>\n<pre><code>class User extends Model {\n    use Encoder;\n    protected $table = 'users';\n}\n\nclass Message extends Model {\n    use Encoder;\n    protected $table = 'messages';\n}<\/code><\/pre>\n<p>And now not only our classes inherit functionality from base <code>Model<\/code> class but also can use the functionality of <code>Encoder<\/code> trait. We were also able to separate encryption logic from core model logic. So inside our <code>User<\/code> and <code>Message<\/code> classes, we can now use <code>$this-&gt;encrypt()<\/code> or <code>$this-&gt;decrypt()<\/code> methods as though they were defined in them (Actually that's what PHP does at runtime). We have been able to overcome the shortcoming of single inheritance.<\/p>\n<p>So now when you re-look the definition of traits given at top of this post, it should make better sense. So traits are noting but a way of code-reuse. To learn more about traits and their characteristics, please refer to its  <a href=\"http:\/\/php.net\/manual\/en\/language.oop5.traits.php\">documentation<\/a>.<\/p>\n<blockquote>\n<p>Note: One might argue our <code>User<\/code> and <code>Message<\/code> classes are also model\nlogic under the hood but this is just an example to give an idea of\ntraits. We could have had controllers or other concrete classes too\nwhere we needed common functionality.<\/p>\n<\/blockquote>",
			"addpost": "addpost",
			"dated": "April 26, 2015 01:04 AM",
			"slug": "sharing-functionality-using-traits-in-php",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>Official <a href=\"http:\/\/php.net\/manual\/en\/language.oop5.traits.php\">documentation<\/a> defines traits as:<\/p>\n<blockquote>\n<p>Traits are a mechanism for code reuse in single inheritance languages\nsuch as PHP. A Trait is intended to reduce some limitations of single\ninheritance by enabling a devel...<\/p><\/blockquote>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Late Static Binding in PHP",
			"tags": [
				"php",
				"static"
			],
			"category": "PHP",
			"body": "<p>Let's jump into an example up front to understand the concept. Let's create two classes parent and child which would tell us the name of the object using <code>getName()<\/code> method:<\/p>\n<pre><code>class Animal {\n    protected $name = 'Animal';\n\n    public function getName() {\n        return $this-&gt;name;\n    }\n}<\/code><\/pre>\n<p>Let's extend the <code>Animal<\/code> class so we can use its <code>getName()<\/code> method without repeating it in child class. We will only need the <code>$name<\/code> variable in child class to get it's name:<\/p>\n<pre><code>class Cat extends Animal {\n    protected $name = 'Cat';\n}<\/code><\/pre>\n<p>Now we expect to get names of each object, let's do so:<\/p>\n<pre><code>$animal = new Animal;\n$cat = new Cat;\n\necho $animal-&gt;getName(); \/\/ Animal\necho $cat-&gt;getName(); \/\/ Cat<\/code><\/pre>\n<p>And we successfully get <code>Animal<\/code> and <code>Cat<\/code> echoed out. But now let's modify code a bit so that we can use those classes without creating their instances with the help of <code>static<\/code> keyword (eg global state):<\/p>\n<pre><code>class Animal {\n    protected static $name = 'Animal';\n\n    public static function getName() {\n        return self::$name;\n    }\n}\n\nclass Cat extends Animal {\n    protected static $name = 'Cat';\n}\n\necho Animal::getName(); \/\/ Animal\necho Cat::getName(); \/\/ Animal<\/code><\/pre>\n<p>Noticed the problem ? We wanted to see <code>Animal<\/code> and <code>Cat<\/code> to be echoed out like previous example but in both cases it said <code>Animal<\/code> not <code>Cat<\/code>.<\/p>\n<p>The reason why in previous example things worked the way expected is because we explicitly created new instances of both classes using <code>new<\/code> keyword and PHP knew which class and method to use. This is not the case in second static example. In the second example, we are using the <code>self<\/code> keyword which <em>always resolves to current class<\/em> where it is called. This is reason why the name for the <code>Cat<\/code> class wasn't echoed out.<\/p>\n<p>So how do we get the name of cat ? Here are few ways.<\/p>\n<p><strong>By Repeating Same Code In Child Class<\/strong><\/p>\n<pre><code>class Animal {\n    protected static $name = 'Animal';\n\n    public static function getName() {\n        return self::$name;\n    }\n}\n\nclass Cat extends Animal {\n    protected static $name = 'Cat';\n\n    public static function getName() {\n        return self::$name;\n    }    \n}\n\necho Animal::getName(); \/\/ Animal\necho Cat::getName(); \/\/ Cat<\/code><\/pre>\n<p>This works but it defeats the purpose of inheritance. What is the point of extending <code>Animal<\/code> class when we need to repeat same code in child class ? This isn't ideal.<\/p>\n<p><strong>By Using <code>get_called_class()<\/code><\/strong><\/p>\n<pre><code>class Animal {\n    protected static $name = 'Animal';\n\n    public static function getName() {\n        $class = get_called_class();\n        return $class::$name;\n    }\n}\n\nclass Cat extends Animal {\n    protected static $name = 'Cat';\n}\n\necho Animal::getName(); \/\/ Animal\necho Cat::getName(); \/\/ Cat<\/code><\/pre>\n<p>This is better and works for our purpose.<\/p>\n<p><strong>By Using <code>static<\/code> keyword<\/strong><\/p>\n<p>PHP 5.3 introduced the <code>static<\/code> keyword to help deal with this issue. Before that, <code>get_called_class()<\/code> was what was used. Let's get the expected result using <code>static<\/code> keyword:<\/p>\n<pre><code>class Animal {\n    protected static $name = 'Animal';\n\n    public static function getName() {\n        return static::$name;\n    }\n}\n\nclass Cat extends Animal {\n    protected static $name = 'Cat';\n}\n\necho Animal::getName(); \/\/ Animal\necho Cat::getName(); \/\/ Cat<\/code><\/pre>\n<p>And this works fine too. These days using <code>static<\/code> keyword seems to be common practice instead of <code>get_called_class()<\/code> to deal with this issue though <code>get_called_class()<\/code> has many other uses too.<\/p>\n<hr \/>\n<p>So in simple words, <strong>late static binding<\/strong> is something that helps us correctly resolve to <strong>static<\/strong> classes at run time. So when we use <code>self<\/code> keyword, PHP checks it at compile time which class to <strong>bind<\/strong> the method call to but when we use <code>static<\/code> keyword, PHP would check it <strong>late<\/strong> eg it would determine which class to use and bind method call to at runtime. Doing it at runtime is what helps PHP determine which class was meant.<\/p>",
			"savedraft": "savedraft",
			"dated": "April 23, 2015 03:54 PM",
			"slug": "late-static-binding-in-php",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>Let's jump into an example up front to understand the concept. Let's create two classes parent and child which would tell us the name of the object using <code>getName()<\/code> method:<\/p>\n<pre><code>class Animal {\n    protected $name = 'Animal';\n\n    public function getName() {\n        return $t...<\/code><\/pre>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Closures - PHP vs Javascript",
			"tags": [
				"closure",
				"javascript",
				"lambda",
				"php",
				"scope"
			],
			"category": "PHP",
			"body": "<p>In my previous post <a href=\"http:\/\/codeinphp.github.io\/post\/exploring-lambda-functions-and-closures-in-php\/\">Exploring Lambda Functions and Closures in PHP<\/a>, I gave you example of function that can calculate factorial of given number:<\/p>\n<pre><code>$factorial = function( $n ) use ( &amp;$factorial ) {\n    if( $n == 1 ) return 1;\n    return $factorial( $n - 1 ) * $n;\n};\n\necho $factorial( 5 ); \/\/ 120<\/code><\/pre>\n<p>In that post I simply said it is important to pass <code>$factorial<\/code> by <strong>reference<\/strong> otherwise it won't work. Let's explore why it is so in this post.<\/p>\n<p>Closures are pretty common in Javascript so let's create a simple closure in it and see how it behaves:<\/p>\n<pre><code>var addOne = function(num) {\n    return function() { \n        console.log(num++); \n    };\n};\n\nvar f = addOne(1);\n\nf(); \/\/ 1\nf(); \/\/ 2\nf(); \/\/ 3<\/code><\/pre>\n<p>As can be seen, each time we call the function, it increments the number. Let's now convert the same in PHP:<\/p>\n<pre><code>$addOne = function($num) {\n    return function() { \n        echo $num++; \n    };\n};\n\n$f = $addOne(1);\n\n$f();\n$f();\n$f();<\/code><\/pre>\n<p>This would result in error:<\/p>\n<p><code>Notice: Undefined variable: num<\/code><\/p>\n<p>Why is it so ? Because variable scope is different in PHP and Javascript. In PHP, all variables go in local scope by default unless you explicitly declare them in global scope. However in Javascript all variables go in global scope unless you explicitly declare them in local scope using <code>var<\/code> keyword. Since we are talking about functions and closures here, we can say that in PHP <em>a variable declared in a function can only be available to that function<\/em> where it is declared. On the other hand, in Javascript <em>a variable can not only be available to function where it is declared but also to inner functions of that parent function<\/em>.  Let's see an example:<\/p>\n<pre><code>function test() {\n  $variable = 'value';\n\n  return function() {\n    echo $variable;\n  };\n}\n\n$f = test();\n$f(); \/\/ Notice: Undefined variable: variable<\/code><\/pre>\n<p>So PHP gave error as inner function didn't had access to outer variable <code>$variable<\/code>. We could have made this variable available to inner function either by creating closure using <code>use<\/code> keyword or declaring that variable in global scope. Le't see same example in Javascript:<\/p>\n<pre><code>function test() {\n  var variable = 'value';\n\n  return function() {\n    console.log(variable);\n  };\n}\n\nvar f = test();\nf(); \/\/ value<\/code><\/pre>\n<p>In Javascript though, the inner function was able to get variable from outer scope eg parent function in this example.<\/p>\n<p>This is reason why Javascript inner function shown above didn't give error whereas PHP's did. Therefore to have access to outer variable in PHP, we need to create a closure by using the <code>use<\/code> keyword. Of course in Javascript, you don't need something like <code>use<\/code> keyword because as I mentioned in Javascript a variable of a parent function is available to all its inner functions as well. So we need to use the <code>use<\/code> keyword in PHP due to difference of variable scoping in PHP and Javascript.<\/p>\n<p>So let's fix that error we received earlier in PHP:<\/p>\n<pre><code>$addOne = function($num) {\n    return function() use ($num) { \n        echo $num++; \n    };\n};\n\n$f = $addOne(1);\n\n$f(); \/\/ 1\n$f(); \/\/ 1\n$f(); \/\/ 1<\/code><\/pre>\n<p>Now we have created the closure and error is gone and <code>$num<\/code> variable is now available to inner function but there is a problem, each time we call the function it says <code>1<\/code> unlike Javascript example we saw earlier which said <code>1<\/code>, <code>2<\/code> and <code>3<\/code>. That's because unlike Javascript, PHP creates a new local variable inside inner function eg passes it by <code>value<\/code> not by <code>reference<\/code>. Conceptually, PHP sees this code like this:<\/p>\n<pre><code>$addOne = function($num) {\n    return function() use ($num) { \n        $num = 1;  \/\/ so PHP kind of creates a new variable and assigns to 1 each time you call this\n        echo $num++; \n    };\n};<\/code><\/pre>\n<p>So to get similar output as in Javascript, we need to pass the variable using <code>reference<\/code> which can be done by using the <code>&amp;<\/code> symbol:<\/p>\n<pre><code>$addOne = function($num) {\n    return function() use (&amp;$num) { \/\/ passed by reference \n        echo $num++; \n    };\n};\n\n$f = $addOne(1);\n\n$f();\n$f();\n$f();<\/code><\/pre>\n<p>and now we get the output <code>1<\/code>, <code>2<\/code>, and <code>3<\/code>.<\/p>\n<hr \/>\n<p>And that's also reason why you needed to pass variable by <code>reference<\/code> for the factorial example I had given in my <a href=\"http:\/\/codeinphp.github.io\/post\/exploring-lambda-functions-and-closures-in-php\/\">previous post<\/a>. Hope this post clears the confusion of closures and scoping especially for someone who comes from Javascript to PHP.<\/p>",
			"addpost": "addpost",
			"dated": "April 22, 2015 02:17 PM",
			"slug": "closures-php-vs-javascript",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>In my previous post <a href=\"http:\/\/codeinphp.github.io\/post\/exploring-lambda-functions-and-closures-in-php\/\">Exploring Lambda Functions and Closures in PHP<\/a>, I gave you example of function that can calculate factorial of given number:<\/p>\n<pre><code>$factorial = function( $n ) use ( &amp;$fac...<\/code><\/pre>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Database Migrations in CodeIgniter",
			"tags": [
				"codeigniter",
				"database",
				"migration",
				"php"
			],
			"category": "PHP",
			"body": "<h2>What is Migration ?<\/h2>\n<p>Quoting from CI <a href=\"https:\/\/ellislab.com\/codeigniter\/user-guide\/libraries\/migration.html\">documentation<\/a>:<\/p>\n<blockquote>\n<p>Migrations are a convenient way for you to alter your database in a\nstructured and organized manner. You could edit fragments of SQL by\nhand but you would then be responsible for telling other developers\nthat they need to go and run them. You\u2019d also have to keep track of\nwhich changes need to be run against the production machines next time\nyou deploy.<\/p>\n<\/blockquote>\n<p>Migrations come in extremely handy when you are working with a team of developers. Normally whenever you created a new database table or modified existing one by adding\/removing certain fields or even added some data to database, you would tell your fellow developers to run those SQL queries in their machines so that database remains in sync. <\/p>\n<p>This isn't ideal, we needed some way so that:<\/p>\n<ul>\n<li>\n<p>Framework (CodeIgniter or whatever) <strong>automatically detects and runs<\/strong> those SQL queries on our behalf without handing over SQL query files to other developers each time we make some change to database<\/p>\n<\/li>\n<li>And keeps <strong>versions of our database changes<\/strong> similar to versioning of files when we use <strong>git<\/strong>. This means we can go back and forth easily to specific version of database changes. Something went wrong on production site and you need to revert to specific database change, no problem simply tell CodeIgniter which change to revert to and you are done.<\/li>\n<\/ul>\n<p><strong>That's what migrations do.<\/strong> <\/p>\n<p>You now see how important and useful migrations are. One of the first frameworks that really shined up with this idea was Laravel and then I saw similar concept in Android applications. CodeIgniter also allows us to setup migrations which is really cool.  <\/p>\n<hr \/>\n<h2>Setting Up Migrations in CodeIgniter<\/h2>\n<p>In order to enable migrations: <\/p>\n<ul>\n<li>Open <strong>application\/config\/migration.php<\/strong> file and set the value for <code>$config['migration_enabled']<\/code> from <code>false<\/code> to <code>true<\/code>.<\/li>\n<li>Create a folder called <strong>migrations<\/strong> in <strong>application\/config\/<\/strong> folder and that's it.<\/li>\n<\/ul>\n<p>In <strong>migrations<\/strong> folder, we can create our database changes. Let's say we want to create a new <code>users<\/code> table. To do so, create a file called <strong>001_add_users.php<\/strong> in <strong>migrations<\/strong> folder and paste this code in it:<\/p>\n<pre><code>class Migration_Add_user extends CI_Migration\n{\n    public function up()\n    {\n        $this-&gt;dbforge-&gt;add_field(\n           array(\n              'id' =&gt; array(\n                 'type' =&gt; 'INT',\n                 'constraint' =&gt; 5,\n                 'unsigned' =&gt; true,\n                 'auto_increment' =&gt; true\n              ),\n              'name' =&gt; array(\n                 'type' =&gt; 'VARCHAR',\n                 'constraint' =&gt; '100',\n              ),\n              'email' =&gt; array(\n                 'type' =&gt; 'TEXT',\n                 'null' =&gt; true,\n              ),\n           )\n        );\n\n        $this-&gt;dbforge-&gt;add_key('id', TRUE);\n        $this-&gt;dbforge-&gt;create_table('users');\n    }\n\n    public function down()\n    {\n        $this-&gt;dbforge-&gt;drop_table('users');\n    }\n}<\/code><\/pre>\n<p>There are few things to notice:<\/p>\n<ul>\n<li>We see that this migration class extends <code>CI_Migration<\/code> class. <\/li>\n<li>It has only two methods <code>up()<\/code> and <code>down()<\/code><\/li>\n<li>It uses <code>dbforge<\/code> object to build up queries in OOP way<\/li>\n<li>The migration files should be prefixed with three digits like <code>001_first_migration.php<\/code>, <code>002_second_migration.php<\/code> and so on<\/li>\n<\/ul>\n<p>So that's how a typical migration class should look like. But we are only interested in <code>up()<\/code> and <code>down()<\/code> methods. The <code>up()<\/code> method is called by system whenever you need to update the database and <code>down()<\/code> method is used to revert that change that was done by the <code>up()<\/code> method. For example, if in <code>up()<\/code> method you create a new table then in <code>down()<\/code> method you should specify code to remove that table. Similarly if in <code>up()<\/code> method you add a new field to some table then in <code>down()<\/code> method you should specify code that deletes that field. So both of these methods are opposite to each other. In each migration you should always specify the code for both.<\/p>\n<p>Now that we have created our migration, we need to run it. Let's create a controller called <code>Migrate<\/code> that will run our migrations:<\/p>\n<pre><code>class migrate extends CI_Controller {\n    public function index()\n    {\n        \/\/ load migration library\n        $this-&gt;load-&gt;library('migration');\n\n        if ( ! $this-&gt;migration-&gt;current())\n        {\n            echo 'Error' . $this-&gt;migration-&gt;error_string();\n        } else {\n            echo 'Migrations ran successfully!'\n        }   \n    }    \n}<\/code><\/pre>\n<p>Now if you visit your application url at <code>http:\/\/yoursite.com\/migrate<\/code> and all goes well, you should success message and the new table <code>users<\/code> should be created in the database. If you run migration for the first time, you would also notice that a table called <code>migrations<\/code> should also be created in your database by CodeIgniter. This table can keep track of your database migration changes.<\/p>\n<p>Now refresh page or re-visit <code>http:\/\/yoursite.com\/migrate<\/code> and you would notice nothing happens, this time CodeIgniter won't do anything with your migration since it has already been run. To prove it further, delete <code>users<\/code> table manually from your database and then re-visit <code>http:\/\/yoursite.com\/migrate<\/code> page and you will see CodeIgniter didn't create <code>users<\/code> table again. That's because CodeIgniter knows that it has already run that particular migration. Now if you add some other migrations in <strong>migrations<\/strong>  folder and then visit migrate URL again, this time CodeIgniter will run your <strong>new<\/strong> migrations. How does CodeIgniter know which migrations to run ? It keeps track of them <code>migrations<\/code> table that it creates as well as <code>config['migration_version']<\/code> setting in application\/config\/migration.php file. That's how CodeIgniter versions your database changes.<\/p>\n<p>You see how simple and powerful migrations are. Now that you have made changes to database, you don't need to worry how other team members will embrace those changes, all you need to ask them is to visit the migration url and database on their machines will also get those changes!<\/p>\n<p>In the above example, we used <code>$this-&gt;migration-&gt;current()<\/code> method to go to current migration version that is set in <code>config['migration_version']<\/code>. There are <a href=\"https:\/\/ellislab.com\/codeigniter\/user-guide\/libraries\/migration.html\">couple of more methods<\/a> that allow you to migrate based on most recent version of migration based on file system and one that allows you to go to specific migration version. To lean more about <code>dbforge<\/code> methods, <a href=\"http:\/\/www.codeigniter.com\/user_guide\/database\/forge.html?highlight=dbforge\">check out its documentation<\/a>.<\/p>\n<p>So if you have never used database migrations before, you should definitely use them because they are awesome!<\/p>",
			"savedraft": "savedraft",
			"dated": "April 21, 2015 08:50 PM",
			"slug": "database-migrations-in-codeigniter",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<h2>What is Migration ?<\/h2>\n<p>Quoting from CI <a href=\"https:\/\/ellislab.com\/codeigniter\/user-guide\/libraries\/migration.html\">documentation<\/a>:<\/p>\n<blockquote>\n<p>Migrations are a convenient way for you to alter your database in a\nstructured and organized manner. You could edit fragments of SQL b...<\/p><\/blockquote>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Development Environments in CodeIgniter",
			"tags": [
				"codeigniter",
				"php"
			],
			"category": "PHP",
			"body": "<h2>What is Development Environment?<\/h2>\n<p>The environment may be <code>development<\/code>, <code>staging<\/code>, <code>production<\/code> or some other. Each environment can have different set of settings; for example different application configurations, database settings, email settings, logging, error reporting levels and more. By using different environments for your application, you can actually ease things up for yourself when deploying as you won't have to change configurations, database setting and error reporting levels after application is moved to development or production site. Once you setup different development environments, the system would automatically know your application-wide settings to use.<\/p>\n<p>If you have worked with Laravel, you would notice that you can setup different development environments for your application by specifying your current development environment in the <code>.env<\/code> file. You can actually have different development environments in CodeIgniter as well.<\/p>\n<p>If you open up <strong>index.php<\/strong> file of CodeIgniter, you would notice it sets <code>development<\/code> environment as default in a constant <code>ENVIRONMENT<\/code>:<\/p>\n<p>CodeIgniter 2+:<\/p>\n<pre><code>define('ENVIRONMENT', 'development');<\/code><\/pre>\n<p>CodeIgniter 3+:<\/p>\n<pre><code>define('ENVIRONMENT', isset($_SERVER['CI_ENV']) ? $_SERVER['CI_ENV'] : 'development');<\/code><\/pre>\n<p>And later in the very file, CI sets up error reporting based on that environment:<\/p>\n<pre><code>if (defined('ENVIRONMENT')) {\n    switch (ENVIRONMENT) {\n        case 'development':\n            error_reporting(E_ALL);\n            break;\n\n        case 'production':\n            error_reporting(0);\n            break;\n\n        default:\n            exit('The application environment is not set correctly.');\n    }\n}<\/code><\/pre>\n<p>In fact, CI uses <code>ENVIRONMENT<\/code> constant at quite some places, quoting from its <a href=\"https:\/\/ellislab.com\/codeigniter\/user-guide\/general\/environments.html\">documentation<\/a>:<\/p>\n<blockquote>\n<p>There are some places in the CodeIgniter system where the <code>ENVIRONMENT<\/code>\nconstant is used.<\/p>\n<\/blockquote>\n<hr \/>\n<h2>Setting Different Development Environments<\/h2>\n<p>Let's say we want to have ability to have different development environment for <code>local<\/code>, <code>development<\/code> and <code>production<\/code>. For example, we want to be able to:<\/p>\n<ul>\n<li>Have error reporting turned on <code>local<\/code> and <code>development<\/code> environments but turned off on <code>production<\/code><\/li>\n<li>Have logging turned on <code>local<\/code> and <code>development<\/code> environments but turned off on <code>production<\/code><\/li>\n<li>Have different <code>config<\/code> settings for each of <code>local<\/code>, <code>development<\/code> and <code>production<\/code> environments<\/li>\n<li>Have different <code>database<\/code> settings for each of <code>local<\/code>, <code>development<\/code> and <code>production<\/code> environments<\/li>\n<li>Have different <code>email<\/code> settings for each of <code>local<\/code>, <code>development<\/code> and <code>production<\/code> environments<\/li>\n<\/ul>\n<p>According to CI <a href=\"https:\/\/ellislab.com\/codeigniter\/user-guide\/libraries\/config.html#environments\">documentation<\/a>, in order to setup different environments, you need to create a folder inside <strong>application\/config<\/strong> folder matching the name of environment. For example, to create <code>development<\/code> environment, we would create a folder <strong>application\/config\/development<\/strong>. <\/p>\n<p>So create three folders named <strong>development<\/strong>, <strong>local<\/strong> and <strong>production<\/strong> inside <strong>application\/config<\/strong> folder. And copy <strong>config.php<\/strong>, <strong>database.php<\/strong> and <strong>email.php<\/strong> from <strong>application\/config<\/strong> to three folders you just created. If email.php doesn't exist, you can create one.<\/p>\n<p>Now each of your <strong>config.php<\/strong>, <strong>database.php<\/strong> and <strong>email.php<\/strong> can have differnt settings. CodeIgniter will <strong>automatically<\/strong> choose right files to use based on your current environment. For example in <strong>application\/config\/local\/config.php<\/strong> and <strong>application\/config\/development\/config.php<\/strong> files, you can enable error reporting and logging using <code>$config['log_threshold']<\/code> setting by setting it to <code>1<\/code> but disable error reporting and logging in <code>production<\/code> environment by setting <code>$config['log_threshold']<\/code> to <code>0<\/code> in <strong>application\/config\/production\/config.php<\/strong> file. Similarly, you can now easily setup different <code>$config['base_url']<\/code> in each of your environments' config.php file like:\n<br><br>\napplication\/config\/local\/config.php:<\/p>\n<pre><code>$config['base_url'] = 'http:\/\/localhost\/mysite';<\/code><\/pre>\n<p>application\/config\/development\/config.php:<\/p>\n<pre><code>$config['base_url'] = 'http:\/\/mysite.com\/development';<\/code><\/pre>\n<p>application\/config\/production\/config.php:<\/p>\n<pre><code>$config['base_url'] = 'http:\/\/mysite.com';<\/code><\/pre>\n<hr \/>\n<p>Now when you upload your application, all you have to do is specify which environment you want to use by editing <strong>index.php<\/strong> file:<\/p>\n<pre><code>define('ENVIRONMENT', 'production'); <\/code><\/pre>\n<p>If you upload your application to production site, set it to <code>production<\/code> or if you upload it to development,set it to <code>development<\/code>.<\/p>\n<p>I am sure you don't want to specify your environment for <code>ENVIRONMENT<\/code> each time you upload\/deploy your application, here is how you can do so:<\/p>\n<pre><code>$local_servers = array('localhost');\n$isLocal = in_array($_SERVER['SERVER_NAME'], $local_servers);\n\nif ($isLocal) {\n    $env = 'local';\n} else {\n    \/\/ check development word in url\n    preg_match('#\/development#', $_SERVER['REQUEST_URI'], $isDevelopment);\n\n    $env = $isDevelopment ? 'development' : 'production';\n}<\/code><\/pre>\n<p>And then use <code>$env<\/code> variable:<\/p>\n<pre><code>define('ENVIRONMENT', $env);<\/code><\/pre>",
			"addpost": "addpost",
			"dated": "April 21, 2015 05:06 PM",
			"slug": "development-environments-in-codeigniter",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<h2>What is Development Environment?<\/h2>\n<p>The environment may be <code>development<\/code>, <code>staging<\/code>, <code>production<\/code> or some other. Each environment can have different set of settings; for example different application configurations, database settings, email settings, logging...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Controllers for Frontend and Backend in CodeIgniter",
			"tags": [
				"codeigniter",
				"controller",
				"php"
			],
			"category": "PHP",
			"body": "<p>I find it very inconvenient when you need to create all <strong>frontend<\/strong> and <strong>backend<\/strong> controllers without having any common functionality. I don't like the face that I always have to extend <code>CI_Controller<\/code> for all my backend and frontend controllers. I need ability to specify which controllers are related to frontend and which ones relate to backend .<\/p>\n<p>So instead of doing this:<\/p>\n<pre><code>class someFrontendController extends CI_Controller {}\nclass someBackendController extends CI_Controller {}<\/code><\/pre>\n<p>I should be able to do this:<\/p>\n<pre><code>class someFrontendController extends FrontendController {}\nclass someBackendController extends BackendController {}<\/code><\/pre>\n<p>I also need ability to specify <strong>common<\/strong> controllers that can be <em>applicable to both frontend and backend<\/em>: <\/p>\n<pre><code>class someCommonController extends CommonController {}<\/code><\/pre>\n<p>I will explain <strong>benefits<\/strong> of having such controllers below. But for now, how do we do that ? Well CodeIgniter is very flexible and does allow you to achieve just that.<\/p>\n<h2>Extending CodeIgniter's <code>CI_Controller<\/code> Class<\/h2>\n<p>In order to have separate controllers for backend, frontend and common controllers, please follow these steps:<\/p>\n<p>1) Make sure that config <code>$config['subclass_prefix']<\/code> is set to <code>MY_<\/code> in <strong>application\/config.php<\/strong> file. It should be so by default.<\/p>\n<p>2) Create a file called <strong>MY_Controller.php<\/strong> in <strong>application\/core<\/strong> folder and paste this code in it:<\/p>\n<pre><code>&lt;?php (defined('BASEPATH')) OR exit('No direct script access allowed');\n\nclass CommonController extends CI_Controller\n{\n    public function __construct()\n    {\n        parent::__construct();\n    }\n}\n\nclass FrontendController extends CommonController\n{\n    public function __construct()\n    {\n        parent::__construct();\n    }\n}\n\nclass BackendController extends CommonController\n{\n    public function __construct()\n    {\n        parent::__construct();\n    }\n}<\/code><\/pre>\n<hr \/>\n<p>Now for all of your controllers that belong to frontend, you would extend <code>FrontendController<\/code> instead of <code>CI_Controller<\/code> and for all of your controllers that belong to backend, you would extend <code>BackendController<\/code> instead of <code>CI_Controller<\/code> like I mentioned above:<\/p>\n<pre><code>class someFrontendController extends FrontendController {}\nclass someBackendController extends BackendController {}<\/code><\/pre>\n<p>And for any controllers that might share common data for frontend and backend, you would extend <code>CommonController<\/code>:<\/p>\n<pre><code>class someCommonController extends CommonController {}<\/code><\/pre>\n<h1>What's the Point ?<\/h1>\n<p>You might already have guessed the benefits of having separate controllers but if you haven't  yet, well here they are:<\/p>\n<ul>\n<li>You can now easily <strong>distinguish<\/strong> which controllers belong to backend and which ones belong to frontend<\/li>\n<li>You now have ability to have <strong>common code<\/strong> for both sides of an application. <\/li>\n<\/ul>\n<p>By <strong>common code<\/strong>, I mean any functionality that you would want to be shared in all of your controllers. Let's assume that we have created login functionality and user is logged on frontend. Now normally you would write some code in all of your controllers (for authorized pages for example) that would check whether or not user is logged in; if user is not logged in, redirect him back to login page something like:<\/p>\n<pre><code>class MyController extends CI_Controller\n{\n    public function index() {\n        \/\/ check if user is logged in\n        $this-&gt;checkLoginStatus();\n\n        \/\/ more code of controller when user is logged in\n    }\n\n    \/\/ redirect user to login page if not logged in\n    protected function checkLoginStatus() {\n        if (! $this-&gt;session-&gt;userdata('is_logged_in')) {\n            redirect('login');\n        }\n    }\n}<\/code><\/pre>\n<p>Now for all of your pages that can be viewed only when user is logged in, you will need to insert <code>checkLoginStatus()<\/code> function in all of those controllers and then call it <code>index()<\/code> function. That's not good, it is repeating code. Remember the rules <a href=\"http:\/\/en.wikipedia.org\/wiki\/Don%27t_repeat_yourself\">Don't Repeat Yourself<\/a> (DRY) and <a href=\"http:\/\/en.wikipedia.org\/wiki\/KISS_principle\">Keep It Simple, Stupid!<\/a> (KISS) :)<\/p>\n<p>Let's KISS it; simply put <code>checkLoginStatus()<\/code> function code in your <code>FrontendController<\/code> and now all controllers that extend it will have this login check functionality:<\/p>\n<pre><code>class FrontendController extends CommonController\n{\n    public function __construct()\n    {\n        parent::__construct();\n\n        \/\/ check if user is logged in\n        $this-&gt;checkLoginStatus();\n    }\n\n    \/\/ redirect user to login page if not logged in\n    protected function checkLoginStatus() {\n        if (! $this-&gt;session-&gt;userdata('is_logged_in')) {\n            redirect('login');\n        }\n    }    \n}<\/code><\/pre>\n<p>And now you don't need to do anything in your normal frontend controllers. You now get login check functionality out of box. In the similar fashion, you can have some common functionality for all of your backend controllers by putting some code in <code>BackendController<\/code>. This was just an example for login check but of course you could have some other requirement that you wanted to inject in all of your controllers by using <code>FrontendController<\/code> or <code>BackendController<\/code>.<\/p>\n<p>You might ask, you could have done all of this by may be using CI Hooks or may be <a href=\"http:\/\/php.net\/manual\/en\/language.oop5.traits.php\">traits<\/a>, well that's true but I believe having separate controllers gives you more <strong>control<\/strong> and <a href=\"http:\/\/en.wikipedia.org\/wiki\/Separation_of_concerns\">separation of concerns<\/a>.<\/p>\n<p>Similarly, you could put whatever code you want in class for <code>CommonController<\/code> that would be applicable to <strong>both<\/strong> frontend and backend. For example you could setup application's overall configuration, upload paths, logos, etc whatever you think should be available site-wide; in all controllers of backend and frontend.<\/p>\n<p>So anything that you put in <code>FrontendController<\/code> will be available in all controllers of frontend that extend it. Anything that you put in <code>BackendController<\/code> will be available in all controllers of backend that extend it. Anything that you put in <code>CommonController<\/code> will be available in all controllers of frontend + backend.<\/p>\n<hr \/>\n<p>And finally there is one more problem I don't like personally. Even though we can now easily find out which controllers belong to frontend or backend, we still have to put all of them in <strong>application\/controllers<\/strong> folder. This doesn't easily tell by looking at file names which controllers belong where unless you open it up and see what it <code>extends<\/code>. Of course we could use prefix for controller file names like <code>front-foo-controller.php<\/code> or <code>backend-bar-controller.php<\/code> but still you have to put them in same folder. It would have been cool if you could have folder structure like this where you can go <strong>any nested level<\/strong> while having each distinct part of functionality in its own module:<\/p>\n<pre>\n+ frontend\n   + module-one\n      + controllers\n          - controllers-one.php\n          - controllers-two.php\n      + models\n          - model-one.php\n          - model-two.php\n      + views\n          - view-one.php\n          - view-two.php\n   + module-two\n   + module-three\n+ backend\n   + module-one\n   + module-two\n   + module-three\n<\/pre>\n<p>Oh yes you can do that as well with the help of <a href=\"https:\/\/bitbucket.org\/wiredesignz\/codeigniter-modular-extensions-hmvc\">HMVC module for CodeIgniter<\/a> :)<\/p>\n<blockquote>\n<p><strong>Note<\/strong>: HMVC is not just about organizing folders, it is whole concept where you get ability to have one controller call some other\ncontroller. In HMVC, Each model-view-controller triad represents\ndistinct piece of functionality or mini application which runs\nindependent from other triads.<\/p>\n<\/blockquote>\n<p>Have fun!<\/p>",
			"addpost": "addpost",
			"dated": "April 21, 2015 03:10 PM",
			"slug": "controllers-for-frontend-and-backend-in-codeigniter",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>I find it very inconvenient when you need to create all <strong>frontend<\/strong> and <strong>backend<\/strong> controllers without having any common functionality. I don't like the face that I always have to extend <code>CI_Controller<\/code> for all my backend and frontend controllers. I need abi...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "CodeIgniter Tip: Time Your Pages",
			"tags": [
				"codeigniter",
				"php",
				"tip"
			],
			"category": "PHP",
			"body": "<p>For one of pages in the CodeIgniter application, I needed to find out how much time it takes to load. Pretty obviously first thing that came to mind was to use its built-in <a href=\"https:\/\/ellislab.com\/codeigniter\/user-guide\/libraries\/benchmark.html\">Benchmarking Class<\/a>:<\/p>\n<pre><code>$this-&gt;benchmark-&gt;mark('code_start');\n\n\/\/ Some code happens here\n\n$this-&gt;benchmark-&gt;mark('code_end');\n\necho $this-&gt;benchmark-&gt;elapsed_time('code_start', 'code_end');<\/code><\/pre>\n<p>That's fine as long as you need to benchmark specific points\/parts in your code. <\/p>\n<p>But if you need to find out overall time page took to load, you can actually use below variable in your views:<\/p>\n<pre><code>{elapsed_time}<\/code><\/pre>\n<p>Or simply:<\/p>\n<pre><code>&lt;?php echo $elapsed_time;?&gt;<\/code><\/pre>\n<p>That variable is automatically created by CodeIgniter.<\/p>",
			"addpost": "addpost",
			"dated": "April 21, 2015 01:39 PM",
			"slug": "codeigniter-tip-time-your-pages",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>For one of pages in the CodeIgniter application, I needed to find out how much time it takes to load. Pretty obviously first thing that came to mind was to use its built-in <a href=\"https:\/\/ellislab.com\/codeigniter\/user-guide\/libraries\/benchmark.html\">Benchmarking Class<\/a>:<\/p>\n<pre><code>$this-...<\/code><\/pre>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Dependency Injection in PHP",
			"tags": [
				"dependency",
				"injection",
				"oop",
				"php"
			],
			"category": "PHP",
			"body": "<p>This is what Wikipedia has to say about Dependency Injection:<\/p>\n<blockquote>\n<p>In software engineering, dependency injection is a software design\npattern that implements inversion of control for software libraries.\nCaller delegates to an external framework the control flow of\ndiscovering and importing a service or software module specified or\n&quot;injected&quot; by the caller.<\/p>\n<\/blockquote>\n<p>In simple terms, Dependency Injection is a design pattern that helps <em>avoid hard-coded dependencies<\/em> for some piece of code or software. <\/p>\n<p>The dependencies can be changed at <em>run time as well as compile time<\/em>. We can use Dependency Injection to write modular, testable and maintainable code:<\/p>\n<ul>\n<li><strong>Modular<\/strong>: The Dependency Injection helps create completely self-sufficient classes or modules<\/li>\n<li><strong>Testable<\/strong>: It helps write testable code easily eg unit tests for example<\/li>\n<li><strong>Maintainable<\/strong>: Since each class becomes modular, it becomes easier to manage it<\/li>\n<\/ul>\n<hr \/>\n<h2>The Problem<\/h2>\n<p>We have dependencies almost always in our code. Consider the following procedural example which is pretty common:<\/p>\n<pre><code>function getUsers() {\n     global $database;\n     return $database-&gt;getAll('users');\n}<\/code><\/pre>\n<p>Here the function <code>getUsers<\/code> has dependency on the <code>$database<\/code> variable (tight coupling). It has some of these problems:<\/p>\n<ul>\n<li>\n<p>The function <code>getUsers<\/code> needs a <strong>working<\/strong> connection to <em>some database<\/em> . Whether there is successful connection to database or not is the fate of <code>getUsers<\/code> function<\/p>\n<\/li>\n<li>The <code>$database<\/code> comes from outer scope so chances are it might be overwritten by some other library or code in the same scope in which case function may fail<\/li>\n<\/ul>\n<p>Of course you could have used the <code>try-catch<\/code> constructs but it still doesn't solve the second problem.<\/p>\n<p>Let's consider another example for a class:<\/p>\n<pre><code>class User \n{\n    private $database = null;\n\n    public function __construct() {\n        $this-&gt;database = new database('host', 'user', 'pass', 'dbname');\n    }\n\n    public function getUsers() {\n        return $this-&gt;database-&gt;getAll('users');\n    }\n}\n\n$user = new User();\n$user-&gt;getUsers();<\/code><\/pre>\n<p>This code again has these problems:<\/p>\n<ul>\n<li>\n<p>The class <code>User<\/code> has implicit dependency on the specific <code>database<\/code>. All dependencies should always be <strong>explicit<\/strong> not implicit. This defeats <a href=\"http:\/\/en.wikipedia.org\/wiki\/Dependency_inversion_principle\">Dependency inversion principle<\/a><\/p>\n<\/li>\n<li>\n<p>If we wanted to change database credentials, we need to edit the <code>User<\/code> class which is not good; every class should be completely <strong>modular<\/strong> or black box. If we need to operate further on it, we should actually use its public properties and methods instead of editing it again and again. This defeats <a href=\"http:\/\/en.wikipedia.org\/wiki\/Open\/closed_principle\">Open\/closed principle<\/a><\/p>\n<\/li>\n<li>\n<p>Let's assume right now class is using MySQL as database. What if we wanted to use some other type of database ? You will have to modify it.<\/p>\n<\/li>\n<li>\n<p>The <code>User<\/code> class does not necessarily need to know about database connection, it should be confined to its own functionality only. So writing database connection code in <code>User<\/code> class doesn't make it modular. This defeats the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Single_responsibility_principle\">Single responsibility principle<\/a>. Think of this analogy: A cat knows how to <code>meow<\/code> and a dog knows how to <code>woof<\/code>; you cannot mix them or expect dog to say <code>meow<\/code>. Just like real world, each object of a class should be responsible for its own specific task.<\/p>\n<\/li>\n<li>It would become harder to write unit tests for the <code>User<\/code> class because we are instantiating the database class inside its constructor so it would be impossible to write unit tests for the <code>User<\/code> class without also testing the database class.<\/li>\n<\/ul>\n<h2>Enter Dependency Injection!<\/h2>\n<p>Let's see how we can easily take care of above issues by using Dependency Injection. The Dependency Injection is nothing but <strong>injecting a dependency explicitly<\/strong>. Let's re-write above class:<\/p>\n<pre><code>class User \n{\n    private $database = null;\n\n    public function __construct(Database $database) {\n        $this-&gt;database = $database;\n    }\n\n    public function getUsers() {\n        return $this-&gt;database-&gt;getAll('users');\n    }\n}\n\n$database = new Database('host', 'user', 'pass', 'dbname');\n$user = new User($database);\n$user-&gt;getUsers();<\/code><\/pre>\n<p>And there you have much better code, thanks to Dependency Injection principle. Notice that instead of hard-coding database dependency:<\/p>\n<pre><code>$this-&gt;database = new database('host', 'user', 'pass', 'dbname');<\/code><\/pre>\n<p>We are now injecting it into the constructor, that's it:<\/p>\n<pre><code>public function __construct(Database $database)<\/code><\/pre>\n<p>Notice also how we are passing database instance now:<\/p>\n<pre><code>$database = new Database('host', 'user', 'pass', 'dbname');\n$user = new User($database);\n$user-&gt;getUsers();<\/code><\/pre>\n<p>It follows <a href=\"http:\/\/en.wikipedia.org\/wiki\/Hollywood_Principle\">Hollywood Principle<\/a>, which states: <strong>&quot;Don\u2019t call us, we\u2019ll call you.&quot;<\/strong><\/p>\n<p>Let's see if this explicit dependency injection now solves problems we mentioned above.<\/p>\n<hr \/>\n<blockquote>\n<p>The class User has implicit dependency on the specific database\n. All dependencies should always be explicit not implicit.\nThis defeats Dependency inversion principle<\/p>\n<\/blockquote>\n<p>We have already made database dependency explicit by requiring it into the constructor of the <code>User<\/code> class:<\/p>\n<pre><code>public function __construct(Database $database)<\/code><\/pre>\n<p>Here we are taking advantage of <strong>type hinting<\/strong> by specifying type of object we are expecting which is <code>Database<\/code> although it wasn't necessary but it is always a good idea to type hint when you can.<\/p>\n<blockquote>\n<p>If we wanted to change database credentials, we need to edit the User\nclass which is not good; every class should be completely modular or\nblack box. If we need to operate further on it, we should actually use\nits public properties and methods instead of editing it again and\nagain. This defeats Open\/closed principle<\/p>\n<\/blockquote>\n<p>The <code>User<\/code> class now does not need to worry about how database is connected. All it expects is <code>Database<\/code> instance. We no more need to edit <code>User<\/code> class for it's dependency, we have just provided it with what it needed.<\/p>\n<blockquote>\n<p>Let's assume right now class is using MySQL as database. What if we\nwanted to use some other type of database ? You will have to modify\nit.<\/p>\n<\/blockquote>\n<p>Again, the <code>User<\/code> class doesn't need to know which type of database is used. For the <code>Database<\/code>, we could now create different adapters for different types of database and pass to <code>User<\/code> class. For example, we could create an <code>interface<\/code> that would enforce common methods for all different types of database classes that must be implement by them. For our example, we pretend that interface would enforce to have a <code>getUser()<\/code> method requirement in different types of database classes.<\/p>\n<blockquote>\n<p>The User class does not necessarily need to know about database\nconnection, it should be confined to its own functionality only. So\nwriting database connection code in User class doesn't make it\nmodular. This defeats the Single responsibility principle.<\/p>\n<\/blockquote>\n<p>Of course <code>User<\/code> class now doesn't know how database was connected. It just needs a valid connected <code>Database<\/code> instance.<\/p>\n<blockquote>\n<p>It would become harder to write unit tests for the User class because\nwe are instantiating the database class inside its constructor so it\nwould be impossible to write unit tests for the User class without\nalso testing the database class.<\/p>\n<\/blockquote>\n<p>If you have wrote unit tests, you know now it will be a breeze to write tests for the <code>User<\/code> class using something like <a href=\"https:\/\/github.com\/padraic\/mockery\">Mockery<\/a> or similar to create mock object for the <code>Database<\/code>.<\/p>\n<hr \/>\n<h2>Different Ways of Injecting Dependencies<\/h2>\n<p>Now that we have seen how useful Dependency Injection is, let's see different ways of injecting dependencies. There are three ways you can inject dependencies:<\/p>\n<ul>\n<li>Constructor Injection<\/li>\n<li>Setter Injection<\/li>\n<li>Interface Injection<\/li>\n<\/ul>\n<p><strong>Constructor Injection<\/strong><\/p>\n<p>We have already seen example of <strong>Constructor Injection<\/strong> in above example. Constructor injection is useful when:<\/p>\n<ul>\n<li>\n<p>A dependency is <strong>required<\/strong> and class can't work without it. By using constructor injection. we make sure all its required dependencies are passed.<\/p>\n<\/li>\n<li>Since constructor is called only at the time of instantiating a class, we can make sure that its dependencies cant be changed during the life time of the object.<\/li>\n<\/ul>\n<p>Constructor injection suffer from one problem though:<\/p>\n<ul>\n<li>Since constructor has dependencies, it becomes rather difficult to extend\/override it in child classes.<\/li>\n<\/ul>\n<p><strong>Setter Injection<\/strong><\/p>\n<p>Unlike Constructor injection which makes it <strong>required<\/strong> to have its dependencies passed, setter injection can be used to have <strong>optional dependencies<\/strong>. Let's pretend that our <code>User<\/code> class doesn't require <code>Database<\/code> instance but uses optionally for certain tasks. In this case, you would use a setter method to inject the <code>Database<\/code> into the <code>User<\/code> class something like:<\/p>\n<pre><code>class User \n{\n    private $database = null;\n\n    public function setDatabase(Database $database) {\n        $this-&gt;database = $database;\n    }\n\n    public function getUsers() {\n        return $this-&gt;database-&gt;getAll('users');\n    }\n}\n\n$database = new Database('host', 'user', 'pass', 'dbname');\n$user = new User();\n$user-&gt;setDatabase($database);\n$user-&gt;getUsers();<\/code><\/pre>\n<p>As you can see, here we have used <code>setDatabase()<\/code> setter function to inject <code>Database<\/code> dependency into the <code>User<\/code> class. If we needed some other dependency, we could have created one more setter method and injected in the similar fashion.<\/p>\n<p>So Setter Injection is useful when:<\/p>\n<ul>\n<li>A class needs optional dependencies so it can set itself up with default values or add additional functionality it needs.<\/li>\n<\/ul>\n<blockquote>\n<p>Notice that you could also inject dependency via <strong>public property<\/strong>\nfor a class. So instead of using setter function\n<code>$user-&gt;setDatabase($database);<\/code>, you could also do <code>$user-&gt;database = new Database(...);<\/code><\/p>\n<\/blockquote>\n<p><strong>Interface Injection<\/strong><\/p>\n<p>In this type of injection, an interface enforces the dependencies for any classes that implement it, for example:<\/p>\n<pre><code>interface someInterface {\n    function getUsers(Database $database);\n}<\/code><\/pre>\n<p>Now any class that needs to implement <code>someInterface<\/code> must provide <code>Database<\/code> dependency in their <code>getUsers()<\/code> methods.<\/p>\n<hr \/>\n<h2>The Problem Again<\/h2>\n<p>So for we have seen very contrived example of injecting dependency into a simple class but in real world applications, a class might have many dependencies. It isn't all that easy to manage all those dependencies because you need to KNOW which dependencies are required by a certain class and HOW they need to be instantiated. Let's take example of setter injection:<\/p>\n<pre><code>class User \n{\n    private $database = null;\n\n    public function setDatabase(Database $database) {\n        $this-&gt;database = $database;\n    }\n\n    public function getUsers() {\n        return $this-&gt;database-&gt;getAll('users');\n    }\n}<\/code><\/pre>\n<p>Since dependencies in this case are optional, we could have mistakenly written this code to get users:<\/p>\n<pre><code>$user = new User();\n$user-&gt;getUsers();<\/code><\/pre>\n<p>Since we didn't know <code>getUsers()<\/code> method is actually dependent on <code>Database<\/code> class, this would have given error. You could have found that out only by going to code of <code>User<\/code> class and then realizing there is <code>setDatabase()<\/code> method that must be called before using the <code>getUsers()<\/code> method. Or let's assume further that before using database, we needed to set some type of configuration for the <code>User<\/code> class like:<\/p>\n<pre><code>$user = new User();\n$user-&gt;setConfig($configArray);<\/code><\/pre>\n<p>Then again we needed to remember specific order of method calls:<\/p>\n<pre><code>$user = new User();\n$user-&gt;setConfig($configArray);\n$user-&gt;setDatabase($database);<\/code><\/pre>\n<p>So you must remember order of method calls, you can't use database if you don't setup configuration first, so you can't do:<\/p>\n<pre><code>$user = new User();\n$user-&gt;setDatabase($database);\n$user-&gt;setConfig($configArray);<\/code><\/pre>\n<p>This is example for setter injection but even with constructor injection if there are many dependencies, it becomes harder to manage all of those manually and you could easily and mistakenly create more than one instances of dependencies throughout your code which would result in high memory usage.<\/p>\n<p>You might wonder dependency injection sounded like good thing to have but these problems are not worth it. Well that's not true because there is solution to all of these problems discussed next :)<\/p>\n<h2>Solution - Dependency Injection Container<\/h2>\n<p>Of course it would be difficult to manage dependencies manually; this is why you need a Dependency Injection Container. A Dependency Injection Container is something that handles dependencies for your class(es) automatically. If you have worked with Laravel or Symfony, you know that their components have dependencies on on other classes. How do they manage all of those dependencies ? Yes they use some sort of Dependency Injection Container.<\/p>\n<p>There are <a href=\"http:\/\/www.sitepoint.com\/php-dependency-injection-container-performance-benchmarks\/\">quite some dependency injection containers out there for PHP<\/a> that can be used for this purpose or you can also write your own. Each container might have bit of different syntax but they perform the same thing under the hood.<\/p>\n<hr \/>\n<p>So in conclusion, you must always remove hard-coded dependencies from your code and inject them using Dependency Injection instead for its benefits and then have all the injected dependencies managed automatically for you by using some dependency injection container.<\/p>",
			"savedraft": "savedraft",
			"dated": "April 19, 2015 09:44 PM",
			"slug": "dependency-injection-in-php",
			"categoryslug": "php",
			"status": "publised",
			"summary": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/REC-html40\/loose.dtd\">\n<html><body><p>This is what Wikipedia has to say about Dependency Injection:<\/p>\n<blockquote>\n<p>In software engineering, dependency injection is a software design\npattern that implements inversion of control for software libraries.\nCaller delegates to an external framework the control flow of\ndiscovering and i...<\/p><\/blockquote><\/body><\/html>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Visual Query - A Basic MySQL Query Builder App",
			"tags": [
				"database",
				"mysql",
				"sql",
				"visual"
			],
			"category": "Random",
			"body": "<p>The client I am working with is <em>somewhat<\/em> technical and he wanted the ability to create his own reporting out of database. He isn't all that expert in knowing SQL so in order to help him I built <strong>Visual Query<\/strong> app to help him <strong>build his SQL queries visually<\/strong> through a provided interface.<\/p>\n<p>Visual Query is basic MySQL query builder and database browser app that has these basic features:<\/p>\n<ul>\n<li>Ability to choose different databases<\/li>\n<li>Ability to export result set to CSV and Excel<\/li>\n<li>Custom queries option<\/li>\n<li>Visual Query builder<\/li>\n<li>Query log, search facility, pagination, etc<\/li>\n<\/ul>\n<p>Here is how it looks:<\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/1429438678553380d670675.png\" alt=\"enter image description here\" \/><\/p>\n<hr \/>\n<p>One can also write custom queries with syntax highlighting support as well as code prediction support:<\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/1429438683553380db1db48.png\" alt=\"enter image description here\" \/><\/p>\n<hr \/>\n<p>And here is the query builder interface:<\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/1429438687553380df677ee.png\" alt=\"enter image description here\" \/><\/p>\n<hr \/>\n<h2>How to Use<\/h2>\n<p>First of all, download it from <a href=\"https:\/\/github.com\/sarfraznawaz2005\/VisualQuery\">its repository<\/a>. Once downloaded, edit the <code>config.php<\/code> file with database details and users login information:<\/p>\n<pre><code>\/\/ edit database settings\n$config['database_host'] = 'localhost';\n$config['database_user'] = 'root';\n$config['database_password'] = '';\n$config['database_dbname'] = 'mydb';\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ user details who can login - You can also specify more than one user\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\/\/ user 1\n$config['username'][] = 'admin';\n$config['password'][] = 'admin';\n\n\/\/ user 2\n$config['username'][] = 'admin2';\n$config['password'][] = 'admin2';<\/code><\/pre>",
			"addpost": "addpost",
			"dated": "April 19, 2015 12:31 PM",
			"slug": "visual-query-a-basic-mysql-query-builder-app",
			"categoryslug": "random",
			"status": "publised",
			"summary": "\n<p>The client I am working with is <em>somewhat<\/em> technical and he wanted the ability to create his own reporting out of database. He isn't all that expert in knowing SQL so in order to help him I built <strong>Visual Query<\/strong> app to help him <strong>build his SQL queries visually<\/strong> ...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Extending DataMapper for CodeIgniter",
			"tags": [
				"codeigniter",
				"datamapper",
				"php"
			],
			"category": "PHP",
			"body": "<p>For one of my projects I was using CodeIgniter framework with goodies like <a href=\"http:\/\/datamapper.wanwizard.eu\/\">DataMapper<\/a> (by wanwizard.eu), <a href=\"https:\/\/bitbucket.org\/wiredesignz\/codeigniter-modular-extensions-hmvc\">HMVC Module<\/a>, <a href=\"http:\/\/github.com\/EllisLab\/CodeIgniter\/wiki\/View-Object-PHP5\">View Objects<\/a> and more. Everything was smooth and sound until client requested that some of database tables must be encrypted. I was already encrypting sensitive information like passwords, etc but client wanted encryption for more tables such that:<\/p>\n<ul>\n<li>One-way hashing, once data is encrypted, it can't be decrypted,  we chose <a href=\"http:\/\/en.wikipedia.org\/wiki\/Advanced_Encryption_Standard\">AES<\/a> (Advanced Encryption Standard)<\/li>\n<li>For same piece of text, hashing should be able to generate different encrypted text always so no two same text should sound like similar<\/li>\n<li>Code should know whether provided piece of text is already encrypted or not<\/li>\n<\/ul>\n<p>I created the encryption class and did some trickery so that it always gave <em>different encryption text<\/em> for the <em>same string<\/em>. And also used some kind of prefix information that would later let the code know whether or not something is already encrypted.<\/p>\n<p>The real problem for me was that by the time project had turned into huge codebase, it would have taken ages to go and modify code everywhere so that new requirement of encryption is applied everywhere. I was using <a href=\"http:\/\/datamapper.wanwizard.eu\/\">DataMapper<\/a> library everywhere to interact with database and model classes looked like this:<\/p>\n<pre><code>class Api_client extends DataMapper\n{\n    # object properties\n    public $id;\n    public $appid;\n    public $apikey;\n    public $request_uri;\n\n    # relations\n    public $has_one = array('client');\n\n    # validation\n    public $validation = array(\n        'appid' =&gt; array(\n            'label' =&gt; 'App ID',\n            'rules' =&gt; array('required', 'trim')\n        ),\n        'apikey' =&gt; array(\n            'label' =&gt; 'API Key',\n            'rules' =&gt; array('required', 'trim')\n        ),\n        'request_uri' =&gt; array(\n            'label' =&gt; 'Request URI',\n            'rules' =&gt; array('required', 'trim')\n        )\n    );\n\n    # Default to ordering by id\n    public $default_order_by = array('id' =&gt; 'desc');\n\n    # Optional - useful if a record is to be retrieved by ID eg $user = new User(1);\n    public function __construct($id = null)\n    {\n        parent::__construct($id);\n    }\n\n    # Optional - post model initialisation code\n    public function post_model_init($from_cache = false)\n    {\n    }\n}<\/code><\/pre>\n<p>We can see that each model class extends the data mapper:<\/p>\n<pre><code>class Api_client extends DataMapper<\/code><\/pre>\n<p>This is what was a clue to me. So in order to avoid modifying lots of code in whole codebase, I knew I can only extend this data mapper and inject my functionality the way I needed.<\/p>\n<p>I actually needed the ability to:<\/p>\n<ul>\n<li>automatically encrypt given fields in some table when saving them to database<\/li>\n<li>automatically getting the right value when reading back from database<\/li>\n<\/ul>\n<p>By that I mean, instead of going everywhere in codebase and modifying code to encrypt certain fields like this:<\/p>\n<pre><code>$apiClient = new Api_client();\n$apiClient-&gt;appid = Encode($appId);     \/\/ encrypt this field value\n$apiClient-&gt;apikey = Encode($apikey);  \/\/ encrypt this field value\n$apiClient-&gt;request_uri = $request_uri;\n$apiClient-&gt;save(); \/\/ save to db<\/code><\/pre>\n<p>I simply wanted to leave current code as is without modifying it:<\/p>\n<pre><code>$apiClient = new Api_client();\n$apiClient-&gt;appid = $appId;\n$apiClient-&gt;apikey = $apikey;\n$apiClient-&gt;request_uri = $request_uri;\n$apiClient-&gt;save(); \/\/ save to db<\/code><\/pre>\n<p>In this case, I wanted data mapper to <strong>automatically<\/strong> encrypt the <code>appid<\/code> and <code>apikey<\/code> values for me. Now imagine I had this code placed in quite some files, it would have been time-consuming process to modify and add <code>Encode()<\/code> function calls manually everywhere.<\/p>\n<p>In order to do that, I simply told data mapper which fields need to be encrypted:<\/p>\n<pre><code>class Api_client extends DataMapper\n{\n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n    \/\/ for encryption fields\n    private $encryptFields = array(\n       'appid',\n       'apikey',\n    );    \n}<\/code><\/pre>\n<p>Now if you look at the code of data mapper, you would see it uses <code>_to_object()<\/code> function to map fields and <code>save()<\/code> function to save the info to database. So I tapped into these in my child classes and modified them a bit so that <code>$encryptFields<\/code> are auto-magically encrypted on my behalf. Since we are extending data mapper (<code>class Api_client extends DataMapper<\/code>), I modified it like this to do the encryption for me:<\/p>\n<pre><code>class Api_client extends DataMapper\n{\n    # object properties\n    public $id;\n    public $appid;\n    public $apikey;\n    public $request_uri;\n\n    # relations\n    public $has_one = array('client');\n\n    # validation\n    public $validation = array(\n    'appid' =&gt; array('label' =&gt; 'App ID', 'rules' =&gt; array('required', 'trim')), \n    'apikey' =&gt; array('label' =&gt; 'API Key', 'rules' =&gt; array('required', 'trim')), \n    'request_uri' =&gt; array('label' =&gt; 'Request URI', 'rules' =&gt; array('required', 'trim'))\n    );\n\n    \/\/ for encryption fields\n    private $encryptFields = array('appid', 'apikey');\n\n    # Default to ordering by id\n    public $default_order_by = array('id' =&gt; 'desc');\n\n    # Optional - useful if a record is to be retrieved by ID eg $user = new User(1);\n    public function __construct($id = null)\n    {\n        parent::__construct($id);\n    }\n\n    # Optional - post model initialisation code\n    public function post_model_init($from_cache = false)\n    {\n    }\n\n    \/\/ extending date modal here \/\/\n    public function _to_object($item, $row)\n    {\n        \/\/ Populate this object with values from first record\n        foreach ($row as $key =&gt; $value) {\n            if ($this-&gt;isEncryptedField($key)) {\n                $item-&gt;{$key} = decodeField($value);\n            } else {\n                $item-&gt;{$key} = $value;\n            }\n        }\n\n        foreach ($this-&gt;fields as $field) {\n            if (!isset($row-&gt;{$field})) {\n                $item-&gt;{$field} = null;\n            }\n        }\n\n        \/\/ Force IDs to integers\n        foreach ($this-&gt;_field_tracking['intval'] as $field) {\n            if (isset($item-&gt;{$field})) {\n                $item-&gt;{$field} = intval($item-&gt;{$field});\n            }\n        }\n\n        if (!empty($this-&gt;_field_tracking['get_rules'])) {\n            $item-&gt;_run_get_rules();\n        }\n\n        $item-&gt;_refresh_stored_values();\n\n        if ($this-&gt;_instantiations) {\n            foreach ($this-&gt;_instantiations as $related_field =&gt; $field_map) {\n                \/\/ convert fields to a 'row' object\n                $row = new stdClass();\n                foreach ($field_map as $item_field =&gt; $c_field) {\n                    $row-&gt;{$c_field} = $item-&gt;{$item_field};\n                }\n\n                \/\/ get the related item\n                $c =&amp; $item-&gt;_get_without_auto_populating($related_field);\n                \/\/ set the values\n                $c-&gt;_to_object($c, $row);\n\n                \/\/ also set up the -&gt;all array\n                $c-&gt;all    = array();\n                $c-&gt;all[0] = $c-&gt;get_clone();\n            }\n        }\n    }\n\n    public function save($object = '', $related_field = '')\n    {\n        \/\/ Temporarily store the success\/failure\n        $result = array();\n\n        \/\/ Validate this objects properties\n        $this-&gt;validate($object, $related_field);\n\n        \/\/ If validation passed\n        if ($this-&gt;valid) {\n\n            \/\/ Begin auto transaction\n            $this-&gt;_auto_trans_begin();\n\n            $trans_complete_label = array();\n\n            \/\/ Get current timestamp\n            $timestamp = $this-&gt;_get_generated_timestamp();\n\n            \/\/ Check if object has a 'created' field, and it is not already set\n            if (in_array($this-&gt;created_field, $this-&gt;fields) &amp;&amp; empty($this-&gt;{$this-&gt;created_field})) {\n                $this-&gt;{$this-&gt;created_field} = $timestamp;\n            }\n\n            \/\/ SmartSave: if there are objects being saved, and they are stored\n            \/\/ as in-table foreign keys, we can save them at this step.\n            if (!empty($object)) {\n                if (!is_array($object)) {\n                    $object = array(\n                        $object\n                    );\n                }\n\n                $this-&gt;_save_itfk($object, $related_field);\n            }\n\n            \/\/ Convert this object to array\n            $data = $this-&gt;_to_array();\n            $data = $this-&gt;changeWithEncrypted($data);\n            \/\/pretty_print($data);\n\n            if (!empty($data)) {\n                if (!$this-&gt;_force_save_as_new &amp;&amp; !empty($data['id'])) {\n                    \/\/ Prepare data to send only changed fields\n                    foreach ($data as $field =&gt; $value) {\n                        \/\/ Unset field from data if it hasn't been changed\n                        if ($this-&gt;{$field} === $this-&gt;stored-&gt;{$field}) {\n                            unset($data[$field]);\n                        }\n                    }\n\n                    \/\/ if there are changes, check if we need to update the update timestamp\n                    if (count($data) &amp;&amp; in_array($this-&gt;updated_field, $this-&gt;fields) &amp;&amp; !isset($data[$this-&gt;updated_field])) {\n                        \/\/ update it now\n                        $data[$this-&gt;updated_field] = $this-&gt;{$this-&gt;updated_field} = $timestamp;\n                    }\n\n                    \/\/ Only go ahead with save if there is still data\n                    if (!empty($data)) {\n                        \/\/ Update existing record\n                        $this-&gt;db-&gt;where('id', $this-&gt;id);\n                        $this-&gt;db-&gt;update($this-&gt;table, $data);\n\n                        $trans_complete_label[] = 'update';\n                    }\n\n                    \/\/ Reset validated\n                    $this-&gt;_validated = false;\n\n                    $result[] = true;\n                } else {\n                    \/\/ Prepare data to send only populated fields\n                    foreach ($data as $field =&gt; $value) {\n                        \/\/ Unset field from data\n                        if (!isset($value)) {\n                            unset($data[$field]);\n                        }\n                    }\n\n                    \/\/ Create new record\n                    $this-&gt;db-&gt;insert($this-&gt;table, $data);\n\n                    if (!$this-&gt;_force_save_as_new) {\n                        \/\/ Assign new ID\n                        $this-&gt;id = $this-&gt;db-&gt;insert_id();\n                    }\n\n                    $trans_complete_label[] = 'insert';\n\n                    \/\/ Reset validated\n                    $this-&gt;_validated = false;\n\n                    $result[] = true;\n                }\n            }\n\n            $this-&gt;_refresh_stored_values();\n\n            \/\/ Check if a relationship is being saved\n            if (!empty($object)) {\n                \/\/ save recursively\n                $this-&gt;_save_related_recursive($object, $related_field);\n\n                $trans_complete_label[] = 'relationships';\n            }\n\n            if (!empty($trans_complete_label)) {\n                $trans_complete_label = 'save (' . implode(', ', $trans_complete_label) . ')';\n            } else {\n                $trans_complete_label = '-nothing done-';\n            }\n\n            $this-&gt;_auto_trans_complete($trans_complete_label);\n\n        }\n\n        $this-&gt;_force_save_as_new = false;\n\n        \/\/ If no failure was recorded, return TRUE\n        return (!empty($result) &amp;&amp; !in_array(false, $result));\n    }\n\n    private function isEncryptedField($key)\n    {\n        if (false !== in_array($key, $this-&gt;encryptFields)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private function changeWithEncrypted(array $array)\n    {\n        foreach ($array as $key =&gt; $value) {\n            if ($this-&gt;isEncryptedField($key)) {\n                if ($value !== '') {\n                    $array[$key] = encodeField($value);\n                } else {\n                    $array[$key] = $value;\n                }\n            }\n        }\n\n        return $array;\n    }\n\n    private function _get_generated_timestamp()\n    {\n        \/\/ Get current timestamp\n        $timestamp = ($this-&gt;local_time) ? date($this-&gt;timestamp_format) : gmdate($this-&gt;timestamp_format);\n\n        \/\/ Check if unix timestamp\n        return ($this-&gt;unix_timestamp) ? strtotime($timestamp) : $timestamp;\n    }\n\n}<\/code><\/pre>\n<p>In above class, most of the code remains same for <code>_to_object()<\/code> and <code>save()<\/code> functions as in original data mapper class but I have modified few places so that I can put encryption for needed fields.<\/p>\n<p>So in conclusion, we learned how we tapped onto the data mapper class and extended it for our needs of auto-encryption of told fields. If you happen to have similar requirement or you wanted to inject your own functionality to the data mapper, you can do that through the use of <code>_to_object()<\/code>  and <code>save()<\/code> functions of data mapper.<\/p>",
			"addpost": "addpost",
			"dated": "April 19, 2015 11:35 AM",
			"slug": "extending-datamapper-for-codeigniter",
			"categoryslug": "php",
			"status": "publised",
			"summary": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/REC-html40\/loose.dtd\">\n<html><body><p>For one of my projects I was using CodeIgniter framework with goodies like <a href=\"http:\/\/datamapper.wanwizard.eu\/\">DataMapper<\/a> (by wanwizard.eu), <a href=\"https:\/\/bitbucket.org\/wiredesignz\/codeigniter-modular-extensions-hmvc\">HMVC Module<\/a>, <a href=\"http:\/\/github.com\/EllisLab\/CodeIgniter\/w...\"\/><\/p><\/body><\/html>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "JavaScript Best Practices",
			"tags": [
				"javascript"
			],
			"category": "Javascript",
			"body": "<p>JavaScript is not only amazing language but also very tricky language. To make correct use of it, you need to follow some best practices to avoid any problems that might come about otherwise. I share some of the best practices you really should be following when writing JavaScript code. Of course this is not an exhaustive list but at the most fundamental level, every programmer should know and adhere to it.<\/p>\n<h2>1 -NEVER FORGET <code>VAR<\/code> KEYWORD<\/h2>\n<p>Most of the developers know about this but yet I wanted to mention this because it may not be clear to some or newbies or people having other programming language background that come to JavaScript.<\/p>\n<p>Consider the following piece of code:<\/p>\n<pre><code>function myFunc(){\n    var firstName = 'sarfraz';\n    lastName = 'ahmed';\n}<\/code><\/pre>\n<p>It should be noted that in JS, variables have function-level scope which means a variable declared inside a function can not be accessed outside of it. So let\u2019s test above two variables:<\/p>\n<pre><code>myFunc();\nconsole.log(lastName); \/\/ ahmed\nconsole.log(firstName); \/\/ undefined<\/code><\/pre>\n<p>As you will notice, we are still able to access <code>lastName<\/code> variable. The reason is that it does not have function-level scope because we forgot to put var keyword before it unlike <code>firstName<\/code> variable. Hence, <code>lastName<\/code> variable went into <strong>global<\/strong> scope and became part of <code>window<\/code> (while inside browser) object eg <code>window.lastName<\/code> will output the last name too.<\/p>\n<p>It is therefore always required to put <code>var<\/code> keyword before variables so that they do not become part of global scope. It has following benefits:<\/p>\n<ul>\n<li>You save the memory and improve performance<\/li>\n<li>You don\u2019t pollute the global scope<\/li>\n<li>You mistakenly don\u2019t overwrite a global variable that might have the same variable name<\/li>\n<\/ul>\n<p>This is a very important concept and JS developers have always been finding solutions to avoid this problem. One of the most popular solution is <a href=\"http:\/\/chrisiona.com\/learning-modern-javascript\/the-singleton-pattern\/\">Singleton<\/a> or <a href=\"http:\/\/www.adequatelygood.com\/2010\/3\/JavaScript-Module-Pattern-In-Depth\">Module Pattern<\/a> you should check out. By the way, if you want to see other patterns also, take a look at:<\/p>\n<p><a href=\"http:\/\/addyosmani.com\/resources\/essentialjsdesignpatterns\/book\/\">Essential JavaScript Design Patterns For Beginners<\/a><\/p>\n<h2>2 \u2013 DECLARE VARIABLES ON TOP<\/h2>\n<p>Another thing that should be followed is that variables should be declared on top of each function because of what is known as <strong>JavaScript Hoisting<\/strong>. Here is an example:<\/p>\n<pre><code>var name = 'sarfraz';\n\n(function(){\nconsole.log(name); \/\/ undefined\n     var name = 'nawaz';\n     console.log(name); \/\/ nawaz\n})();<\/code><\/pre>\n<p>Notice that even though <code>name<\/code> variable is outside the scope of function but on the very first line it gives back <code>undefined<\/code> rather than actual name. The reason for this is that interpreter hoists or moves variables on top of the function, here is how interpreter sees or re-arranges it:<\/p>\n<pre><code>var name = 'sarfraz';\n\n(function(){\n     var name;\n     console.log(name); \/\/ undefined\n     name = 'nawaz';\n     console.log(name); \/\/ nawaz\n})();<\/code><\/pre>\n<p>As can be seen, <code>name<\/code> variable has been hoisted to top and declared there and also <code>var<\/code> keyword has been stripped from it where we assigned the value of <code>nawaz<\/code>.<\/p>\n<p>The same is issue is not only with variables but also <strong>function declarations<\/strong> but NOT with <strong>function expressions<\/strong>. You can learn more about the difference between function declaration and function expression here:<\/p>\n<p><a href=\"http:\/\/kangax.github.com\/nfe\/\">Named Functions Demystified<\/a><\/p>\n<p>The solution to this problem is to always declare <strong>variables and function declarations<\/strong> on top of container function:<\/p>\n<pre><code>function myFunc(){\n     var foo;\n     var bar;\n     var baz;\n\n     \/\/ do something foo, bar, baz\n}<\/code><\/pre>\n<p>The preferred and recommended syntax though that you must follow is to declare all variables in one go by separating them with a comma:<\/p>\n<pre><code>function myFunc(){\n     var foo, bar, baz;\n\n     \/\/ do something foo, bar, baz\n}<\/code><\/pre>\n<h2>3 \u2013 INITIALIZING MULTIPLE VARIABLES<\/h2>\n<p>Declaring variables on top is good practice but not <em>multiple initialization<\/em>. Consider:<\/p>\n<pre><code>function myFunc(){\n    var lang = encoding = 'en';\n}<\/code><\/pre>\n<p>This is a very common mistake even amongst experienced JS developers where they think they have quickly assigned two variables same scope and same value. Though value for both <code>lang<\/code> and <code>encoding<\/code> variable is some but not the scope. Try it out:<\/p>\n<pre><code>myFunc();\nconsole.log(encoding); \/\/ en\nconsole.log(lang); \/\/ undefined<\/code><\/pre>\n<p>Here again, variable <code>encoding<\/code> has gone into global scope. Since <code>var<\/code> keyword is only appears before <code>lang<\/code> variable, that is the one which gets correct functional scope. In short, you should avoid that shorthand initialization unfortunately.<\/p>\n<h2>4 \u2013 STARTING CURLY BRACE ON THE SAME LINE<\/h2>\n<p>Consider the following code block where starting curly brace <code>{<\/code> is on a new line, this works fine in most situations:<\/p>\n<pre><code>function myFunc()\n{\n    \/\/ some code\n}<\/code><\/pre>\n<p>However, same convention will not yield expected results if you happen to write:<\/p>\n<pre><code>function myFunc()\n{\n     return\n     {\n         name: 'sarfraz'\n     };\n}\n\nvar f = myFunc();\nconsole.log(f);<\/code><\/pre>\n<p>The result will be <code>undefined<\/code> because behind the scenes, interpreter puts a semicolon <code>;<\/code> after the <code>return<\/code> keyword making it:<\/p>\n<pre><code>function myFunc()\n{\n     return; \/\/ &lt;----------------\n     {\n         name: 'sarfraz'\n     };\n}<\/code><\/pre>\n<p>To remedy such hard-to-debug issues, it is good practice to always put starting curly brace on the <strong>same line<\/strong>, this would work fine though:<\/p>\n<pre><code>function myFunc() {\n     return {\n         name: 'sarfraz'\n     };\n}\n\nvar f = myFunc();\nconsole.log(f.name); \/\/ sarfraz<\/code><\/pre>\n<p>And that\u2019s a reason why <a href=\"http:\/\/www.crockford.com\/\">Douglas Crockford<\/a> in his book \u201c<a href=\"http:\/\/www.amazon.com\/JavaScript-Good-Parts-Douglas-Crockford\/dp\/0596517742\">JavaScript: The Good Parts<\/a>\u201c, advocates this syntax for JS:<\/p>\n<pre><code>function () {\n     \/\/ some code\n}\n\nif (expression) {\n     \/\/ do something\n}<\/code><\/pre>\n<p>Go ahead and check out <a href=\"http:\/\/javascript.crockford.com\/code.html\">JavaScript Coding Style<\/a> to learn more as well as naming conventions.<\/p>\n<p>Notice that it is not the <code>return<\/code> keyword affected by automatic semi-colon insertion but all these too:<\/p>\n<ul>\n<li><strong>var<\/strong> statement<\/li>\n<li><strong>empty<\/strong> statement<\/li>\n<li><strong>expression<\/strong> statement<\/li>\n<li><strong>do-while<\/strong> statement<\/li>\n<li><strong>continue<\/strong> statement<\/li>\n<li><strong>break<\/strong> statement<\/li>\n<li><strong>throw<\/strong> statement<\/li>\n<\/ul>\n<p>Experienced JavaScript developers know pretty well about JavaScript\u2019s <em>automatic semi-colon insertion problem<\/em> and avoid it. The benefit of above coding style however is that you avoid this problem without knowing that this problem exists just by following that coding style.<\/p>\n<h2>5 \u2013 USE ARRAY LITERAL INSTEAD OF NEW ARRAY()<\/h2>\n<p>There are two ways you can create arrays in JS:<\/p>\n<pre><code>var arr1 = new Array(); \/\/ array constructor\nvar arr2 = []; \/\/ array literal<\/code><\/pre>\n<p>Though both serve the purpose of creating arrays but there is important difference between the two.<\/p>\n<p>In JS, even an array is an object. With first constructor method above, you are telling interpreter to call constructor of the <code>Array<\/code> and generate an object. The interpreter looks up into the execution context to find the constructor and once found, it calls it and creates the <code>Array<\/code> object. It seems that it has performance hit too as compared to latter array literal method. With the array literal method, interpreter just creates the array on run-time with no extra processing done.<\/p>\n<p>Other than that, Array constructor is mis-guiding the way it handles its parameters. Consider:<\/p>\n<pre><code>console.log(new Array(5)); \/\/ [,,,,]\nconsole.log(new Array('5')); \/\/ [\"5\"]<\/code><\/pre>\n<p>When one argument is passed to Array and that happens to be a number, a new array is returned with its length property equal to that number passed. The important thing to note here is that Array will be initialized from what number you specified to it, for example:<\/p>\n<pre><code>\/\/ Array constructor\nvar arr = new Array(2);\nconsole.log(arr.length); \/\/ 2\nconsole.log(arr[0]); \/\/ undefined\n\n\/\/ Array literal\nvar arr = [2];\nconsole.log(arr.length); \/\/ 1\nconsole.log(arr[0]); \/\/ 2<\/code><\/pre>\n<p>So the conclusion is to always use array literal notation rather than Array constructor.<\/p>\n<h2>6 \u2013 USE PROTOTYPE TO SHARE ACROSS<\/h2>\n<p>The concept of prototypes or prototypal inheritance is rather confusing. I have seen people especially inexperienced JS developers adding class members to parent function which needs to be shared across child classes. Consider the following code:<\/p>\n<pre><code>function Person(name){\n    this.name = name;\n}<\/code><\/pre>\n<p>Now let\u2019s assume we want to have child classes the ability to display the names some how, one of doing it is putting method directly inside <code>Person<\/code> class:<\/p>\n<pre><code>function Person(name){\n     this.name = name;\n\n     this.display = function(){\n         alert(this.name);\n     }\n}<\/code><\/pre>\n<p>Other way is to use <code>prototype<\/code>:<\/p>\n<pre><code>function Person(name){\n     this.name = name;\n}\n\nPerson.prototype.display = function(){\n     alert(this.name);\n}<\/code><\/pre>\n<p>With both ways, all child classes will be able to use the display method but there is important difference between the two. When you attach any methods or properties via <code>this<\/code> (first way above) to a class then all instances of inheriting child classes will also have these properties or methods within them or their signature. On the other hand, when you use <code>prototype<\/code> to add members (properties and methods) to parent class, children classes will still inherit all members but it won\u2019t be present inside their own functionality or signature, rather they will be borrowing that functionality from their parent class thereby saving memory. For this reason, later approach seems good to follow in most situations.<\/p>\n<h2>7 \u2013 PUT COMMA BEFORE PROPERTIES<\/h2>\n<p>When working with objects or arrays, it is always a good idea to put a comma before the variable or object property eg:<\/p>\n<pre><code>\/\/ jQuery - create a new div with some css\n$('&lt;div&gt;').attr({\n   \"id\"       : \"myId\"\n , \"class\" : \"myClass\"\n , \"class\" : \"myClass\"\n , \"color\" : \"green\"\n , \"fontWeight\" : \"bold\"\n});<\/code><\/pre>\n<p>In this way, we never add an extra comma or forget one from the last property. The reason why this is good practice is that, in IE, with extra comma at the last property, we do not get expected results sometimes (<strong>ExtJS<\/strong> developers must have learned this). I do the same with multiple variable declarations or arguments of function. It also makes the code look pretty too as far as I see it.<\/p>\n<h2>8 \u2013 DON\u2019T MIX JS AND HTML<\/h2>\n<p>One of the most important best practices is to always <em>separate JS code from HTML<\/em> and go <a href=\"http:\/\/en.wikipedia.org\/wiki\/Unobtrusive_JavaScript\">unobtrusive<\/a>. One would often see code like this:<\/p>\n<pre><code>&lt;a href=\"#\" onclick=\"doSomething()\"&gt;Some Action&lt;\/a&gt;\n&lt;input type=\"button\" onclick=\"doSomething()\" value=\"Do Something\" \/&gt;\n&lt;form onsubmit=\"doSomething();\"&gt;...<\/code><\/pre>\n<p>That\u2019s a very bad practice in that it is hard to manage and maintain. HTML and JS should not be mixed ever. You could do the same thing like this:<\/p>\n<pre><code>&lt;a href=\"#\" id=\"link\"&gt;Some Action&lt;\/a&gt;\n&lt;input type=\"button\" id=\"button\" value=\"Do Something\" \/&gt;\n&lt;form id=\"frm\"&gt;...\n\n&lt;script type=\"text\/javascript\"&gt;\nvar link = document.getElementById('link'),\n btn = document.getElementById('button'),\n frm = document.getElementById('link');\n\nlink.onclick = function(){\n \/\/ do something\n};\n\nbtn.onclick = function(){\n \/\/ do something\n};\n\nfrm.onsubmit = function(){\n \/\/ validate form\n};     \n&lt;\/script&gt;<\/code><\/pre>\n<p>This way it becomes easy to manage, maintain or enhance both HTML and JavaScript.<\/p>\n<h2>9 \u2013 PUT SCRIPTS AT BOTTOM<\/h2>\n<p>Normally scripts are put in <code>&lt;head&gt;&lt;\/head&gt;<\/code> tags but this should be avoided. The reason for this is that browser loads your scripts sequentially and by the time they are loading, nothing else is done and website load times slow down (or at least that\u2019s how visitors will perceive it) and you see actual output only after those scripts have been loaded by the browser.<\/p>\n<p>The best practice is that scripts should be put on bottom of page just before closing body tag eg <code>&lt;\/body&gt;<\/code>. This way browser will instantly display page and page load time will be better for users who view that page.<\/p>\n<p>By the way, always put CSS on top in <code>&lt;head&gt;&lt;\/head&gt;<\/code> tags because that\u2019s something browser reads first and renders page\u2019s layout accordingly.<\/p>\n<p>Read more about this at famous <a href=\"http:\/\/developer.yahoo.com\/performance\/rules.html\">Yahoo\u2019s performance article<\/a>.<\/p>\n<p>I would also suggest you to use Yahoo\u2019s <a href=\"http:\/\/developer.yahoo.com\/yslow\/\">YSlow<\/a> or Google\u2019s <a href=\"http:\/\/code.google.com\/speed\/page-speed\/\">PageSpeed<\/a> add-on (add-ons of <a href=\"http:\/\/getfirebug.com\/\">Firebug<\/a>) which suggest you a lot of things on how to improve the performance of the page.<\/p>\n<h2>10 \u2013 NEVER FORGET SEMI-COLON<\/h2>\n<p>Always end statements and function expressions with a semi-colon:<\/p>\n<pre><code>var name = 'some name'; \/\/ &lt;-------------\n\nvar myFunc = function(){\n\/\/ some doe\n\n}; \/\/ &lt;------------<\/code><\/pre>\n<p>This is useful when you want to compress the code (for faster load times). If at any place, semi-colon isn\u2019t present, you won\u2019t be able to compress the code or wouldn\u2019t get expected results most likely code-wise. You should always, always use semi-colons.<\/p>\n<h2>BONUS<\/h2>\n<p>The good news is that you can solve most of above problems by using <a href=\"http:\/\/www.jshint.com\/\">JSHint<\/a> or <a href=\"http:\/\/jslint.com\/\">JSLint<\/a> code quality tool. It will tell you about best-practices and any errors that might exist in your code. Having said that, it is good to improve your JS skills and avoid the need to go to such tools.<\/p>",
			"addpost": "addpost",
			"dated": "April 19, 2015 10:00 AM",
			"slug": "javascript-best-practices",
			"categoryslug": "javascript",
			"status": "publised",
			"summary": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/REC-html40\/loose.dtd\">\n<html><body><p>JavaScript is not only amazing language but also very tricky language. To make correct use of it, you need to follow some best practices to avoid any problems that might come about otherwise. I share some of the best practices you really should be following when writing JavaScript code. Of course...<\/p><\/body><\/html>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Exploring Lambda Functions and Closures in PHP",
			"tags": [
				"closure",
				"function",
				"lambda",
				"php",
				"php53"
			],
			"category": "PHP",
			"body": "<h1>What is a Lambda Function<\/h1>\n<p>A lambda function (also known as <strong>anonymous function<\/strong>) is a function that has:<\/p>\n<ol>\n<li>No Name<\/li>\n<li>Can be assigned to a variable<\/li>\n<li>Can be passed as argument to other functions or methods of a class<\/li>\n<\/ol>\n<p>In the past, this was possible with <a href=\"http:\/\/php.net\/manual\/en\/function.create-function.php\"><code>create_function<\/code><\/a> like:<\/p>\n<pre><code>$multiply = create_function('$a, $b','return $a * $b;');\necho $multiply(5, 5); \/\/ 25<\/code><\/pre>\n<p>But it was a nuisance if you needed to write longer anonymous functions using <code>create_function<\/code> because it was difficult to write function body that way inside quotes and then escaping quotes and stuff...<\/p>\n<p>PHP 5.3 introduced true support of lambda\/anonymous functions similar to how you see in Javascript, so you could write above code like:<\/p>\n<pre><code>$multiply = function ($a, $b) {\n    return $a * $b;\n};\n\necho $multiply(5, 5); \/\/ 25<\/code><\/pre>\n<p>As can be seen, above anonymous function has no name and has been assigned to variable  <code>$multiply<\/code>. You can also pass it other functions:<\/p>\n<pre><code>function countEmails($number) {\n    echo 'you have ' . $number . ' emails!';\n}\n\n$multiply = function ($a, $b) {\n    return $a * $b;\n};\n\necho countEmails($multiply(2, 5)); \/\/ you have 10 emails!<\/code><\/pre>\n<p>You could have also written above like this if you wanted:<\/p>\n<pre><code>function countEmails($multiply, $a, $b) {\n    echo 'you have ' . $multiply($a, $b) . ' emails!';\n}\n\n$multiply = function ($a, $b) {\n    return $a * $b;\n};\n\necho countEmails($multiply, 2, 5); \/\/ you have 10 emails!<\/code><\/pre>\n<p>And even like this:<\/p>\n<pre><code>function countEmails($multiply, $a, $b) {\n    echo 'you have ' . $multiply($a, $b) . ' emails!';\n}\n\necho countEmails(function ($a, $b) {\n    return $a * $b;\n}, 2, 5); \/\/ you have 10 emails!<\/code><\/pre>\n<p>You can also assign it to array:<\/p>\n<pre><code>$array['multiply'] = function ($a, $b) {\n     return $a * $b;\n};\n\necho $array['multiply'](2, 10); \/\/ 20<\/code><\/pre>\n<p>And even an object:<\/p>\n<pre><code>$obj = new StdClass();\n\n$obj-&gt;multiply = function ($a, $b) {\n     return $a * $b;\n};<\/code><\/pre>\n<p>But caveat here is that instead of calling it like <code>echo $obj-&gt;multiply(2, 10)<\/code>, you would instead need to do:<\/p>\n<pre><code>$multiply = $obj-&gt;multiply;\necho $multiply(2, 10); \/\/ 20<\/code><\/pre>\n<p>Now let's create little program which says <code>Hello, World<\/code> using anonymous function:<\/p>\n<pre><code>$message = 'Hello, World!';\n\n$sayHello = function () {\n    echo $message;\n};\n\n$sayHello();<\/code><\/pre>\n<p>Oops, it results in error:<\/p>\n<p><code>Notice: Undefined variable: message<\/code><\/p>\n<p>It means anonymous function does not have access to <code>$message<\/code> inside it. This is exactly when we need a closure to have access to that <code>$message<\/code> variable.<\/p>\n<h1>What is a Closure<\/h1>\n<p>A closure is a lambda\/anonymous function that is aware of its surrounding context through the use of <code>use<\/code> keyword. It can access a variable outside of the scope where it is defined. Consider last <code>$sayHello<\/code> anonymous function and we convert it into closure through the use of <code>use<\/code> keyword and gain access to the <code>$message<\/code> variable:<\/p>\n<pre><code>$message = 'Hello, World!';\n\n$sayHello = function () use ($message) {\n    echo $message;\n};\n\n$sayHello(); \/\/ Hello, World!<\/code><\/pre>\n<p>Thanks to closure (<code>use<\/code> keyword), we are now able to access <code>$message<\/code> variable!<\/p>\n<hr \/>\n<p>If you need to change the value of passed outside variable, you need to use reference of course:<\/p>\n<pre><code>$message = 'Hello, World!';\n\n$sayHello = function () use (&amp;$message) {\n    echo $message;\n    $message = 'Hello World Again!';\n};\n\n$sayHello(); \/\/ Hello, World!\n$sayHello(); \/\/ Hello World Again!<\/code><\/pre>\n<p>You can also pass regular arguments to closure:<\/p>\n<pre><code>$message = 'World!';\n\n$sayHello = function ($arg) use ($message) {\n    echo $arg . ' ' . $message;\n};\n\n$sayHello('Hello'); \/\/ Hello, World!<\/code><\/pre>\n<p>You can also create a recursive function using closure easily, here is example of how you can create a factorial function:<\/p>\n<pre><code>$factorial = function( $n ) use ( &amp;$factorial ) {\n    if( $n == 1 ) return 1;\n    return $factorial( $n - 1 ) * $n;\n};\n\necho $factorial( 5 );<\/code><\/pre>\n<p>Notice that <code>$factorial<\/code> is passed by reference using <code>&amp;<\/code> otherwise it won't work.<\/p>\n<hr \/>\n<p>The difference between an anonymous function and closure is that closure has ability to access a variable outside of its scope by using the <code>use<\/code> keyword. So that is the subtle difference between an anonymous function and a closure. In fact, both are of them are instances of <code>Closure<\/code> class internally:<\/p>\n<pre><code>\/\/ anonymous function\n$multiply = function ($a, $b) {\n    return $a * $b;\n};\n\n$message = 'Hello, World';\n\n\/\/ closure\n$sayHello = function () use ($message) {\n    echo $message;\n};\n\nvar_dump ($multiply instanceof Closure); \/\/ true\nvar_dump ($sayHello instanceof Closure); \/\/ true<\/code><\/pre>\n<h1>Type Hinting<\/h1>\n<p>We know that you can already type hint few things:<\/p>\n<ul>\n<li>Object<\/li>\n<li>Array<\/li>\n<li>Interface<\/li>\n<li>callable<\/li>\n<\/ul>\n<p>But you can also type hint <code>Closure<\/code> as shown below:<\/p>\n<pre><code>function multiply($number, Closure $closure)\n{\n    return $closure($number);\n}\n\n$closure = function($x){ return $x * 2; };\necho multiply(10, $closure);<\/code><\/pre>\n<p>Here we have made <code>multiply<\/code> function to require type of <code>Closure<\/code> as second parameter.<\/p>\n<h1>Use Cases<\/h1>\n<p>Anonymous functions and closures can be used in variety of situations.<\/p>\n<p><strong>As Callbacks<\/strong><\/p>\n<p>You can use them in your custom functions as callback or some of the PHP's built-in functions such as <code>array_map()<\/code>, <code>array_reduce()<\/code>, <code>array_filter()<\/code>, <code>array_walk()<\/code>, etc. Let's take example of <code>array_walk()<\/code>. If you <a href=\"http:\/\/php.net\/manual\/en\/function.array-walk.php\">look at it's definition<\/a>, here is how it looks:<\/p>\n<pre><code>bool array_walk ( array &amp;$array , callable $callback [, mixed $userdata = NULL ] )<\/code><\/pre>\n<p>Notice the second parameter <code>callable $callback<\/code>. It means it expects something to be callable function. Anytime you see such parameter in some function definition, it means you can apply anonymous functions to it. Here is example:<\/p>\n<pre><code>$myArray = array(1, 2, 3, 4, 5);\n\n\/\/ multiply each array value with 2    \narray_walk($myArray, function(&amp;$value, $index){\n    $value *= 2;\n});\n\nprint_r($myArray);\n\nArray\n(\n    [0] =&gt; 2\n    [1] =&gt; 4\n    [2] =&gt; 6\n    [3] =&gt; 8\n    [4] =&gt; 10\n)<\/code><\/pre>\n<hr \/>\n<p><strong>In Routing<\/strong><\/p>\n<p>You might have seen closures being used in routing in framework like Laravel, Slim, Silex, etc:<\/p>\n<pre><code>$app = new \\Slim\\Slim($options);\n\n$app-&gt;get('\/', function () use ($app) {\n    $app-&gt;render('home', array('content' =&gt; 'Hello, World!!!'));\n});<\/code><\/pre>\n<p>Here <code>$app<\/code> is imported from outside scope into the scope of closure so that it can be used to render the view <code>$app-&gt;render(...)<\/code><\/p>\n<hr \/>\n<p><strong>Accessing Private Members of a Class<\/strong><\/p>\n<p>We can use <a href=\"http:\/\/www.php.net\/manual\/en\/closure.bind.php\"><code>bind()<\/code><\/a> or <a href=\"http:\/\/www.php.net\/manual\/en\/closure.bindto.php\"><code>bindTo<\/code><\/a> methods of <code>Closure<\/code> class to access <code>private<\/code> data of some class, for example:<\/p>\n<pre><code>class MyClass {\n    private $variable = 'I am private variable!';\n}\n\n$closure = function() {\n    return $this-&gt;variable;\n};\n\n$result = Closure::bind($closure, new MyClass(), 'MyClass');\necho $result(); \/\/ I am private variable!<\/code><\/pre>\n<p>There you see, we were able to get value of private variable <code>$variable<\/code>.<\/p>\n<p>Similarly, it is also possible to <strong>add new behaviour to a class without actuallly modifying it direclty<\/strong>. Pretty cool hun ?<\/p>\n<hr \/>\n<p><strong>Lazy-loading a Class<\/strong><\/p>\n<p>Another <code>^cool^<\/code> thing you can do with closure is to lazy-load a class. For example:<\/p>\n<pre><code>class MyClass {\n    public function __construct() {\n        echo 'I am initialized!';\n    }\n}\n\n$getMyClass = function() {\n    $myClass = new MyClass();\n    return $myClass;\n};<\/code><\/pre>\n<p>If you run above code, you might expect to see <code>I am initialized!<\/code> message because one might think we are creating an instance of <code>MyClass<\/code>. That's not true though, because code inside <code>$getMyClass<\/code> anonymous function is not run until you actually call it:<\/p>\n<pre><code>$myClass = $getMyClass();<\/code><\/pre>\n<p>And now you would see the message <code>I am initialized!<\/code>. So this is pretty neat trick to defer some piece of code and use it only when you need it.<\/p>",
			"savedraft": "savedraft",
			"dated": "April 18, 2015 11:57 PM",
			"slug": "exploring-lambda-functions-and-closures-in-php",
			"categoryslug": "php",
			"status": "publised",
			"summary": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/REC-html40\/loose.dtd\">\n<html><body><h1>What is a Lambda Function<\/h1>\n<p>A lambda function (also known as <strong>anonymous function<\/strong>) is a function that has:<\/p>\n<ol><li>No Name<\/li>\n<li>Can be assigned to a variable<\/li>\n<li>Can be passed as argument to other functions or methods of a class<\/li>\n<\/ol><p>In the past, this ...<\/p><\/body><\/html>\n",
			"addpost": "addpost",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"title": "Learning Javascript",
			"tags": [
				"javascript"
			],
			"category": "Javascript",
			"body": "<p>JavaScript is <a href=\"http:\/\/en.wikipedia.org\/wiki\/JavaScript\">cross-platform<\/a>, cross-browser language; javascript is everywhere; web, <a href=\"http:\/\/en.wikipedia.org\/wiki\/Rich_Internet_application\">RIA<\/a> (rich internet applications), <a href=\"http:\/\/sixrevisions.com\/javascript\/mobile%C2%A0web-development-frameworks\/\">mobile, tablets<\/a>, <a href=\"https:\/\/github.com\/mrdoob\/three.js\/\">animations<\/a> and even on server with the advent of <a href=\"http:\/\/nodejs.org\/\">node.js<\/a>. Javascript is the language of the future.<\/p>\n<p>I started off with jQuery without knowing anything much about javascript because by the time I didn\u2019t find any reason to learn it due to fact that  javascript libraries did everything we needed putting complexities out of the way. Today I realize that I chose the wrong path, a good understanding of javascript language is crucial if you look at the reasons I have mentioned in the very beginning but it is never too late to start again, that\u2019s exactly what I have decided, learning javascript seriously. I am not the only one who has started realizing the power and future of javascript, there are <a href=\"http:\/\/shiflett.org\/blog\/2012\/feb\/learning-javascript\">giants<\/a> who have started learning it too. If you are also javascript-library-only developer, or even <strong>copy-paster<\/strong> programmer, <a href=\"http:\/\/phpadvent.org\/2009\/you-really-need-to-learn-javascript-by-ed-finkler\">you should really<\/a> <a href=\"http:\/\/net.tutsplus.com\/tutorials\/javascript-ajax\/from-jquery-to-javascript-a-reference\/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:%20nettuts%20%28Nettuts%2b%29\">learn javascript<\/a> seriously !<\/p>\n<p>Despite design flaws and bad reputation of the language <a href=\"http:\/\/javascript.crockford.com\/javascript.html\">as they say<\/a> and probably rightly so, javascript is popular and language of the choice for those who have gone into deeper <a href=\"http:\/\/ejohn.org\/\">understating<\/a> <a href=\"http:\/\/sstephenson.us\/\">of<\/a> <a href=\"http:\/\/infrequently.org\/about-me\/\">it<\/a>. Javascript language <a href=\"http:\/\/perfectionkills.com\/instanceof-considered-harmful-or-how-to-write-a-robust-isarray\/\">does<\/a> <a href=\"http:\/\/javascriptweblog.wordpress.com\/2011\/08\/08\/fixing-the-javascript-typeof-operator\/\">have<\/a> <a href=\"http:\/\/www.svennerberg.com\/2009\/02\/global-variables-in-javascript\/\">bad<\/a> <a href=\"http:\/\/lucumr.pocoo.org\/2011\/2\/6\/automatic-semicolon-insertion\/\">parts<\/a> but its <a href=\"http:\/\/www.amazon.com\/dp\/0596517742\/?tag=stackoverfl08-20\">good parts<\/a> over-weigh its bad parts and there is always room to avoid bad parts if you know the language right and use it effectively.<\/p>\n<p>Javascript turns out to be extremely <a href=\"http:\/\/bonsaiden.github.com\/JavaScript-Garden\/\">tricky<\/a> language, consider:<\/p>\n<pre><code>\/\/ Comparison\n'' == '0';    \/\/false\n0 == '';    \/\/ true\n0 =='0';    \/\/ true\n\n\/\/ Type checking\ntypeof null;    \/\/ object\n\n\/\/ Scope\nfunction myFunc() {\n  return\n  {\n    name: 'sarfraz'\n  };\n}\n\nvar f = myFunc();\nconsole.log(f);    \/\/ undefined<\/code><\/pre>\n<p>I did <strong>a lot of research<\/strong> to find best javascript learning resources. On the journey of my exploration, I came across some of the great resources with a lot of reviews and user feedback. By now, if you made your mind to take javascript seriously, here are the best resources out there you should check out.<\/p>\n<h2>Books<\/h2>\n<ul>\n<li><a href=\"http:\/\/shop.oreilly.com\/product\/9780596517748.do\">JavaScript: The Good Parts<\/a> by <a href=\"http:\/\/crockford.com\/\">Douglas Crockford<\/a><\/li>\n<li><a href=\"http:\/\/jsninja.com\/\">Secrets of the JavaScript Ninja<\/a> by <a href=\"http:\/\/ejohn.org\/\">John Resig<\/a><\/li>\n<li><a href=\"http:\/\/jspro.org\/\">Pro JavaScript Techniques<\/a> by <a href=\"http:\/\/ejohn.org\/\">John Resig<\/a><\/li>\n<li><a href=\"http:\/\/www.amazon.com\/Performance-JavaScript-Faster-Application-Interfaces\/dp\/059680279X\">High Performance JavaScript<\/a> by <a href=\"http:\/\/www.nczonline.net\/blog\/about\/\">Nicholas C. Zaka<\/a><\/li>\n<li><a href=\"http:\/\/www.amazon.com\/gp\/product\/B004XQX4K0\/ref=pd_lpo_k2_dp_sr_3?pf_rd_p=486539851&amp;pf_rd_s=lpo-top-stripe-1&amp;pf_rd_t=201&amp;pf_rd_i=0596805527&amp;pf_rd_m=ATVPDKIKX0DER&amp;pf_rd_r=1GJCJ4PSFS8516NGDG28\">JavaScript: The Definitive Guide<\/a> by <a href=\"http:\/\/www.davidflanagan.com\/\">David Flanagan<\/a><\/li>\n<\/ul>\n<h2>Online<\/h2>\n<ul>\n<li><a href=\"http:\/\/eloquentjavascript.net\/\">Eloquent JavaScript<\/a> by Marijn Haverbeke<\/li>\n<li><a href=\"http:\/\/javascript.info\/\">The JavaScript Tutorial<\/a><\/li>\n<li><a href=\"https:\/\/developer.mozilla.org\/en\/JavaScript\/Guide\">JavaScript Guide MDN<\/a><\/li>\n<li><a href=\"http:\/\/bonsaiden.github.com\/JavaScript-Garden\/\">JavaScript Garden<\/a> (For intermediate &amp; advanced programmers \u2013 must read !)<\/li>\n<\/ul>\n<h2>Videos<\/h2>\n<ul>\n<li><a href=\"http:\/\/learn.appendto.com\/\">appendto.com<\/a><\/li>\n<li><a href=\"http:\/\/yuiblog.com\/crockford\/\">Douglas Crockford\u2019s JavaScript Video Series<\/a><\/li>\n<li><a href=\"http:\/\/www.youtube.com\/watch?v=hQVTIJBZook\">JavaScript: The Good Parts<\/a><\/li>\n<\/ul>\n<h2>Blogs to Subscribe<\/h2>\n<ul>\n<li><a href=\"http:\/\/perfectionkills.com\/\">PerfectionKills<\/a><\/li>\n<li><a href=\"http:\/\/dmitrysoshnikov.com\/\">Dmitry A. Soshnikov<\/a><\/li>\n<li><a href=\"http:\/\/javascriptweblog.wordpress.com\/\">JavaScript, JavaScript<\/a><\/li>\n<li><a href=\"http:\/\/www.adequatelygood.com\/\">Adequately Good<\/a><\/li>\n<li><a href=\"http:\/\/ejohn.org\/\">John Resig<\/a><\/li>\n<li><a href=\"http:\/\/www.2ality.com\/\">2ality<\/a><\/li>\n<li><a href=\"http:\/\/nemisj.com\/\">Notes of Maks Nemisj<\/a><\/li>\n<li><a href=\"http:\/\/addyosmani.com\/blog\/\">Addy Osmani<\/a><\/li>\n<li>Bonus: <a href=\"http:\/\/net.tutsplus.com\/articles\/web-roundups\/30-developers-you-must-subscribe-to-as-a-javascript-junkie\/\">33 Developers you MUST Subscribe to as a JavaScript Junkie<\/a><\/li>\n<\/ul>\n<h2>Tools<\/h2>\n<ul>\n<li><a href=\"http:\/\/gruntjs.com\/\">Grunt<\/a> (The JavaScript Task Runner)<\/li>\n<li><a href=\"http:\/\/www.jshint.com\/\">JSHint<\/a> (JS Code Quality Tool)<\/li>\n<li><a href=\"http:\/\/jsperf.com\/\">JSPerf<\/a> (JS Performance Testing)<\/li>\n<li><a href=\"http:\/\/www.jsunit.net\/\">JSUnit<\/a> (JS Unit Testing)<\/li>\n<li><a href=\"http:\/\/siliconforks.com\/jscoverage\/\">JSCoverage<\/a> (JS Code Coverage)<\/li>\n<li><a href=\"http:\/\/code.google.com\/p\/jsdoc-toolkit\/\">JDDoc-Toolkit<\/a> (JS Documentation Tool)<\/li>\n<li>Bonus: <a href=\"http:\/\/coding.smashingmagazine.com\/2009\/02\/08\/50-extremely-useful-javascript-tools\/\">50 Useful JavaScript Tools<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "April 18, 2015 08:35 PM",
			"slug": "learning-javascript",
			"categoryslug": "javascript",
			"status": "publised",
			"prevStatus": "draft",
			"author": "Sarfraz Ahmed",
			"summary": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/REC-html40\/loose.dtd\">\n<html><body><p>JavaScript is <a href=\"http:\/\/en.wikipedia.org\/wiki\/JavaScript\">cross-platform<\/a>, cross-browser language; javascript is everywhere; web, <a href=\"http:\/\/en.wikipedia.org\/wiki\/Rich_Internet_application\">RIA<\/a> (rich internet applications), <a href=\"http:\/\/sixrevisions.com\/javascript\/mobile%C2%A...\"\/><\/p><\/body><\/html>\n",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Abstract Class vs Interface",
			"tags": [
				"abstract",
				"interface",
				"oop"
			],
			"category": "PHP",
			"body": "<p>I found this picture that tells the difference between <code>abstract class<\/code> and <code>interface<\/code>:<\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/142937584655328b66dcedc.png\" alt=\"enter image description here\" \/><\/p>\n<hr \/>\n<p>Let's see each comparison practically so we know what it means.<\/p>\n<pre>\nInterface support multiple inheritance | Abstract class does not support multiple inheritance\n<\/pre>\n<p>It means you can extend an <code>interface<\/code> with one or more (hence <em>multiple inheritance<\/em>) interfaces like:<\/p>\n<pre><code>interface Interface_A { }\ninterface Interface_B { }\ninterface Interface_C { }\n\ninterface MyInterface extends Interface_A, Interface_B, Interface_C { }<\/code><\/pre>\n<p>As can be seen, we are extending <code>MyInterface<\/code> with three other interfaces <code>Interface_A<\/code>, <code>Interface_A<\/code> and <code>Interface_C<\/code>.<\/p>\n<p>Let's now try to extend an <code>abstract class<\/code>:<\/p>\n<pre><code>class Class_A { }\n\nabstract class MyAbstractClass extends Class_A { }<\/code><\/pre>\n<p>No problem there, you CAN extend an abstract class with exactly one class but if you try to add one more:<\/p>\n<pre><code>class Class_A { }\nclass Class_B { }\n\nabstract class MyAbstractClass extends Class_A, Class_B { }<\/code><\/pre>\n<p>This time PHP would give you strange error without telling you what you are doing wrong:<\/p>\n<p><code>Parse error: syntax error, unexpected ',', expecting '{'<\/code><\/p>\n<p>I wish PHP would have given message somewhat like (hope PHP gives smarter error messages in future versions):<\/p>\n<p><code>Fatal Error: You cannot extend an abstract class with more than one classes<\/code><\/p>\n<hr \/>\n<pre>\nInterface does'n Contains Data Member | Abstract class contains Data Member\n<\/pre>\n<p>By data members, it means class properties or variables. So you cannot add data members to an interface:<\/p>\n<pre><code>interface MyInterface {\n    public $foo = null;\n}<\/code><\/pre>\n<p>So in an interface, only method stubs can be provided.<\/p>\n<p>You can add data members to an abstract class though, this is valid code of course:<\/p>\n<pre><code>abstract class MyAbstractClass {\n    public $foo = null;\n}<\/code><\/pre>\n<hr \/>\n<pre>\nInterface does'n contains Constructors | Abstract class contains Constructors\n<\/pre>\n<p>It sounds like this point applies to may be other languages but in PHP an interface CAN have an empty constructor shell:<\/p>\n<pre><code>interface MyInterface {\n    public function __construct();\n}<\/code><\/pre>\n<p>Like other languages, PHP shouldn't have allowed having a constructor inside an interface. But anyways, it doesn't make much sense here and should be avoided anyway.<\/p>\n<p>On the other hand, an abstract class can contain constructor method:<\/p>\n<pre><code>abstract class MyAbstractClass {\n    abstract public function __construct();\n}<\/code><\/pre>\n<p>Here constructor is said to be <code>abstract<\/code> and therefore expends child classes to complement for it. However, you can also have common initialization code in constructor of an abstract class too in which case, you would need to remove the <code>abstract<\/code> keyword and provide the body for it:<\/p>\n<pre><code>abstract class MyAbstractClass {\n    public function __construct() {\n         \/\/ initialization code\n    };\n}<\/code><\/pre>\n<hr \/>\n<pre>\nAn interface Contains only incomplete member (signature of member) | An abstract class Contains both incomplete (abstract) and complete member\n<\/pre>\n<p>This simply means an interface can only contain method stubs not their implementation. This is pretty same as second point in the image above. This is why in methods of an interface, they don't have bodies marked with <code>{ }<\/code> braces. So an interface is completely empty shell that enforces some rules that child classes must implement and that's it.<\/p>\n<p>Abstract classes can have both; empty method definitions as well as full method implementation. Generally empty method stubs are prefixed with <code>abstract<\/code> keyword so that child classes must provide their implementation details. But an abstract class can also contain full method implementation inside it which are generally used for common piece of functionality that each child class may need. For example:<\/p>\n<pre><code>abstract class Animal {\n    \/\/ child classes must implement this\n    abstract function prey();\n\n    public function run() {\n        echo 'I am running!';\n    }\n}\n\nclass Dog extends Animal {\n    public function prey() {\n        echo 'I killed the cat !';\n    }\n}\n\nclass Cat extends Animal {\n    public function prey() {\n        echo 'I killed the rat !';\n    }\n}\n\n$dog = new Dog();\n$cat = new Cat();\n\n$dog-&gt;prey(); \/\/ I killed the cat !\n$cat-&gt;prey(); \/\/ I killed the rat !\n\n$dog-&gt;run(); \/\/ I am running!\n$cat-&gt;run(); \/\/ I am running!<\/code><\/pre>\n<p>In above code, we can see that <code>Animal<\/code> class has one <code>abstract<\/code> method called <code>prey<\/code> because each child class (animal) have their own ways of finding prey and a full implemented method called <code>run<\/code> because all animals can run, this doesn't need to be defined in each of child classes. So here <code>run<\/code> method is fully implemented and represents common data that needs to be shared across child classes.<\/p>\n<p>Notice that other than common fully implemented methods inside an abstract class, you can also have common data members eg variables that need to be shared across child classes.<\/p>\n<hr \/>\n<pre>\nAn interface cannot have access modifiers by default everything is assumed as public | An abstract class can contain access modifiers for the subs, functions, properties\n<\/pre>\n<p>By access modifiers, we mean ability to change scoping by using keywords like <a href=\"http:\/\/stackoverflow.com\/questions\/4361553\/php-public-private-protected\"><code>public<\/code>, <code>private<\/code> and <code>protected<\/code><\/a>. We cannot use these for interfaces but we can use them for everything in abstract classes.<\/p>\n<hr \/>\n<pre>\nMembers of interface can not be Static | Only Complete Member of abstract class can be Static\n<\/pre>\n<p>This is again possible in PHP (as of now with PHP 5.4) unlike other languages, so you CAN do:<\/p>\n<pre><code>interface MyInterface {\n    static function foo();\n}<\/code><\/pre>\n<p>Notice the addition of keyword <code>static<\/code> to mark it as static method.<\/p>\n<p>For abstract class, you can have static members as well as those methods that are implemented in the abstract class:<\/p>\n<pre><code>abstract class MyAbstractClass {\n    public static $foo = null;\n\n    public static function foo() {}\n}<\/code><\/pre>\n<p>But you cannot have a method to be both <code>static<\/code> and <code>abstract<\/code>, so you cannot do this, which is common across the languages:<\/p>\n<pre><code>abstract class MyAbstractClass {\n    public static $foo = null;\n\n    abstract static function foo() {} \/\/ error\n}<\/code><\/pre>\n<hr \/>\n<p>In conclusion, interface and abstract classes are completely different from each other, you cannot interchange them or use one as alternative over the other. Interfaces are completely empty shells that expect child classes to implement everything for them. On the other hand, abstract class can not only contain <em>common piece of information<\/em> by implementing inside them but also expect child classes to fill in the remaining gaps.<\/p>",
			"addpost": "addpost",
			"dated": "April 18, 2015 08:26 PM",
			"slug": "abstract-class-vs-interface",
			"categoryslug": "php",
			"status": "publised",
			"summary": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/REC-html40\/loose.dtd\">\n<html><body><p>I found this picture that tells the difference between <code>abstract class<\/code> and <code>interface<\/code>:<\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/142937584655328b66dcedc.png\" alt=\"enter image description here\"\/><\/p>\n<hr\/><p>Let's see each comparison practically so we know what...<\/p><\/body><\/html>\n",
			"showbody": "1"
		},
		{
			"title": "PHPExecute \u2013 PHP Code Runner",
			"tags": [
				"php",
				"phpexecute",
				"runner",
				"tester"
			],
			"category": "PHP",
			"body": "<p>Often times, you quickly need to test some PHP code. To do so, you create a file, put it in web root folder, write some code in it, open its URL and then you see its output. This is kind of lot of work and I often need a way to quickly test my PHP code. This requirement made me create my own code testing tool, <strong>PHPExecute<\/strong>.<\/p>\n<p>PHPExecute is the fastest way to test PHP code. You write the code, hit the execute button, an ajax request is triggered and you see the output fast without page refresh. Here are some of the cool things about it:<\/p>\n<ul>\n<li>Very fast way to test your code<\/li>\n<li>Nice friendly interface<\/li>\n<li>Code  Highlighting<\/li>\n<li>Useful PHP, system information panel<\/li>\n<li>Saving favorite code snippets<\/li>\n<li>Adding useful classes<\/li>\n<li>Easy to extend as per your needs<\/li>\n<\/ul>\n<p><strong>Screenshot<\/strong><\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/1428864689552abeb12a929.gif\" alt=\"enter image description here\" \/><\/p>\n<h2>Extending PHPExecute<\/h2>\n<p>The good thing is that you can download (see below) it, see its source code and extend it however you like according to your needs. For example, you can add classes for testing, performance or any other purpose. One can even integrate bash commands (I am not going into details of that) to make it even more useful tool to work with.<\/p>\n<h2>Usage Notes<\/h2>\n<ul>\n<li>\n<p>PHPExecute uses <a href=\"http:\/\/php.net\/manual\/en\/function.eval.php\"><code>eval<\/code><\/a> function to run the code. It is strongly recommended that you should use that tool for local testing only and not on production server due to security reasons. If you do, you use it on your own risk.<\/p>\n<\/li>\n<li>\n<p>In order to save snippets, PHPExecute uses <a href=\"http:\/\/en.wikipedia.org\/wiki\/Web_Storage\">localStorage<\/a> feature which is available in latest browsers (and IE9+) only and also it can be around <strong>5MB<\/strong> in size. This isn\u2019t that ideal if you are going to save a lot of snippets but you can always extend PHPExecute to add database support and save your snippets there.<\/p>\n<\/li>\n<li>The custom functions that can be used in PHPExecute can be found in <strong>includes\/functions.php<\/strong> file. You can add any functions in that file that you want to use directly inside PHPExecute. The custom functions can also be seen in <strong>PHP Info &gt; User Defined Functions<\/strong>.<\/li>\n<\/ul>\n<hr \/>\n<p><strong>Download<\/strong><\/p>\n<p><a href=\"https:\/\/github.com\/sarfraznawaz2005\/PHPExecute\">Download PHPExecute at Github<\/a><\/p>\n<p>I hope PHPExecute turns out to be a useful tool for you. Please do share if you add anything to it via comments so that we could know it and integrate ourselves too :)<\/p>",
			"addpost": "addpost",
			"dated": "April 12, 2015 08:57 PM",
			"slug": "phpexecute-php-code-runner",
			"categoryslug": "php",
			"status": "publised",
			"prevStatus": "publised",
			"summary": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/REC-html40\/loose.dtd\">\n<html><body><p>Often times, you quickly need to test some PHP code. To do so, you create a file, put it in web root folder, write some code in it, open its URL and then you see its output. This is kind of lot of work and I often need a way to quickly test my PHP code. This requirement made me create my own code...<\/p><\/body><\/html>\n",
			"author": "Sarfraz Ahmed",
			"showbody": "1"
		},
		{
			"title": "Outputting PHP To Browser Console",
			"tags": [
				"browser",
				"console",
				"devtools",
				"php"
			],
			"category": "PHP",
			"body": "<p>Although there exist <strong>classes<\/strong> for outputting PHP to browser console such as Google\u2019s <strong>PHP Console<\/strong> and certain others, I was looking for a way to output PHP to browser console without including those classes in my PHP files or installing any browser plugin to do the same. Currently, I am working on Facebook application development in which you have to commit\/upload the code to check certain output out of PHP unlike offline development where you check the code output before committing it up. This makes Facebook application development a longer process for a developer but you got to live with it because you don\u2019t have a choice.<\/p>\n<p>Anyways, to speed up the code output checking process a little and rather using <code>debug_backtrace<\/code>, <code>print_r<\/code>, <code>print<\/code>, <code>echo<\/code>, <code>var_dump<\/code>, etc which you need to remove\/comment again, I created a function to get output of PHP on the browser console. One could use <code>error_log<\/code> function but even that makes you go to your log file and then see the output. Of course, browser needs to support\/have the console so that code result is output there. Because IE less than 8 doesn't have console, this won\u2019t work in IE less than 8, though result won\u2019t be affected in it. Notice that you can see console in IE=&gt;8 by pressing <kbd>F12<\/kbd> key and then going to <strong>Script<\/strong> tab where you need to make sure <strong>Console<\/strong> tab is selected on the right side.<\/p>\n<p>Here is the function:<\/p>\n<pre><code> \/**\n * Logs messages\/variables\/data to browser console from within php\n *\n * @param $name: message to be shown for optional data\/vars\n * @param $data: variable (scalar\/mixed) arrays\/objects, etc to be logged\n * @param $jsEval: whether to apply JS eval() to arrays\/objects\n *\n * @return none\n * @author Sarfraz\n *\/\n function logConsole($name, $data = NULL, $jsEval = FALSE)\n {\n      if (! $name) return false;\n\n      $isevaled = false;\n      $type = ($data || gettype($data)) ? 'Type: ' . gettype($data) : '';\n\n      if ($jsEval &amp;&amp; (is_array($data) || is_object($data)))\n      {\n           $data = 'eval(' . preg_replace('#[\\s\\r\\n\\t\\0\\x0B]+#', '', json_encode($data)) . ')';\n           $isevaled = true;\n      }\n      else\n      {\n           $data = json_encode($data);\n      }\n\n      # sanitalize\n      $data = $data ? $data : '';\n      $search_array = array(\"#'#\", '#\"\"#', \"#''#\", \"#\\n#\", \"#\\r\\n#\");\n      $replace_array = array('\"', '', '', '\\\\n', '\\\\n');\n      $data = preg_replace($search_array,  $replace_array, $data);\n      $data = ltrim(rtrim($data, '\"'), '\"');\n      $data = $isevaled ? $data : ($data[0] === \"'\") ? $data : \"'\" . $data . \"'\";\n\n$js = &lt;&lt;&lt;JSCODE\n\\n&lt;script&gt;\n \/\/ fallback - to deal with IE (or browsers that don't have console)\n if (! window.console) console = {};\n console.log = console.log || function(name, data){};\n \/\/ end of fallback\n\n console.log('$name');\n console.log('------------------------------------------');\n console.log('$type');\n console.log($data);\n console.log('\\\\n');\n&lt;\/script&gt;\nJSCODE;\n\n      echo $js;\n } # end logConsole<\/code><\/pre>\n<p>Here is an example of how to use it:<\/p>\n<pre><code>$name = 'sarfraz';\n$fruits = array(\"banana\", \"apple\", \"strawberry\", \"pineaple\");\n\n$user = new stdClass;\n$user-&gt;name = \"Sarfraz\";\n$user-&gt;desig = \"Sr. Software Engineer\";\n$user-&gt;lang = \"PHP\";\n\nlogConsole('$name var', $name, true);\nlogConsole('An array of fruits', $fruits, true);\nlogConsole('$user object', $user, true);<\/code><\/pre>\n<p>It would result in:<\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/1428862620552ab69c5381f.gif\" alt=\"enter image description here\" \/><\/p>\n<p>Although this does not prevent committing code first to see the code output if you are on facebook application development but it defintely does save some time. I have been using this function successfully so far, please let me know your ideas if any on how to improve this piece of code further. <\/p>",
			"addpost": "addpost",
			"dated": "April 12, 2015 08:23 PM",
			"slug": "outputting-php-to-browser-console",
			"categoryslug": "php",
			"status": "publised",
			"prevStatus": "publised",
			"summary": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/REC-html40\/loose.dtd\">\n<html><body><p>Although there exist <strong>classes<\/strong> for outputting PHP to browser console such as Google&#x2019;s <strong>PHP Console<\/strong> and certain others, I was looking for a way to output PHP to browser console without including those classes in my PHP files or installing any browser plugin to ...<\/p><\/body><\/html>\n",
			"author": "Sarfraz Ahmed",
			"showbody": "1"
		},
		{
			"title": "My Local Development Workflow with WAMP\/XAMPP, GIT and Google Drive",
			"tags": [
				"development",
				"drive",
				"git",
				"googledrive",
				"php",
				"wamp",
				"workflow",
				"xampp"
			],
			"category": "PHP",
			"body": "<p>I like to share my local development workflow which has turned out to be <strong>extremely useful<\/strong> in that all my projects\u2019 files are <strong>version-ed and on the cloud<\/strong>. I use <strong>git<\/strong> to keep my files versioned and <strong>Google Drive<\/strong> so that I can access my projects anywhere. In this post, I will share really cool stuff that you definitely should consider implementing for your own projects.<\/p>\n<p>If you don\u2019t know about git and its benefits, there are numerous compelling reasons why it is useful, you might want to check out:<\/p>\n<ul>\n<li><a href=\"http:\/\/learn.github.com\/p\/intro.html\">Introduction To Git<\/a><\/li>\n<li><a href=\"http:\/\/www.gitology.com\/chapter\/benefits-of-using-git\">The Benefits of Using Git<\/a><\/li>\n<li><a href=\"http:\/\/coding.smashingmagazine.com\/2011\/07\/26\/modern-version-control-with-git-series\/\">Modern Version Control With Git<\/a><\/li>\n<li><a href=\"http:\/\/whygitisbetterthanx.com\/#svn\">whygitisbetterthanx.com<\/a><\/li>\n<\/ul>\n<p>The benefits of keeping all my files and projects on the cloud like Google Drive should be obvious but if you are still not sure, check out:<\/p>\n<ul>\n<li><a href=\"http:\/\/www.salesforce.com\/uk\/socialsuccess\/cloud-computing\/why-move-to-cloud-10-benefits-cloud-computing.jsp\">Why Move to the Cloud? 10 Benefits of Cloud Computing<\/a><\/li>\n<li><a href=\"http:\/\/www.go-oodles.com\/index.php\/2012\/08\/the-six-key-business-benefits-of-google-drive\/\">The Six Key Business Benefits of Google Drive<\/a><\/li>\n<\/ul>\n<p>Although there are many other cloud storage services such as <a href=\"https:\/\/skydrive.live.com\/\">Microsoft SkyDrive<\/a>, <a href=\"https:\/\/www.dropbox.com\/\">Dropbox<\/a>, <a href=\"https:\/\/www.box.com\/\">Box<\/a>, <a href=\"http:\/\/www.bitcasa.com\/\">Bitcasa<\/a>, etc but I chose Google Drive since it gives 10GB of free space which should be enough for my development needs. If that\u2019s not enough for you, you can create another Gmail account and get another 10GB free. You might want to read their usage policies too if you want.  You may also consider using Bitcasa which gives you unlimited space but since it is new, I can\u2019t personally trust it as yet.<\/p>\n<h2>Installing Google Drive<\/h2>\n<p><strong>Step 1:<\/strong> <a href=\"https:\/\/mail.google.com\/\">Create a new Gmail account<\/a> to be used with Google Drive client software. Although you can use your existing account but it is good idea to create a new one used for your projects\u2019 backup only.<\/p>\n<p><strong>Step 2:<\/strong> Download Google Drive from <a href=\"https:\/\/tools.google.com\/dlpage\/drive\">here<\/a> or <a href=\"http:\/\/filehippo.com\/download_google_drive\/\">here<\/a>. During the installation, you would be asked to specify the folder path which will be synchronized with Google Drive. Make sure that you specify a folder present on any drive other than your OS drive so that even if your system crashes or corrupts, your projects remain intact. For example, I have that folder on path D:\/Google Drive\/<\/p>\n<p><strong>Step 3:<\/strong>  Once installed, run Google Drive software and specify the credentials of your newly created Gmail account.<\/p>\n<h2>Using Google Drive with WAMP\/XAMPP<\/h2>\n<p>Now that we\u2019ve setup google drive, it is time to setup document root to google drive folder and create virtual host. This would allow you to run your local projects through WAMP\/XAMPP from google drive folder. The reason why we do this is that since google drive folder will be sync by google drive software, any project we put in that folder will automatically be uploaded in your google drive account.<\/p>\n<blockquote>\n<p><strong>Note:<\/strong> I am using XAMPP but if you are using WAMP, some settings or file paths might be different, you should consider reading its\ndocumentation.<\/p>\n<\/blockquote>\n<p><strong>Step 1:<\/strong> Inside your google drive folder, create a new folder named <strong>webroot<\/strong> making whole path <strong>X:\\Google Drive\\webroot<\/strong> where <strong>X<\/strong> represents your drive letter.<\/p>\n<p><strong>Step 2:<\/strong> Assuming you have specified google drive folder to be  <strong>D:\/Google Drive\/<\/strong>, open <strong>httpd.conf<\/strong> (normally located at <strong>apache\\conf<\/strong> folder) file in notepad or other text editor and find the line <strong>Include \u201cconf\/extra\/httpd-vhosts.conf\u201d<\/strong>. If there is a hash (#) before that line, remove it. Now find the line with <strong><Directory \/><\/strong> and you should see something similar to:<\/p>\n<pre><code>&lt;Directory \/&gt;\n   AllowOverride none\n   Require all denied\n&lt;\/Directory&gt;<\/code><\/pre>\n<p>Change <strong>Require all denied<\/strong>  to <strong>Require all granted<\/strong><\/p>\n<p>Or if you see something like:<\/p>\n<pre><code>&lt;Directory \/&gt;\n    Options FollowSymLinks\n    AllowOverride None\n    Order deny,allow\n    Deny from all\n&lt;\/Directory&gt;<\/code><\/pre>\n<p>Change it to:<\/p>\n<pre><code>&lt;Directory \/&gt;\n    ........\n    Allow from all\n&lt;\/Directory&gt;<\/code><\/pre>\n<p>Now come to bottom of the file and add:<\/p>\n<pre><code>&lt;Directory \"D:\\Google Drive\\webroot\"&gt;\n  Options Indexes MultiViews\n  Order Allow,Deny\n  Allow from all\n&lt;\/Directory&gt;<\/code><\/pre>\n<p>Save the file and close it.<\/p>\n<p><strong>Step 3:<\/strong> Open <strong>httpd-vhosts.conf<\/strong> (normally located at <strong>apache\\conf\\extra<\/strong> folder) and add these lines at the end of it:<\/p>\n<pre><code>&lt;VirtualHost 127.0.0.1:80&gt;\n    DocumentRoot \"D:\/Google Drive\/webroot\"\n    ServerName gdroot.loc\n    ServerAlias gdroot.loc\n    ErrorLog \"D:\/Google Drive\/webroot\/logs\/error.log\"\n    CustomLog \"D:\/Google Drive\/webroot\/logs\/access.log\" combined\n&lt;\/VirtualHost&gt;<\/code><\/pre>\n<p>Save the file and close it. Notice that we have specified <strong>gdroot.loc<\/strong> as address which actually means google drive root (<strong>.loc<\/strong> signals that it is local folder) which actually maps to your google drive webroot folder eg <strong>D:\/Google Drive\/webroot<\/strong>. Notice that you could name it anything you want like <strong>mycoolwebsite.com, yourname.com<\/strong>, etc but of course that is local folder running from your own computer.<\/p>\n<p><strong>Step 4:<\/strong> Open <strong>hosts<\/strong> file in notepad or other text editor located at <strong>X:\\Windows\\System32\\drivers\\etc<\/strong> where <strong>X<\/strong> stands for drive letter where your OS is installed. At the end of that file add this line assuming you specified URL in above step as <strong>gdroot.loc<\/strong>:<\/p>\n<pre><code>127.0.0.1       gdroot.loc<\/code><\/pre>\n<p>Or if you also use port to access your LAMP\/XAMPP URLs, specify that as well:<\/p>\n<pre><code>127.0.0.1:PORT_NUMBER_HERE       gdroot.loc<\/code><\/pre>\n<blockquote>\n<p><strong>Note:<\/strong> If you can\u2019t edit hosts file, you need to have file owner permission, search on Google how to do that.<\/p>\n<\/blockquote>\n<p>Restart apache and access the new url by typing <strong>gdroot.loc<\/strong> in your browser. You should see screen similar to when you go to <a href=\"http:\/\/localhost\">http:\/\/localhost<\/a>.<\/p>\n<p>Congratulations ! you have a nice workflow now. You can now put all your existing our new projects inside your new document root which was assumed to be located at <strong>D:\\Google Drive\\webroot<\/strong> and now all your projects are sync with google drive and automatically uploaded to your google account which you can access anywhere. For example, you can now access your projects at office or any other computer by installing google drive client software  there and telling it sync\/download your webroot folder. Your projects are now always there and backed up on the cloud :)<\/p>\n<p>Let\u2019s take cool stuff one step further by using <strong>git<\/strong> so that our projects file are also <strong>version-ed<\/strong>. If you don\u2019t know much about git and its benefits consider reading links posted above or below in the <strong>Git Resources<\/strong> section.<\/p>\n<h2>Using Git with a Central Repository<\/h2>\n<p>Creating and using central repository is especially useful in a team. If you just want to keep your projects version-ed and are the only developer working on a project, the normal flow is (unless you track your project to remote host such as <a href=\"http:\/\/github.com\/\">github<\/a>):<\/p>\n<ul>\n<li>modify files<\/li>\n<li>commit your changes<\/li>\n<li>repeat<\/li>\n<\/ul>\n<p>So essentially you can skip this section if you just want to version your project files and are only developer working on a project.<\/p>\n<p><strong>Step 1:<\/strong> Download msysgit from <a href=\"http:\/\/code.google.com\/p\/msysgit\/downloads\/list\">here<\/a>, choose first link from there. Install it with default settings.<\/p>\n<p><strong>Step 2:<\/strong> Go to your google drive folder (<strong>D:\\Google Drive\\<\/strong>) and create a new folder there named <strong>central.git<\/strong><\/p>\n<p><strong>Step 3:<\/strong> Right click on newly created folder and choose <strong>Git Bash Here<\/strong> and type: <\/p>\n<pre><code>git init \u2013bare<\/code><\/pre>\n<p><strong>Step 4:<\/strong> Create a test project folder named <strong>myproject<\/strong> inside your normal WAMP\/XAMPP webroot\/htdocs folder or google drive webroot folder mentioned above (Although you can git-manage any folder anywhere on the drive but naturally we want to git-manage projects that we run from webroot\/htdocs folder).<\/p>\n<p><strong>Step 5:<\/strong> Right click on newly created folder, choose <strong>Git Bash Here<\/strong> and issue these commands one by one:<\/p>\n<pre><code>git init\ngit remote add central \/e\/Google\\ Drive\/central.git\/\ngit push --all central\ngit push --set-upstream-to central master<\/code><\/pre>\n<p>Great! now we\u2019ve setup central repository for all our git-managed projects and we can commit, push, fetch all changes from that central repository. For any new repository, you can now issue commands like:<\/p>\n<pre><code>git clone \/e\/Google\\ Drive\/central.git\/\ngit fetch \/e\/Google\\ Drive\/central.git\/\ngit push central\nand so on<\/code><\/pre>\n<p>That's it.<\/p>\n<h2>Git Resources<\/h2>\n<ul>\n<li><a href=\"http:\/\/learn.github.com\/p\/intro.html\">Introduction To Git<\/a><\/li>\n<li><a href=\"http:\/\/stackoverflow.com\/questions\/315911\/git-for-beginners-the-definitive-practical-guide\">Git for beginners: The definitive practical guide<\/a><\/li>\n<li><a href=\"http:\/\/net.tutsplus.com\/tutorials\/other\/easy-version-control-with-git\/\">Easy Version Control with Git<\/a><\/li>\n<li><a href=\"http:\/\/git-scm.com\/book\">Pro Git Book<\/a><\/li>\n<li><a href=\"http:\/\/gitref.org\/\">Git Reference<\/a><\/li>\n<li><a href=\"http:\/\/net.tutsplus.com\/?s=git\">and more<\/a><\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "April 12, 2015 01:24 PM",
			"slug": "my-local-development-workflow-with-wamp-xampp-git-and-google-drive",
			"categoryslug": "php",
			"status": "publised",
			"prevStatus": "publised",
			"summary": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/REC-html40\/loose.dtd\">\n<html><body><p>I like to share my local development workflow which has turned out to be <strong>extremely useful<\/strong> in that all my projects&#x2019; files are <strong>version-ed and on the cloud<\/strong>. I use <strong>git<\/strong> to keep my files versioned and <strong>Google Drive<\/strong> so that I can a...<\/p><\/body><\/html>\n",
			"author": "Sarfraz Ahmed",
			"showbody": "1"
		},
		{
			"title": "GoodTodo PHP and SQlite App",
			"tags": [
				"app",
				"php",
				"sqlite",
				"todo"
			],
			"category": "PHP",
			"body": "<p>I really like to keep track of tasks and projects (personal or otherwise) I work on. I used to keep my todos list in notepad or by using some other sticky notes application but I wanted dead simple todos app with beautiful looks and simple to use without irrelevant options or goodies. So here I introduce GoodTodo; a todo app made via PHP and SQlite. I chose SQlite because I wanted to make sure that app is portable and of course since it\u2019s small todo app, choosing SQlite for it makes perfect sense. I have used <a href=\"http:\/\/flightphp.com\/\">flightPHP<\/a> framework and <a href=\"http:\/\/j4mie.github.io\/idiormandparis\/\">idiorm ORM<\/a> for it.<\/p>\n<p>Here are its screenshots:<\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/1428836471552a507761961.png\" alt=\"enter image description here\" \/><\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/1428836475552a507b38615.png\" alt=\"enter image description here\" \/><\/p>\n<p><img src=\"https:\/\/codeinphp.github.io\/images\/1428836467552a50733de24.png\" alt=\"enter image description here\" \/><\/p>\n<p><strong>How to use:<\/strong><\/p>\n<p>Make sure you have wamp\/xampp or other stack installed. Download the app and put in www\/htdocs folder and browse to that folder via browser something like <a href=\"http:\/\/localhost\/todo\">http:\/\/localhost\/todo<\/a>. Please make sure you have sqlite extension turned on from php.ini if it isn\u2019t already.<\/p>\n<p>So go ahead and <a href=\"https:\/\/dl.dropboxusercontent.com\/u\/11600057\/todo.zip\">download GoodTodo<\/a> to keep track of your todos.<\/p>",
			"savedraft": "savedraft",
			"dated": "April 12, 2015 01:03 PM",
			"slug": "goodtodo-php-and-sqlite-app",
			"categoryslug": "php",
			"status": "publised",
			"addpost": "addpost",
			"prevStatus": "publised",
			"summary": "<?xml version=\"1.0\" standalone=\"yes\"?>\n<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.0 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/REC-html40\/loose.dtd\">\n<html><body><p>I really like to keep track of tasks and projects (personal or otherwise) I work on. I used to keep my todos list in notepad or by using some other sticky notes application but I wanted dead simple todos app with beautiful looks and simple to use without irrelevant options or goodies. So here I i...<\/p><\/body><\/html>\n",
			"author": "Sarfraz Ahmed",
			"showbody": "1"
		},
		{
			"title": "BloggerCMS  - An Static Blog Generator CMS",
			"tags": [
				"bloggercms",
				"cms",
				"php",
				"static"
			],
			"category": "BloggerCMS",
			"body": "<p>In the <a href=\"https:\/\/codeinphp.github.io\/post\/welcome.html\">last post<\/a>, I had mentioned about BloggerCMS which is used to build this very blog. BloggerCMS is dead simple CMS that can be used to create fully functional static blogs. Although there are <a href=\"https:\/\/github.com\/pinceladasdaweb\/Static-Site-Generators#php\">quite some static site generators<\/a> out there but I created BloggerCMS because I was missing these features in any of those static site generators:<\/p>\n<ul>\n<li>Web interface that allows me to create blog posts, add pages and more instead of writing blog posts manually in bunch of different text files<\/li>\n<li>Markdown editor with live preview feature so that I don't have to type Markdown syntax myself<\/li>\n<li>I needed a true blog generator instead of generic\/advanced site generator<\/li>\n<\/ul>\n<p>Those three things are the driving force why I created BloggerCMS. Here is complete list of features of BloggerCMS as of now:<\/p>\n<ul>\n<li><strong>Graphical User Interface<\/strong> - manage your site via a browser<\/li>\n<li><strong>File-based<\/strong> - no database required<\/li>\n<li><strong>Truly Static<\/strong> - no server-side languages needed<\/li>\n<li><strong>Portability<\/strong> - copy, move, backup or version control your site easily<\/li>\n<li><strong>Integrated Markdown Editor<\/strong> - no need to know Markdown<\/li>\n<li><strong>Built-in Images Manager<\/strong><\/li>\n<li><strong>Disqus Commenting System<\/strong><\/li>\n<li><strong>Search Posts Feature<\/strong><\/li>\n<li><strong>Pagination<\/strong><\/li>\n<li><strong>Responsive Layout<\/strong> - get started easily with the included responsive layout<\/li>\n<li><strong>RSS Support<\/strong><\/li>\n<li><strong>Sitemap Support<\/strong><\/li>\n<li><strong>Google Analytics<\/strong><\/li>\n<li><strong>Code Highlight Support<\/strong><\/li>\n<li><strong>Tags Cloud Support<\/strong><\/li>\n<li><strong>Social Follow Section<\/strong><\/li>\n<li><strong>Categories Section<\/strong><\/li>\n<li><strong>Archives Section<\/strong><\/li>\n<\/ul>\n<p>To know more about BloggerCMS, head over to <a href=\"https:\/\/bloggercms.github.io\">it's blog<\/a> or see <a href=\"https:\/\/bloggercms.github.io\/post\/introducing-bloggercms.html\">introductory post<\/a>.<\/p>",
			"addpost": "addpost",
			"dated": "April 06, 2015 09:41 PM",
			"slug": "bloggercms-an-static-blog-generator-cms",
			"status": "publised",
			"generated": "1",
			"showbody": "1",
			"categoryslug": "bloggercms",
			"author": "Sarfraz Ahmed",
			"prevStatus": "publised",
			"summary": "\n<p>In the <a href=\"https:\/\/codeinphp.github.io\/post\/welcome.html\">last post<\/a>, I had mentioned about BloggerCMS which is used to build this very blog. BloggerCMS is dead simple CMS that can be used to create fully functional static blogs. Although there are <a href=\"https:\/\/github.com\/pinceladasda...\"><\/a><\/p>\n"
		},
		{
			"title": "Welcome !",
			"tags": [
				"blog"
			],
			"category": "BloggerCMS",
			"body": "<p><strong>Hello, World !<\/strong><\/p>\n<p>This is my first post on this blog hosted at awesome <a href=\"https:\/\/pages.github.com\/\">github pages<\/a>. Previously I used to blog on wordpress <a href=\"http:\/\/sarfraznawaz.wordpress.com\">here<\/a> but I switched to github pages because I really wanted to have static blog with free hosting and ability to write up quick posts using <a href=\"http:\/\/en.wikipedia.org\/wiki\/Markdown\">Markdown<\/a> syntax. In the <a href=\"https:\/\/codeinphp.github.io\/post\/bloggercms-an-static-blog-generator-cms.html\">next post<\/a>, I will write about <strong><a href=\"https:\/\/bloggercms.github.io\">BloggerCMS<\/a><\/strong>, a CMS I have made that helps create static blogs. This blog has also been generated via BloggerCMS :)<\/p>\n<p>On this blog, I intend to write my ideas mainly about PHP as well as other related web development technologies. <\/p>\n<p><em>Stay tuned :)<\/em><\/p>",
			"addpost": "addpost",
			"dated": "April 05, 2015 03:46 PM",
			"slug": "welcome",
			"status": "publised",
			"generated": "1",
			"showbody": "1",
			"categoryslug": "bloggercms",
			"author": "Sarfraz Ahmed",
			"prevStatus": "publised",
			"summary": "\n<p><strong>Hello, World !<\/strong><\/p>\n<p>This is my first post on this blog hosted at awesome <a href=\"https:\/\/pages.github.com\/\">github pages<\/a>. Previously I used to blog on wordpress <a href=\"http:\/\/sarfraznawaz.wordpress.com\">here<\/a> but I switched to github pages because I really wanted to h...<\/p>\n"
		}
	],
	"latestPosts": [
		{
			"author": "Sarfraz Ahmed",
			"title": "Laravel: Automatic Vendor Cleanup Command",
			"tags": [
				"command",
				"laravel",
				"vendor"
			],
			"category": "PHP",
			"body": "<p>When installing composer packages, they come up with <strong>lot of useless files and folders<\/strong> such as <code>.git<\/code>, <code>tests<\/code>, <code>readme.md<\/code> and more. When project becomes bigger with many packages, this junk takes considerable disk space. Since I work with Laravel framework most of the time, I created a command that allows me to automatically delete all these junk files whenever I happen to install or update composer packages.<\/p>\n<p>Here is the pattern used by <code>glob<\/code> function to detect and delete all junk files:<\/p>\n<pre><code>protected $patterns = [\n    '.git',\n    '.github',\n    'test',\n    'tests',\n    'travis',\n    'demo',\n    'demos',\n    'license',\n    'changelog*',\n    'contributing*',\n    'upgrading*',\n    'upgrade*',\n    '.idea',\n    '.vagrant',\n    'readme*',\n    '_ide_helper.php',\n    '{,.}*.yml',\n    '*.yaml',\n    '*.md',\n    '*.xml',\n    '*.log',\n    '*.txt',\n    '*.dist',\n    '*.pdf',\n    '*.xls',\n    '*.doc',\n    '*.docx',\n    '*.png',\n    '*.gif',\n    '*.jpg',\n    '*.bmp',\n    '*.jpeg',\n    '*.ico',\n    '.php_cs*',\n    '.scrutinizer',\n    '.gitignore',\n    '.gitattributes',\n    '.editorconfig',\n    'dockerfile',\n    'composer.json',\n    'composer.lock',\n];<\/code><\/pre>\n<p>The command itself can be <a href=\"https:\/\/github.com\/sarfraznawaz2005\/laravel55-starter\/blob\/master\/Modules\/Core\/Console\/VendorCleanup.php\">seen here<\/a>.<\/p>\n<p>To automatically cleanup junk files\/folders when installing or updating composer packages in Laravel, <code>@php artisan vendor:cleanup<\/code> should be added under the <code>post-autoload-dump<\/code> section in <code>composer.json<\/code> file. Or we can also trigger it manually anytime by typing <code>php artisan vendor:cleanup --o<\/code> where <code>--o<\/code> is optional argument to display verbose output.<\/p>\n<p>If you actually want to be able to use this idea of cleanup of useless files in any PHP project (Laravel or not), you might want to create a <a href=\"https:\/\/getcomposer.org\/doc\/articles\/plugins.md\">composer plugin<\/a> instead and install it globally that can then work across PHP projects and cleanup useless files from the <code>vendor<\/code> folder.<\/p>\n<p>If you witness any issue or something missing in the pattern list shown above, please leave your suggestion\/improvements in comments. Thanks<\/p>",
			"addpost": "addpost",
			"dated": "January 25, 2018 12:16 AM",
			"slug": "laravel-automatic-vendor-cleanup-command",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>When installing composer packages, they come up with <strong>lot of useless files and folders<\/strong> such as <code>.git<\/code>, <code>tests<\/code>, <code>readme.md<\/code> and more. When project becomes bigger with many packages, this junk takes considerable disk space. Since I work with Laravel...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Whatsapp Chat from CLI Using Puppeteer",
			"tags": [
				"console",
				"whatsapp",
				"puppeteer"
			],
			"category": "Random",
			"body": "<p><a href=\"https:\/\/github.com\/GoogleChrome\/puppeteer\">GoogleChrome puppeteer<\/a>  is interesting project to create browser automation tools, testing tools or web scrapping. I was wondering to use it for something useful and an idea popped in about creating CLI application that can be used to send and receive messages on Whatsapp. So I went on to creating <strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/whatspup\">Whatspup<\/a><\/strong>, a name based on both Whatsapp and puppeteer.<\/p>\n<h2>Features<\/h2>\n<ul>\n<li>Send and receive messages<\/li>\n<li>Read Receipts<\/li>\n<li>Switch between users to chat with<\/li>\n<li>Popup notifications for new chat messages<\/li>\n<li>Privacy settings for popup notifications<\/li>\n<li>One-time authentication, no need to scan QR code again and again<\/li>\n<li>Windowless\/headless (hidden) mode<\/li>\n<li>Colorful chat messages<\/li>\n<\/ul>\n<h2>Screenshot<\/h2>\n<p><img src=\"https:\/\/raw.githubusercontent.com\/sarfraznawaz2005\/whatspup\/master\/screenshot.jpg\" alt=\"Main Window\" \/><\/p>\n<hr \/>\n<p><strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/whatspup\">Head over to Whatspup repository and start using it :)<\/a><\/strong><\/p>",
			"addpost": "addpost",
			"dated": "December 10, 2017 04:06 PM",
			"slug": "whatsapp-chat-from-cli-using-puppeteer",
			"categoryslug": "random",
			"status": "publised",
			"summary": "\n<p><a href=\"https:\/\/github.com\/GoogleChrome\/puppeteer\">GoogleChrome puppeteer<\/a>  is interesting project to create browser automation tools, testing tools or web scrapping. I was wondering to use it for something useful and an idea popped in about creating CLI application that can be used to send a...<\/p>\n",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Laravel QueryDumper",
			"tags": [
				"laravel",
				"php",
				"sql",
				"log"
			],
			"category": "PHP",
			"body": "<p>I wanted simple and quick way to see all running queries on any page of my laravel application especially accompanied by MySQL's <code>EXPLAIN<\/code> results. So I created very simple package called <strong>Laravel QueryDumper<\/strong> that allows me see just that.<\/p>\n<h1>Screenshot<\/h1>\n<p><img src=\"https:\/\/camo.githubusercontent.com\/35a43c98152c978c9df07b32f833609fe065edac\/68747470733a2f2f7261772e6769746875622e636f6d2f7361726672617a6e6177617a323030352f717565727964756d7065722f6d61737465722f73637265656e2e706e67\" alt=\"enter image description here\" \/><\/p>\n<hr \/>\n<p><strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/querydumper\">Checkout Laravel QueryDumper<\/a><\/strong><\/p>",
			"addpost": "addpost",
			"dated": "September 16, 2017 06:16 PM",
			"slug": "laravel-querydumper",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>I wanted simple and quick way to see all running queries on any page of my laravel application especially accompanied by MySQL's <code>EXPLAIN<\/code> results. So I created very simple package called <strong>Laravel QueryDumper<\/strong> that allows me see just that.<\/p>\n<h1>Screenshot<\/h1>\n<p><img...><\/img...><\/p>\n",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Introducing Floyer",
			"tags": [
				"deployment",
				"ftp",
				"git",
				"php",
				"svn"
			],
			"category": "PHP",
			"body": "<p>At my company, they still use ^svn^ and on top of that ^ftp^ and it was pain in the ass to upload files especially when client didn't have dedicated hosting or where there was no SSH access available. I did find some git-to-ftp or svn-to-ftp deployment tools but they were very slow because they uploaded each file individually.<\/p>\n<p>I sat down over the weekend and came up with my own solution <strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/floyer\">Floyer<\/a><\/strong> (shortened from FTPDeployer). It works with both <code>git<\/code> and <code>svn<\/code> and is quit fast able to upload hundreds of files in few seconds. Other than FTP, it also supports SFTP.<\/p>\n<h1>How does it work<\/h1>\n<ul>\n<li>It stores revision\/commit hash on the server in a file when deployment is started.<\/li>\n<li>On next deployment, it compares local revision with remote one thereby able to deploy only the files changed between these two revisions.<\/li>\n<li>Once it knows what files to upload, it creates zip archive of these files to be deployed on the server.<\/li>\n<li>Rather than uploading each file individually (which is very slow process), it creates and uploads zip archive file to server where there is corresponding extract zip PHP script which extracts these files very fast. This script is also created and uploaded by Floyer.<\/li>\n<li>After deployment is finished, zip archive and extract script is deleted automatically.<\/li>\n<\/ul>\n<p>Deploying by uploading and extracting archive file not only makes deployment fast but also we don't have to worry about some permission issues or creating new directories and so on because extract script runs from server itself thereby avoiding these issues.<\/p>\n<h1>Screenshot<\/h1>\n<p><img src=\"https:\/\/camo.githubusercontent.com\/dbd0d6326b7820922db866f0095af8752ff6e3bf\/68747470733a2f2f7261772e6769746875622e636f6d2f7361726672617a6e6177617a323030352f666c6f7965722f6d61737465722f73637265656e73686f742e706e67\" alt=\"enter image description here\" \/><\/p>\n<p><strong><a href=\"https:\/\/github.com\/sarfraznawaz2005\/floyer\">Checkout Floyer at Github<\/a><\/strong><\/p>",
			"addpost": "addpost",
			"dated": "August 24, 2017 10:03 PM",
			"slug": "introducing-floyer",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>At my company, they still use ^svn^ and on top of that ^ftp^ and it was pain in the ass to upload files especially when client didn't have dedicated hosting or where there was no SSH access available. I did find some git-to-ftp or svn-to-ftp deployment tools but they were very slow because they u...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		},
		{
			"author": "Sarfraz Ahmed",
			"title": "Sockets with PHP and Node",
			"tags": [
				"node",
				"php",
				"realtime",
				"socket"
			],
			"category": "PHP",
			"body": "<p>I was looking to implement real time notifications system via sockets without having to use any third party services such as <a href=\"https:\/\/pusher.com\/\">Pusher<\/a>, etc. I just wanted to be able to send notifications from PHP side to the client and instantly show them on the web application similar to Facebook notifications. <\/p>\n<p>First I came across <a href=\"http:\/\/socketo.me\/\">ratchet<\/a> library, it worked great but problem emerged when setting it up on secure connection (https) on my host (siteground), tried apache proxy module and everything else told on the internet but to no avail (it seems siteground has problem with ratchet on https) so in the end I had to drop ratchet.<\/p>\n<p>Then I thought of using <a href=\"https:\/\/socket.io\/\">socket.io<\/a> with Node+PHP and with my research I came across <a href=\"https:\/\/github.com\/Wisembly\/elephant.io\">elephant.io<\/a> library (though it isn't updated recently) and this one worked wonderfully well both on non-secure and secure protocols allowing us to send and receive messages from PHP with node-based server.<\/p>\n<p>Here are the steps that I followed to get my notification system working.<\/p>\n<p><strong>Install elephant.io<\/strong><\/p>\n<p>For your PHP application, install <code>elephant.io<\/code> via composer:<\/p>\n<pre><code>composer require wisembly\/elephant.io<\/code><\/pre>\n<p><strong>Install Node Dependencies<\/strong><\/p>\n<p>Create a directory in your project root and under it create a file named <code>package.json<\/code> with these contents:<\/p>\n<pre><code>{\n    \"name\": \"elephantIO_example_emitter\",\n    \"version\": \"3.0.0\",\n    \"main\": \"server.js\",\n\n    \"scripts\": {\n        \"start\": \"supervisor --debug server.js\"\n    },\n\n    \"dependencies\": {\n        \"socket.io\": \"~1\",\n        \"winston\": \"*\"\n    }\n}<\/code><\/pre>\n<p>On newly created directory run command <code>npm install --save<\/code>. This will install <code>socket.io<\/code> and logger library.<\/p>\n<p>In same newly created directory, create a file <code>server.js<\/code> with these contents:<\/p>\n<pre><code>var server     = require('http').createServer(),\n    io         = require('socket.io')(server),\n    logger     = require('winston'),\n    port       = 1337;\n\n\/\/ Logger config\nlogger.remove(logger.transports.Console);\nlogger.add(logger.transports.Console, { colorize: true, timestamp: true });\nlogger.info('SocketIO &gt; listening on port ' + port);\n\nio.on('connection', function (socket){\n    var nb = 0;\n\n    logger.info('SocketIO &gt; Connected socket ' + socket.id);\n\n    socket.on('broadcast', function (message) {\n        ++nb;\n        logger.info('ElephantIO broadcast &gt; ' + JSON.stringify(message));\n\n        \/\/ send to all connected clients\n        io.sockets.emit(\"broadcast\", message);\n    });\n\n    socket.on('disconnect', function () {\n        logger.info('SocketIO : Received ' + nb + ' messages');\n        logger.info('SocketIO &gt; Disconnected socket ' + socket.id);\n    });\n});\n\nserver.listen(port);<\/code><\/pre>\n<p>Run <code>server.js<\/code> file through node by typing <code>node server.js<\/code>, you should see message that server has started on specified port.<\/p>\n<p><strong>Client Side<\/strong><\/p>\n<p>Put following javascript code in your application's page\/footer:<\/p>\n<pre><code>&lt;script src='\/\/cdnjs.cloudflare.com\/ajax\/libs\/socket.io\/1.7.4\/socket.io.min.js'&gt;&lt;\/script&gt;\n\n&lt;script&gt;\nvar socket = io.connect('\/\/127.0.0.1:1337');\n\nsocket.on('connect', function () {\n    console.log('connected');\n\n    socket.on('broadcast', function (data) {\n        \/\/console.log(data);\n        \/\/socket.emit(\"broadcast\", data);\n        alert(data.text);\n    });\n\n    socket.on('disconnect', function () {\n        console.log('disconnected');\n    });\n});\n&lt;\/script&gt;<\/code><\/pre>\n<p><strong>Sending Notification from PHP<\/strong><\/p>\n<p>Here is how you can send a message to all connected clients:<\/p>\n<pre><code>require __DIR__ . '\/vendor\/autoload.php';\n\nuse ElephantIO\\Client;\nuse ElephantIO\\Engine\\SocketIO\\Version1X;\n\n$client = new Client(new Version1X('\/\/127.0.0.1:1337'));\n\n$client-&gt;initialize();\n\/\/ send message to connected clients\n$client-&gt;emit('broadcast', ['type' =&gt; 'notification', 'text' =&gt; 'Hello There!']);\n$client-&gt;close();<\/code><\/pre>\n<p>and that's all there is to it.<\/p>\n<p><strong>Installing and Running Node on Production Site<\/strong><\/p>\n<p>I was on <code>CentOSv6<\/code> and I installed node by following <a href=\"https:\/\/www.a2hosting.com\/kb\/installable-applications\/manual-installations\/installing-node-js-on-managed-hosting-accounts\">this guide<\/a>. Then I created simple php file that will be run by cron so that node server is automatically started\/restarted if it is not running:<\/p>\n<pre><code>$nodePath = 'your node binary path here';\n$filePath = 'your server.js file path';\nshell_exec($nodePath . ' ' . $filePath);<\/code><\/pre>\n<p>and then specify that file in cron to run at your specified time intervals.<\/p>\n<p><strong>Important Notes<\/strong><\/p>\n<ul>\n<li>I was having bit of issue getting node path from PHP script where I initially installed it so I copied the nodejs folder to my <code>public_html<\/code> folder (app's root).<\/li>\n<li>On production site, I had to type actual server IP rather than <code>127.0.0.1<\/code> on client side code eg instead of <code>var socket = io.connect('\/\/127.0.0.1:1337');<\/code>, it has to be <code>var socket = io.connect('\/\/SERVER_IP_HERE:1337');<\/code><\/li>\n<li>If you are having issue getting it to work on https, check out <a href=\"https:\/\/github.com\/Wisembly\/elephant.io\/issues?utf8=%E2%9C%93&amp;q=\">issues section<\/a> to fix it.<\/li>\n<li>Check out <strong>examples<\/strong> folder of <code>elephant.io<\/code> to know how to send or receive messages both from PHP as well as Javascript.<\/li>\n<\/ul>",
			"addpost": "addpost",
			"dated": "July 22, 2017 02:19 AM",
			"slug": "sockets-with-php-and-node",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>I was looking to implement real time notifications system via sockets without having to use any third party services such as <a href=\"https:\/\/pusher.com\/\">Pusher<\/a>, etc. I just wanted to be able to send notifications from PHP side to the client and instantly show them on the web application sim...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		}
	],
	"homePosts": [
		{
			"author": "Sarfraz Ahmed",
			"title": "Laravel: Automatic Vendor Cleanup Command",
			"tags": [
				"command",
				"laravel",
				"vendor"
			],
			"category": "PHP",
			"body": "<p>When installing composer packages, they come up with <strong>lot of useless files and folders<\/strong> such as <code>.git<\/code>, <code>tests<\/code>, <code>readme.md<\/code> and more. When project becomes bigger with many packages, this junk takes considerable disk space. Since I work with Laravel framework most of the time, I created a command that allows me to automatically delete all these junk files whenever I happen to install or update composer packages.<\/p>\n<p>Here is the pattern used by <code>glob<\/code> function to detect and delete all junk files:<\/p>\n<pre><code>protected $patterns = [\n    '.git',\n    '.github',\n    'test',\n    'tests',\n    'travis',\n    'demo',\n    'demos',\n    'license',\n    'changelog*',\n    'contributing*',\n    'upgrading*',\n    'upgrade*',\n    '.idea',\n    '.vagrant',\n    'readme*',\n    '_ide_helper.php',\n    '{,.}*.yml',\n    '*.yaml',\n    '*.md',\n    '*.xml',\n    '*.log',\n    '*.txt',\n    '*.dist',\n    '*.pdf',\n    '*.xls',\n    '*.doc',\n    '*.docx',\n    '*.png',\n    '*.gif',\n    '*.jpg',\n    '*.bmp',\n    '*.jpeg',\n    '*.ico',\n    '.php_cs*',\n    '.scrutinizer',\n    '.gitignore',\n    '.gitattributes',\n    '.editorconfig',\n    'dockerfile',\n    'composer.json',\n    'composer.lock',\n];<\/code><\/pre>\n<p>The command itself can be <a href=\"https:\/\/github.com\/sarfraznawaz2005\/laravel55-starter\/blob\/master\/Modules\/Core\/Console\/VendorCleanup.php\">seen here<\/a>.<\/p>\n<p>To automatically cleanup junk files\/folders when installing or updating composer packages in Laravel, <code>@php artisan vendor:cleanup<\/code> should be added under the <code>post-autoload-dump<\/code> section in <code>composer.json<\/code> file. Or we can also trigger it manually anytime by typing <code>php artisan vendor:cleanup --o<\/code> where <code>--o<\/code> is optional argument to display verbose output.<\/p>\n<p>If you actually want to be able to use this idea of cleanup of useless files in any PHP project (Laravel or not), you might want to create a <a href=\"https:\/\/getcomposer.org\/doc\/articles\/plugins.md\">composer plugin<\/a> instead and install it globally that can then work across PHP projects and cleanup useless files from the <code>vendor<\/code> folder.<\/p>\n<p>If you witness any issue or something missing in the pattern list shown above, please leave your suggestion\/improvements in comments. Thanks<\/p>",
			"addpost": "addpost",
			"dated": "January 25, 2018 12:16 AM",
			"slug": "laravel-automatic-vendor-cleanup-command",
			"categoryslug": "php",
			"status": "publised",
			"summary": "\n<p>When installing composer packages, they come up with <strong>lot of useless files and folders<\/strong> such as <code>.git<\/code>, <code>tests<\/code>, <code>readme.md<\/code> and more. When project becomes bigger with many packages, this junk takes considerable disk space. Since I work with Laravel...<\/p>\n",
			"prevStatus": "publised",
			"showbody": "1"
		}
	],
	"categories": [
		{
			"category": "BloggerCMS",
			"categoryslug": "bloggercms"
		},
		{
			"category": "Design Patterns",
			"categoryslug": "design-patterns"
		},
		{
			"category": "Javascript",
			"categoryslug": "javascript"
		},
		{
			"category": "PHP",
			"categoryslug": "php"
		},
		{
			"category": "Random",
			"categoryslug": "random"
		}
	],
	"tagsCloud": "<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/abstract\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">abstract<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/adapter\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">adapter<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/app\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">app<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/backup\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">backup<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/blog\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">blog<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/bloggercms\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">bloggercms<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/browser\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">browser<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/closure\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">closure<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/cms\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">cms<\/a>\n<a style=\"font-size: 15px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/codeigniter\" title=\"6 total posts\" data-original-title=\"7 total posts\" data-toggle=\"tooltip\">codeigniter<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/command\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">command<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/composer\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">composer<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/console\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">console<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/container\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">container<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/controller\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">controller<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/custom\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">custom<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/database\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">database<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/datamapper\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">datamapper<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/date\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">date<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/dependency\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">dependency<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/deployment\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">deployment<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/design-pattern\" title=\"4 total posts\" data-original-title=\"5 total posts\" data-toggle=\"tooltip\">design-pattern<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/development\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">development<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/devtools\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">devtools<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/drive\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">drive<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/error\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">error<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/exception\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">exception<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/ftp\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">ftp<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/function\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">function<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/git\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">git<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/github\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">github<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/googledrive\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">googledrive<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/injection\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">injection<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/interface\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">interface<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/javascript\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">javascript<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/lambda\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">lambda<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/laravel\" title=\"4 total posts\" data-original-title=\"5 total posts\" data-toggle=\"tooltip\">laravel<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/log\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">log<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/migration\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">migration<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/mysql\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">mysql<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/node\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">node<\/a>\n<a style=\"font-size: 14px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/oop\" title=\"5 total posts\" data-original-title=\"6 total posts\" data-toggle=\"tooltip\">oop<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/pdo\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">pdo<\/a>\n<a style=\"font-size: 30px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/php\" title=\"29 total posts\" data-original-title=\"30 total posts\" data-toggle=\"tooltip\">php<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/phpexecute\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">phpexecute<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/polymorphism\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">polymorphism<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/puppeteer\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">puppeteer<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/realtime\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">realtime<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/refactoring\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">refactoring<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/runner\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">runner<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/scope\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">scope<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/semver\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">semver<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/service\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">service<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/singleton\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">singleton<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/slim\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">slim<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/socket\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">socket<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/spl\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">spl<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/sql\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">sql<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/sqlite\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">sqlite<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/ssh\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">ssh<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/stackoverflow\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">stackoverflow<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/static\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">static<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/strategy\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">strategy<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/svn\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">svn<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/tester\" title=\"2 total posts\" data-original-title=\"3 total posts\" data-toggle=\"tooltip\">tester<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/time\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">time<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/timezone\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">timezone<\/a>\n<a style=\"font-size: 13px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/tip\" title=\"3 total posts\" data-original-title=\"4 total posts\" data-toggle=\"tooltip\">tip<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/todo\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">todo<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/trait\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">trait<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/vendor\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">vendor<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/versioning\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">versioning<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/visual\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">visual<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/wamp\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">wamp<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/whatsapp\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">whatsapp<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/workflow\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">workflow<\/a>\n<a style=\"font-size: 12px\" class=\"tag_cloud\" href=\"https:\/\/codeinphp.github.io\/tag\/xampp\" title=\"1 total posts\" data-original-title=\"2 total posts\" data-toggle=\"tooltip\">xampp<\/a>\n",
	"archives": "<ul class=\"archives list-group\"><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/january-2018\">January 2018<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/december-2017\">December 2017<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/september-2017\">September 2017<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/august-2017\">August 2017<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/july-2017\">July 2017<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/september-2016\">September 2016<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/august-2016\">August 2016<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/may-2016\">May 2016<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/december-2015\">December 2015<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/may-2015\">May 2015<\/a><\/li><li class=\"list-group-item archive_link\"><a href=\"https:\/\/codeinphp.github.io\/archive\/april-2015\">April 2015<\/a><\/li><\/ul>"
}